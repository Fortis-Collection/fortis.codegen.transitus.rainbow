/*
 * Fortis Template Models for Poker Central
 *
<<<<<<< HEAD
 * Generated at 09/08/2015 06:23:41
=======
 * Generated at 09/07/2015 22:56:27
>>>>>>> Added Player Hero and Player Slider code
 */

// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantExtendsListEntry
// ReSharper disable RedundantNameQualifier

using System;
using System.Collections.Generic;
using Sitecore.Data.Items;
using Sitecore.ContentSearch;
using Sitecore.ContentSearch.Linq.Common;
using Fortis.Model;
using Fortis.Model.Fields;
using Fortis.Providers;

#region Assets (Ignite)
namespace LM.Model.Templates.Ignite
{
	/// <summary><para>Template: Assets</para><para>ID: {1F443C63-BBC5-40F3-AEE2-A7A70EA48F0D}</para><para>/sitecore/templates/Ignite/Assets</para></summary>
	[TemplateMapping("{1F443C63-BBC5-40F3-AEE2-A7A70EA48F0D}", "InterfaceMap")]
	public partial interface IAssets :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteFolder,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{1F443C63-BBC5-40F3-AEE2-A7A70EA48F0D}", typeof(Guid))]
	[TemplateMapping("{1F443C63-BBC5-40F3-AEE2-A7A70EA48F0D}")]
	public partial class Assets : CustomItemWrapper, IAssets
	{
		public Assets(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public Assets(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }
	}
}
#endregion
#region Ignite Bucket Template (Ignite)
namespace LM.Model.Templates.Ignite
{
	/// <summary><para>Template: Ignite Bucket Template</para><para>ID: {88DD19F6-A03C-412C-AB52-5515342FC30D}</para><para>/sitecore/templates/Ignite/Ignite Bucket Template</para></summary>
	[TemplateMapping("{88DD19F6-A03C-412C-AB52-5515342FC30D}", "InterfaceMap")]
	public partial interface IIgniteBucketTemplate :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{

    	/// <summary><para>Template: Ignite Bucket Template</para><para>Field: Item Buckets Wildcard Item</para><para>Data type: Treelist</para></summary>
		[IndexField("item_buckets_wildcard_item")]
		IListFieldWrapper ItemBucketsWildcardItem { get; }

    	/// <summary><para>Template: Ignite Bucket Template</para><para>Field: Item Buckets Wildcard Item</para><para>Data type: Treelist</para></summary>
		[IndexField("item_buckets_wildcard_item")]
		IEnumerable<Guid> ItemBucketsWildcardItemValue { get; }

    	/// <summary><para>Template: Ignite Bucket Template</para><para>Field: Item Buckets Wildcard Token</para><para>Data type: Droplink</para></summary>
		[IndexField("item_buckets_wildcard_token")]
		ILinkFieldWrapper ItemBucketsWildcardToken { get; }

    	/// <summary><para>Template: Ignite Bucket Template</para><para>Field: Item Buckets Wildcard Token</para><para>Data type: Droplink</para></summary>
		[IndexField("item_buckets_wildcard_token")]
		Guid ItemBucketsWildcardTokenValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{88DD19F6-A03C-412C-AB52-5515342FC30D}", typeof(Guid))]
	[TemplateMapping("{88DD19F6-A03C-412C-AB52-5515342FC30D}")]
	public partial class IgniteBucketTemplate : CustomItemWrapper, IIgniteBucketTemplate
	{
		public IgniteBucketTemplate(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public IgniteBucketTemplate(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: ItemBucketsWildcardItem</para><para>Data type: Treelist</para></summary>
		[IndexField("item_buckets_wildcard_item")]
		public virtual IListFieldWrapper ItemBucketsWildcardItem => this.GetField<ListFieldWrapper>("Item Buckets Wildcard Item");

		[IndexField("item_buckets_wildcard_item")]
 		public IEnumerable<Guid> ItemBucketsWildcardItemValue => this.ItemBucketsWildcardItem.Value;

		/// <summary><para>Field: ItemBucketsWildcardToken</para><para>Data type: Droplink</para></summary>
		[IndexField("item_buckets_wildcard_token")]
		public virtual ILinkFieldWrapper ItemBucketsWildcardToken => this.GetField<LinkFieldWrapper>("Item Buckets Wildcard Token");

		[IndexField("item_buckets_wildcard_token")]
 		public Guid ItemBucketsWildcardTokenValue => this.ItemBucketsWildcardToken.Value;
	}
}
#endregion
#region Ignite Folder (Ignite)
namespace LM.Model.Templates.Ignite
{
	/// <summary><para>Template: Ignite Folder</para><para>ID: {D9AFFFBE-D870-4278-B4FB-825D12201C4D}</para><para>/sitecore/templates/Ignite/Ignite Folder</para></summary>
	[TemplateMapping("{D9AFFFBE-D870-4278-B4FB-825D12201C4D}", "InterfaceMap")]
	public partial interface IIgniteFolder :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{D9AFFFBE-D870-4278-B4FB-825D12201C4D}", typeof(Guid))]
	[TemplateMapping("{D9AFFFBE-D870-4278-B4FB-825D12201C4D}")]
	public partial class IgniteFolder : CustomItemWrapper, IIgniteFolder
	{
		public IgniteFolder(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public IgniteFolder(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }
	}
}
#endregion
#region Ignite Rendering Parameters (Ignite)
namespace LM.Model.Templates.Ignite
{
	/// <summary>
	/// <para>Template: Ignite Rendering Parameters</para>
	/// <para>ID: {E13DB450-F493-42D5-B1C1-536A57AED2A6}</para>
	/// <para>/sitecore/templates/Ignite/Ignite Rendering Parameters</para>
	/// </summary>
	[TemplateMapping("{E13DB450-F493-42D5-B1C1-536A57AED2A6}", "InterfaceRenderingParameterMap")]
	public partial interface IIgniteRenderingParameters :
		IRenderingParameterWrapper	{
	}
	
	[TemplateMapping("{E13DB450-F493-42D5-B1C1-536A57AED2A6}", "RenderingParameter")]
	public partial class IgniteRenderingParameters : RenderingParameterWrapper, IIgniteRenderingParameters
	{
		public IgniteRenderingParameters(Dictionary<string, string> parameters, ISpawnProvider spawnProvider)
			: base(parameters, spawnProvider)
		{ }
	
	}
}
#endregion
#region Ignite Standard Template (Ignite)
namespace LM.Model.Templates.Ignite
{
	/// <summary><para>Template: Ignite Standard Template</para><para>ID: {C99768FE-5EF4-4A9A-A06B-F6F926391940}</para><para>/sitecore/templates/Ignite/Ignite Standard Template</para></summary>
	[TemplateMapping("{C99768FE-5EF4-4A9A-A06B-F6F926391940}", "InterfaceMap")]
	public partial interface IIgniteStandardTemplate :
		ICustomItemWrapper
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{C99768FE-5EF4-4A9A-A06B-F6F926391940}", typeof(Guid))]
	[TemplateMapping("{C99768FE-5EF4-4A9A-A06B-F6F926391940}")]
	public partial class IgniteStandardTemplate : CustomItemWrapper, IIgniteStandardTemplate
	{
		public IgniteStandardTemplate(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public IgniteStandardTemplate(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }
	}
}
#endregion
#region Ignite Wildcard Template (Ignite)
namespace LM.Model.Templates.Ignite
{
	/// <summary><para>Template: Ignite Wildcard Template</para><para>ID: {84A7C848-246D-4E21-9164-5B0EFA1AAC9D}</para><para>/sitecore/templates/Ignite/Ignite Wildcard Template</para></summary>
	[TemplateMapping("{84A7C848-246D-4E21-9164-5B0EFA1AAC9D}", "InterfaceMap")]
	public partial interface IIgniteWildcardTemplate :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{

    	/// <summary><para>Template: Ignite Wildcard Template</para><para>Field: __WildcardItemBucket</para><para>Data type: Droptree</para></summary>
		[IndexField("__wildcarditembucket")]
		ILinkFieldWrapper WildcardItemBucket { get; }

    	/// <summary><para>Template: Ignite Wildcard Template</para><para>Field: __WildcardItemBucket</para><para>Data type: Droptree</para></summary>
		[IndexField("__wildcarditembucket")]
		Guid WildcardItemBucketValue { get; }

    	/// <summary><para>Template: Ignite Wildcard Template</para><para>Field: Item Buckets Wildcard Token</para><para>Data type: Droplink</para></summary>
		[IndexField("item_buckets_wildcard_token")]
		ILinkFieldWrapper ItemBucketsWildcardToken { get; }

    	/// <summary><para>Template: Ignite Wildcard Template</para><para>Field: Item Buckets Wildcard Token</para><para>Data type: Droplink</para></summary>
		[IndexField("item_buckets_wildcard_token")]
		Guid ItemBucketsWildcardTokenValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{84A7C848-246D-4E21-9164-5B0EFA1AAC9D}", typeof(Guid))]
	[TemplateMapping("{84A7C848-246D-4E21-9164-5B0EFA1AAC9D}")]
	public partial class IgniteWildcardTemplate : CustomItemWrapper, IIgniteWildcardTemplate
	{
		public IgniteWildcardTemplate(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public IgniteWildcardTemplate(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: WildcardItemBucket</para><para>Data type: Droptree</para></summary>
		[IndexField("__wildcarditembucket")]
		public virtual ILinkFieldWrapper WildcardItemBucket => this.GetField<LinkFieldWrapper>("__WildcardItemBucket");

		[IndexField("__wildcarditembucket")]
 		public Guid WildcardItemBucketValue => this.WildcardItemBucket.Value;

		/// <summary><para>Field: ItemBucketsWildcardToken</para><para>Data type: Droplink</para></summary>
		[IndexField("item_buckets_wildcard_token")]
		public virtual ILinkFieldWrapper ItemBucketsWildcardToken => this.GetField<LinkFieldWrapper>("Item Buckets Wildcard Token");

		[IndexField("item_buckets_wildcard_token")]
 		public Guid ItemBucketsWildcardTokenValue => this.ItemBucketsWildcardToken.Value;
	}
}
#endregion
#region Local Content Folder (Ignite)
namespace LM.Model.Templates.Ignite
{
	/// <summary><para>Template: Local Content Folder</para><para>ID: {CAD3FC26-1B71-4FEE-809B-ACC0F05F6E6C}</para><para>/sitecore/templates/Ignite/Local Content Folder</para></summary>
	[TemplateMapping("{CAD3FC26-1B71-4FEE-809B-ACC0F05F6E6C}", "InterfaceMap")]
	public partial interface ILocalContentFolder :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteFolder,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{CAD3FC26-1B71-4FEE-809B-ACC0F05F6E6C}", typeof(Guid))]
	[TemplateMapping("{CAD3FC26-1B71-4FEE-809B-ACC0F05F6E6C}")]
	public partial class LocalContentFolder : CustomItemWrapper, ILocalContentFolder
	{
		public LocalContentFolder(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public LocalContentFolder(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }
	}
}
#endregion
#region HtmlPhrase (Ignite)
namespace LM.Model.Templates.Ignite
{
	/// <summary><para>Template: HtmlPhrase</para><para>ID: {4AD20F42-1A7D-4973-96F9-DC37152D07DA}</para><para>/sitecore/templates/Ignite/Phrases/HtmlPhrase</para></summary>
	[TemplateMapping("{4AD20F42-1A7D-4973-96F9-DC37152D07DA}", "InterfaceMap")]
	public partial interface IHtmlPhrase :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.Ignite.IPhrase
	{

    	/// <summary><para>Template: HtmlPhrase</para><para>Field: Phrase</para><para>Data type: Rich Text</para></summary>
		[IndexField("phrase")]
		IRichTextFieldWrapper Phrase { get; }

    	/// <summary><para>Template: HtmlPhrase</para><para>Field: Phrase</para><para>Data type: Rich Text</para></summary>
		[IndexField("phrase")]
		string PhraseValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{4AD20F42-1A7D-4973-96F9-DC37152D07DA}", typeof(Guid))]
	[TemplateMapping("{4AD20F42-1A7D-4973-96F9-DC37152D07DA}")]
	public partial class HtmlPhrase : CustomItemWrapper, IHtmlPhrase
	{
		public HtmlPhrase(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public HtmlPhrase(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: Phrase</para><para>Data type: Rich Text</para></summary>
		[IndexField("phrase")]
		public virtual IRichTextFieldWrapper Phrase => this.GetField<RichTextFieldWrapper>("Phrase");

		[IndexField("phrase")]
 		public string PhraseValue => this.Phrase.Value;
	}
}
#endregion
#region Image Phrase (Ignite)
namespace LM.Model.Templates.Ignite
{
	/// <summary><para>Template: Image Phrase</para><para>ID: {813A77F9-58C3-4941-BD97-5BFCE4727F4A}</para><para>/sitecore/templates/Ignite/Phrases/Image Phrase</para></summary>
	[TemplateMapping("{813A77F9-58C3-4941-BD97-5BFCE4727F4A}", "InterfaceMap")]
	public partial interface IImagePhrase :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.Ignite.IPhrase
	{

    	/// <summary><para>Template: Image Phrase</para><para>Field: Phrase</para><para>Data type: Image</para></summary>
		IImageFieldWrapper Phrase { get; }

    	/// <summary><para>Template: Image Phrase</para><para>Field: Phrase</para><para>Data type: Image</para></summary>
		string PhraseValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{813A77F9-58C3-4941-BD97-5BFCE4727F4A}", typeof(Guid))]
	[TemplateMapping("{813A77F9-58C3-4941-BD97-5BFCE4727F4A}")]
	public partial class ImagePhrase : CustomItemWrapper, IImagePhrase
	{
		public ImagePhrase(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public ImagePhrase(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: Phrase</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper Phrase => this.GetField<ImageFieldWrapper>("Phrase");

 		public string PhraseValue => this.Phrase.Value;
	}
}
#endregion
#region Phrase Dictionary (Ignite)
namespace LM.Model.Templates.Ignite
{
	/// <summary><para>Template: Phrase Dictionary</para><para>ID: {59A892A5-11FA-4F2A-9E84-99B56DA2D294}</para><para>/sitecore/templates/Ignite/Phrases/Phrase Dictionary</para></summary>
	[TemplateMapping("{59A892A5-11FA-4F2A-9E84-99B56DA2D294}", "InterfaceMap")]
	public partial interface IPhraseDictionary :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteFolder,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{59A892A5-11FA-4F2A-9E84-99B56DA2D294}", typeof(Guid))]
	[TemplateMapping("{59A892A5-11FA-4F2A-9E84-99B56DA2D294}")]
	public partial class PhraseDictionary : CustomItemWrapper, IPhraseDictionary
	{
		public PhraseDictionary(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public PhraseDictionary(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }
	}
}
#endregion
#region Phrase (Ignite)
namespace LM.Model.Templates.Ignite
{
	/// <summary><para>Template: Phrase</para><para>ID: {DC9FA523-7F26-44F7-96A5-E4FF9B64658A}</para><para>/sitecore/templates/Ignite/Phrases/Phrase</para></summary>
	[TemplateMapping("{DC9FA523-7F26-44F7-96A5-E4FF9B64658A}", "InterfaceMap")]
	public partial interface IPhrase :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{DC9FA523-7F26-44F7-96A5-E4FF9B64658A}", typeof(Guid))]
	[TemplateMapping("{DC9FA523-7F26-44F7-96A5-E4FF9B64658A}")]
	public partial class Phrase : CustomItemWrapper, IPhrase
	{
		public Phrase(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public Phrase(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }
	}
}
#endregion
#region Phrases Folder (Ignite)
namespace LM.Model.Templates.Ignite
{
	/// <summary><para>Template: Phrases Folder</para><para>ID: {B5F5E686-FA8E-4B89-B9D9-50BC53168C1A}</para><para>/sitecore/templates/Ignite/Phrases/Phrases Folder</para></summary>
	[TemplateMapping("{B5F5E686-FA8E-4B89-B9D9-50BC53168C1A}", "InterfaceMap")]
	public partial interface IPhrasesFolder :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteFolder,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{B5F5E686-FA8E-4B89-B9D9-50BC53168C1A}", typeof(Guid))]
	[TemplateMapping("{B5F5E686-FA8E-4B89-B9D9-50BC53168C1A}")]
	public partial class PhrasesFolder : CustomItemWrapper, IPhrasesFolder
	{
		public PhrasesFolder(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public PhrasesFolder(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }
	}
}
#endregion
#region TextPhrase (Ignite)
namespace LM.Model.Templates.Ignite
{
	/// <summary><para>Template: TextPhrase</para><para>ID: {A24644F1-7060-46C4-9ACD-B181ACB653F7}</para><para>/sitecore/templates/Ignite/Phrases/TextPhrase</para></summary>
	[TemplateMapping("{A24644F1-7060-46C4-9ACD-B181ACB653F7}", "InterfaceMap")]
	public partial interface ITextPhrase :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.Ignite.IPhrase
	{

    	/// <summary><para>Template: TextPhrase</para><para>Field: Phrase</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("phrase")]
		ITextFieldWrapper Phrase { get; }

    	/// <summary><para>Template: TextPhrase</para><para>Field: Phrase</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("phrase")]
		string PhraseValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{A24644F1-7060-46C4-9ACD-B181ACB653F7}", typeof(Guid))]
	[TemplateMapping("{A24644F1-7060-46C4-9ACD-B181ACB653F7}")]
	public partial class TextPhrase : CustomItemWrapper, ITextPhrase
	{
		public TextPhrase(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public TextPhrase(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: Phrase</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("phrase")]
		public virtual ITextFieldWrapper Phrase => this.GetField<TextFieldWrapper>("Phrase");

		[IndexField("phrase")]
 		public string PhraseValue => this.Phrase.Value;
	}
}
#endregion
#region Login Page (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Login Page</para><para>ID: {5769E7B7-2380-413C-80C6-75B03D327012}</para><para>/sitecore/templates/User Defined/Poker Central/Auth/Login Page</para></summary>
	[TemplateMapping("{5769E7B7-2380-413C-80C6-75B03D327012}", "InterfaceMap")]
	public partial interface ILoginPage :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.PokerCentral.IChildContentPage,
		LM.Model.Templates.PokerCentral.IContentPage,
		LM.Model.Templates.PokerCentral.IContent,
		LM.Model.Templates.PokerCentral.ISponsors,
		LM.Model.Templates.PokerCentral.IAnalyticsTracking,
		LM.Model.Templates.PokerCentral.INavigation,
		LM.Model.Templates.PokerCentral.IMetaData
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{5769E7B7-2380-413C-80C6-75B03D327012}", typeof(Guid))]
	[TemplateMapping("{5769E7B7-2380-413C-80C6-75B03D327012}")]
	public partial class LoginPage : CustomItemWrapper, ILoginPage
	{
		public LoginPage(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public LoginPage(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: ContentBody</para><para>Data type: Rich Text</para></summary>
		[IndexField("content_body")]
		public virtual IRichTextFieldWrapper ContentBody => this.GetField<RichTextFieldWrapper>("Content Body");

		[IndexField("content_body")]
 		public string ContentBodyValue => this.ContentBody.Value;

		/// <summary><para>Field: HideFromMenu</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_menu")]
		public virtual IBooleanFieldWrapper HideFromMenu => this.GetField<BooleanFieldWrapper>("Hide From Menu");

		[IndexField("hide_from_menu")]
 		public bool HideFromMenuValue => this.HideFromMenu.Value;

		/// <summary><para>Field: HideFromSitemap</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_sitemap")]
		public virtual IBooleanFieldWrapper HideFromSitemap => this.GetField<BooleanFieldWrapper>("Hide from Sitemap");

		[IndexField("hide_from_sitemap")]
 		public bool HideFromSitemapValue => this.HideFromSitemap.Value;

		/// <summary><para>Field: MetaCanonicalUrl</para><para>Data type: General Link</para></summary>
		[IndexField("meta_canonical_url")]
		public virtual IGeneralLinkFieldWrapper MetaCanonicalUrl => this.GetField<GeneralLinkFieldWrapper>("Meta Canonical Url");

		[IndexField("meta_canonical_url")]
 		public string MetaCanonicalUrlValue => this.MetaCanonicalUrl.Value;

		/// <summary><para>Field: MetaDescription</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("meta_description")]
		public virtual ITextFieldWrapper MetaDescription => this.GetField<TextFieldWrapper>("Meta Description");

		[IndexField("meta_description")]
 		public string MetaDescriptionValue => this.MetaDescription.Value;

		/// <summary><para>Field: MetaImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper MetaImage => this.GetField<ImageFieldWrapper>("Meta Image");

 		public string MetaImageValue => this.MetaImage.Value;

		/// <summary><para>Field: MetaKeywords</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_keywords")]
		public virtual ITextFieldWrapper MetaKeywords => this.GetField<TextFieldWrapper>("Meta Keywords");

		[IndexField("meta_keywords")]
 		public string MetaKeywordsValue => this.MetaKeywords.Value;

		/// <summary><para>Field: MetaTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_title")]
		public virtual ITextFieldWrapper MetaTitle => this.GetField<TextFieldWrapper>("Meta Title");

		[IndexField("meta_title")]
 		public string MetaTitleValue => this.MetaTitle.Value;

		/// <summary><para>Field: NavigationImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper NavigationImage => this.GetField<ImageFieldWrapper>("Navigation Image");

 		public string NavigationImageValue => this.NavigationImage.Value;

		/// <summary><para>Field: NavigationTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("navigation_title")]
		public virtual ITextFieldWrapper NavigationTitle => this.GetField<TextFieldWrapper>("Navigation Title");

		[IndexField("navigation_title")]
 		public string NavigationTitleValue => this.NavigationTitle.Value;

		/// <summary><para>Field: NavigationUrl</para><para>Data type: General Link</para></summary>
		[IndexField("navigation_url")]
		public virtual IGeneralLinkFieldWrapper NavigationUrl => this.GetField<GeneralLinkFieldWrapper>("Navigation Url");

		[IndexField("navigation_url")]
 		public string NavigationUrlValue => this.NavigationUrl.Value;

		/// <summary><para>Field: PageSummary</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("page_summary")]
		public virtual ITextFieldWrapper PageSummary => this.GetField<TextFieldWrapper>("Page Summary");

		[IndexField("page_summary")]
 		public string PageSummaryValue => this.PageSummary.Value;

		/// <summary><para>Field: PageTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("page_title")]
		public virtual ITextFieldWrapper PageTitle => this.GetField<TextFieldWrapper>("Page Title");

		[IndexField("page_title")]
 		public string PageTitleValue => this.PageTitle.Value;

		/// <summary><para>Field: SponsoredBackground</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper SponsoredBackground => this.GetField<ImageFieldWrapper>("Sponsored Background");

 		public string SponsoredBackgroundValue => this.SponsoredBackground.Value;

		/// <summary><para>Field: TrackingAction</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_action")]
		public virtual ITextFieldWrapper TrackingAction => this.GetField<TextFieldWrapper>("Tracking Action");

		[IndexField("tracking_action")]
 		public string TrackingActionValue => this.TrackingAction.Value;

		/// <summary><para>Field: TrackingCategory</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_category")]
		public virtual ITextFieldWrapper TrackingCategory => this.GetField<TextFieldWrapper>("Tracking Category");

		[IndexField("tracking_category")]
 		public string TrackingCategoryValue => this.TrackingCategory.Value;

		/// <summary><para>Field: TrackingLabel</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_label")]
		public virtual ITextFieldWrapper TrackingLabel => this.GetField<TextFieldWrapper>("Tracking Label");

		[IndexField("tracking_label")]
 		public string TrackingLabelValue => this.TrackingLabel.Value;
	}
}
#endregion
#region Profile Page (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Profile Page</para><para>ID: {457E1672-0B7B-4B5F-96A0-CF7DE4DD2A0E}</para><para>/sitecore/templates/User Defined/Poker Central/Auth/Profile Page</para></summary>
	[TemplateMapping("{457E1672-0B7B-4B5F-96A0-CF7DE4DD2A0E}", "InterfaceMap")]
	public partial interface IProfilePage :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.PokerCentral.IChildContentPage,
		LM.Model.Templates.PokerCentral.IContentPage,
		LM.Model.Templates.PokerCentral.IContent,
		LM.Model.Templates.PokerCentral.ISponsors,
		LM.Model.Templates.PokerCentral.IAnalyticsTracking,
		LM.Model.Templates.PokerCentral.INavigation,
		LM.Model.Templates.PokerCentral.IMetaData
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{457E1672-0B7B-4B5F-96A0-CF7DE4DD2A0E}", typeof(Guid))]
	[TemplateMapping("{457E1672-0B7B-4B5F-96A0-CF7DE4DD2A0E}")]
	public partial class ProfilePage : CustomItemWrapper, IProfilePage
	{
		public ProfilePage(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public ProfilePage(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: ContentBody</para><para>Data type: Rich Text</para></summary>
		[IndexField("content_body")]
		public virtual IRichTextFieldWrapper ContentBody => this.GetField<RichTextFieldWrapper>("Content Body");

		[IndexField("content_body")]
 		public string ContentBodyValue => this.ContentBody.Value;

		/// <summary><para>Field: HideFromMenu</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_menu")]
		public virtual IBooleanFieldWrapper HideFromMenu => this.GetField<BooleanFieldWrapper>("Hide From Menu");

		[IndexField("hide_from_menu")]
 		public bool HideFromMenuValue => this.HideFromMenu.Value;

		/// <summary><para>Field: HideFromSitemap</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_sitemap")]
		public virtual IBooleanFieldWrapper HideFromSitemap => this.GetField<BooleanFieldWrapper>("Hide from Sitemap");

		[IndexField("hide_from_sitemap")]
 		public bool HideFromSitemapValue => this.HideFromSitemap.Value;

		/// <summary><para>Field: MetaCanonicalUrl</para><para>Data type: General Link</para></summary>
		[IndexField("meta_canonical_url")]
		public virtual IGeneralLinkFieldWrapper MetaCanonicalUrl => this.GetField<GeneralLinkFieldWrapper>("Meta Canonical Url");

		[IndexField("meta_canonical_url")]
 		public string MetaCanonicalUrlValue => this.MetaCanonicalUrl.Value;

		/// <summary><para>Field: MetaDescription</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("meta_description")]
		public virtual ITextFieldWrapper MetaDescription => this.GetField<TextFieldWrapper>("Meta Description");

		[IndexField("meta_description")]
 		public string MetaDescriptionValue => this.MetaDescription.Value;

		/// <summary><para>Field: MetaImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper MetaImage => this.GetField<ImageFieldWrapper>("Meta Image");

 		public string MetaImageValue => this.MetaImage.Value;

		/// <summary><para>Field: MetaKeywords</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_keywords")]
		public virtual ITextFieldWrapper MetaKeywords => this.GetField<TextFieldWrapper>("Meta Keywords");

		[IndexField("meta_keywords")]
 		public string MetaKeywordsValue => this.MetaKeywords.Value;

		/// <summary><para>Field: MetaTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_title")]
		public virtual ITextFieldWrapper MetaTitle => this.GetField<TextFieldWrapper>("Meta Title");

		[IndexField("meta_title")]
 		public string MetaTitleValue => this.MetaTitle.Value;

		/// <summary><para>Field: NavigationImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper NavigationImage => this.GetField<ImageFieldWrapper>("Navigation Image");

 		public string NavigationImageValue => this.NavigationImage.Value;

		/// <summary><para>Field: NavigationTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("navigation_title")]
		public virtual ITextFieldWrapper NavigationTitle => this.GetField<TextFieldWrapper>("Navigation Title");

		[IndexField("navigation_title")]
 		public string NavigationTitleValue => this.NavigationTitle.Value;

		/// <summary><para>Field: NavigationUrl</para><para>Data type: General Link</para></summary>
		[IndexField("navigation_url")]
		public virtual IGeneralLinkFieldWrapper NavigationUrl => this.GetField<GeneralLinkFieldWrapper>("Navigation Url");

		[IndexField("navigation_url")]
 		public string NavigationUrlValue => this.NavigationUrl.Value;

		/// <summary><para>Field: PageSummary</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("page_summary")]
		public virtual ITextFieldWrapper PageSummary => this.GetField<TextFieldWrapper>("Page Summary");

		[IndexField("page_summary")]
 		public string PageSummaryValue => this.PageSummary.Value;

		/// <summary><para>Field: PageTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("page_title")]
		public virtual ITextFieldWrapper PageTitle => this.GetField<TextFieldWrapper>("Page Title");

		[IndexField("page_title")]
 		public string PageTitleValue => this.PageTitle.Value;

		/// <summary><para>Field: SponsoredBackground</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper SponsoredBackground => this.GetField<ImageFieldWrapper>("Sponsored Background");

 		public string SponsoredBackgroundValue => this.SponsoredBackground.Value;

		/// <summary><para>Field: TrackingAction</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_action")]
		public virtual ITextFieldWrapper TrackingAction => this.GetField<TextFieldWrapper>("Tracking Action");

		[IndexField("tracking_action")]
 		public string TrackingActionValue => this.TrackingAction.Value;

		/// <summary><para>Field: TrackingCategory</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_category")]
		public virtual ITextFieldWrapper TrackingCategory => this.GetField<TextFieldWrapper>("Tracking Category");

		[IndexField("tracking_category")]
 		public string TrackingCategoryValue => this.TrackingCategory.Value;

		/// <summary><para>Field: TrackingLabel</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_label")]
		public virtual ITextFieldWrapper TrackingLabel => this.GetField<TextFieldWrapper>("Tracking Label");

		[IndexField("tracking_label")]
 		public string TrackingLabelValue => this.TrackingLabel.Value;
	}
}
#endregion
#region Profile Setup Page (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Profile Setup Page</para><para>ID: {EE72661D-18FE-4352-9BCC-8A7D57907808}</para><para>/sitecore/templates/User Defined/Poker Central/Auth/Profile Setup Page</para></summary>
	[TemplateMapping("{EE72661D-18FE-4352-9BCC-8A7D57907808}", "InterfaceMap")]
	public partial interface IProfileSetupPage :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.PokerCentral.IChildContentPage,
		LM.Model.Templates.PokerCentral.IContentPage,
		LM.Model.Templates.PokerCentral.IContent,
		LM.Model.Templates.PokerCentral.ISponsors,
		LM.Model.Templates.PokerCentral.IAnalyticsTracking,
		LM.Model.Templates.PokerCentral.INavigation,
		LM.Model.Templates.PokerCentral.IMetaData
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{EE72661D-18FE-4352-9BCC-8A7D57907808}", typeof(Guid))]
	[TemplateMapping("{EE72661D-18FE-4352-9BCC-8A7D57907808}")]
	public partial class ProfileSetupPage : CustomItemWrapper, IProfileSetupPage
	{
		public ProfileSetupPage(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public ProfileSetupPage(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: ContentBody</para><para>Data type: Rich Text</para></summary>
		[IndexField("content_body")]
		public virtual IRichTextFieldWrapper ContentBody => this.GetField<RichTextFieldWrapper>("Content Body");

		[IndexField("content_body")]
 		public string ContentBodyValue => this.ContentBody.Value;

		/// <summary><para>Field: HideFromMenu</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_menu")]
		public virtual IBooleanFieldWrapper HideFromMenu => this.GetField<BooleanFieldWrapper>("Hide From Menu");

		[IndexField("hide_from_menu")]
 		public bool HideFromMenuValue => this.HideFromMenu.Value;

		/// <summary><para>Field: HideFromSitemap</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_sitemap")]
		public virtual IBooleanFieldWrapper HideFromSitemap => this.GetField<BooleanFieldWrapper>("Hide from Sitemap");

		[IndexField("hide_from_sitemap")]
 		public bool HideFromSitemapValue => this.HideFromSitemap.Value;

		/// <summary><para>Field: MetaCanonicalUrl</para><para>Data type: General Link</para></summary>
		[IndexField("meta_canonical_url")]
		public virtual IGeneralLinkFieldWrapper MetaCanonicalUrl => this.GetField<GeneralLinkFieldWrapper>("Meta Canonical Url");

		[IndexField("meta_canonical_url")]
 		public string MetaCanonicalUrlValue => this.MetaCanonicalUrl.Value;

		/// <summary><para>Field: MetaDescription</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("meta_description")]
		public virtual ITextFieldWrapper MetaDescription => this.GetField<TextFieldWrapper>("Meta Description");

		[IndexField("meta_description")]
 		public string MetaDescriptionValue => this.MetaDescription.Value;

		/// <summary><para>Field: MetaImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper MetaImage => this.GetField<ImageFieldWrapper>("Meta Image");

 		public string MetaImageValue => this.MetaImage.Value;

		/// <summary><para>Field: MetaKeywords</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_keywords")]
		public virtual ITextFieldWrapper MetaKeywords => this.GetField<TextFieldWrapper>("Meta Keywords");

		[IndexField("meta_keywords")]
 		public string MetaKeywordsValue => this.MetaKeywords.Value;

		/// <summary><para>Field: MetaTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_title")]
		public virtual ITextFieldWrapper MetaTitle => this.GetField<TextFieldWrapper>("Meta Title");

		[IndexField("meta_title")]
 		public string MetaTitleValue => this.MetaTitle.Value;

		/// <summary><para>Field: NavigationImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper NavigationImage => this.GetField<ImageFieldWrapper>("Navigation Image");

 		public string NavigationImageValue => this.NavigationImage.Value;

		/// <summary><para>Field: NavigationTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("navigation_title")]
		public virtual ITextFieldWrapper NavigationTitle => this.GetField<TextFieldWrapper>("Navigation Title");

		[IndexField("navigation_title")]
 		public string NavigationTitleValue => this.NavigationTitle.Value;

		/// <summary><para>Field: NavigationUrl</para><para>Data type: General Link</para></summary>
		[IndexField("navigation_url")]
		public virtual IGeneralLinkFieldWrapper NavigationUrl => this.GetField<GeneralLinkFieldWrapper>("Navigation Url");

		[IndexField("navigation_url")]
 		public string NavigationUrlValue => this.NavigationUrl.Value;

		/// <summary><para>Field: PageSummary</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("page_summary")]
		public virtual ITextFieldWrapper PageSummary => this.GetField<TextFieldWrapper>("Page Summary");

		[IndexField("page_summary")]
 		public string PageSummaryValue => this.PageSummary.Value;

		/// <summary><para>Field: PageTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("page_title")]
		public virtual ITextFieldWrapper PageTitle => this.GetField<TextFieldWrapper>("Page Title");

		[IndexField("page_title")]
 		public string PageTitleValue => this.PageTitle.Value;

		/// <summary><para>Field: SponsoredBackground</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper SponsoredBackground => this.GetField<ImageFieldWrapper>("Sponsored Background");

 		public string SponsoredBackgroundValue => this.SponsoredBackground.Value;

		/// <summary><para>Field: TrackingAction</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_action")]
		public virtual ITextFieldWrapper TrackingAction => this.GetField<TextFieldWrapper>("Tracking Action");

		[IndexField("tracking_action")]
 		public string TrackingActionValue => this.TrackingAction.Value;

		/// <summary><para>Field: TrackingCategory</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_category")]
		public virtual ITextFieldWrapper TrackingCategory => this.GetField<TextFieldWrapper>("Tracking Category");

		[IndexField("tracking_category")]
 		public string TrackingCategoryValue => this.TrackingCategory.Value;

		/// <summary><para>Field: TrackingLabel</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_label")]
		public virtual ITextFieldWrapper TrackingLabel => this.GetField<TextFieldWrapper>("Tracking Label");

		[IndexField("tracking_label")]
 		public string TrackingLabelValue => this.TrackingLabel.Value;
	}
}
#endregion
#region Register Page (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Register Page</para><para>ID: {4FEB0609-295B-43F6-8DC8-702DE99EB585}</para><para>/sitecore/templates/User Defined/Poker Central/Auth/Register Page</para></summary>
	[TemplateMapping("{4FEB0609-295B-43F6-8DC8-702DE99EB585}", "InterfaceMap")]
	public partial interface IRegisterPage :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.PokerCentral.IChildContentPage,
		LM.Model.Templates.PokerCentral.IContentPage,
		LM.Model.Templates.PokerCentral.IContent,
		LM.Model.Templates.PokerCentral.ISponsors,
		LM.Model.Templates.PokerCentral.IAnalyticsTracking,
		LM.Model.Templates.PokerCentral.INavigation,
		LM.Model.Templates.PokerCentral.IMetaData
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{4FEB0609-295B-43F6-8DC8-702DE99EB585}", typeof(Guid))]
	[TemplateMapping("{4FEB0609-295B-43F6-8DC8-702DE99EB585}")]
	public partial class RegisterPage : CustomItemWrapper, IRegisterPage
	{
		public RegisterPage(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public RegisterPage(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: ContentBody</para><para>Data type: Rich Text</para></summary>
		[IndexField("content_body")]
		public virtual IRichTextFieldWrapper ContentBody => this.GetField<RichTextFieldWrapper>("Content Body");

		[IndexField("content_body")]
 		public string ContentBodyValue => this.ContentBody.Value;

		/// <summary><para>Field: HideFromMenu</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_menu")]
		public virtual IBooleanFieldWrapper HideFromMenu => this.GetField<BooleanFieldWrapper>("Hide From Menu");

		[IndexField("hide_from_menu")]
 		public bool HideFromMenuValue => this.HideFromMenu.Value;

		/// <summary><para>Field: HideFromSitemap</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_sitemap")]
		public virtual IBooleanFieldWrapper HideFromSitemap => this.GetField<BooleanFieldWrapper>("Hide from Sitemap");

		[IndexField("hide_from_sitemap")]
 		public bool HideFromSitemapValue => this.HideFromSitemap.Value;

		/// <summary><para>Field: MetaCanonicalUrl</para><para>Data type: General Link</para></summary>
		[IndexField("meta_canonical_url")]
		public virtual IGeneralLinkFieldWrapper MetaCanonicalUrl => this.GetField<GeneralLinkFieldWrapper>("Meta Canonical Url");

		[IndexField("meta_canonical_url")]
 		public string MetaCanonicalUrlValue => this.MetaCanonicalUrl.Value;

		/// <summary><para>Field: MetaDescription</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("meta_description")]
		public virtual ITextFieldWrapper MetaDescription => this.GetField<TextFieldWrapper>("Meta Description");

		[IndexField("meta_description")]
 		public string MetaDescriptionValue => this.MetaDescription.Value;

		/// <summary><para>Field: MetaImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper MetaImage => this.GetField<ImageFieldWrapper>("Meta Image");

 		public string MetaImageValue => this.MetaImage.Value;

		/// <summary><para>Field: MetaKeywords</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_keywords")]
		public virtual ITextFieldWrapper MetaKeywords => this.GetField<TextFieldWrapper>("Meta Keywords");

		[IndexField("meta_keywords")]
 		public string MetaKeywordsValue => this.MetaKeywords.Value;

		/// <summary><para>Field: MetaTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_title")]
		public virtual ITextFieldWrapper MetaTitle => this.GetField<TextFieldWrapper>("Meta Title");

		[IndexField("meta_title")]
 		public string MetaTitleValue => this.MetaTitle.Value;

		/// <summary><para>Field: NavigationImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper NavigationImage => this.GetField<ImageFieldWrapper>("Navigation Image");

 		public string NavigationImageValue => this.NavigationImage.Value;

		/// <summary><para>Field: NavigationTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("navigation_title")]
		public virtual ITextFieldWrapper NavigationTitle => this.GetField<TextFieldWrapper>("Navigation Title");

		[IndexField("navigation_title")]
 		public string NavigationTitleValue => this.NavigationTitle.Value;

		/// <summary><para>Field: NavigationUrl</para><para>Data type: General Link</para></summary>
		[IndexField("navigation_url")]
		public virtual IGeneralLinkFieldWrapper NavigationUrl => this.GetField<GeneralLinkFieldWrapper>("Navigation Url");

		[IndexField("navigation_url")]
 		public string NavigationUrlValue => this.NavigationUrl.Value;

		/// <summary><para>Field: PageSummary</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("page_summary")]
		public virtual ITextFieldWrapper PageSummary => this.GetField<TextFieldWrapper>("Page Summary");

		[IndexField("page_summary")]
 		public string PageSummaryValue => this.PageSummary.Value;

		/// <summary><para>Field: PageTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("page_title")]
		public virtual ITextFieldWrapper PageTitle => this.GetField<TextFieldWrapper>("Page Title");

		[IndexField("page_title")]
 		public string PageTitleValue => this.PageTitle.Value;

		/// <summary><para>Field: SponsoredBackground</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper SponsoredBackground => this.GetField<ImageFieldWrapper>("Sponsored Background");

 		public string SponsoredBackgroundValue => this.SponsoredBackground.Value;

		/// <summary><para>Field: TrackingAction</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_action")]
		public virtual ITextFieldWrapper TrackingAction => this.GetField<TextFieldWrapper>("Tracking Action");

		[IndexField("tracking_action")]
 		public string TrackingActionValue => this.TrackingAction.Value;

		/// <summary><para>Field: TrackingCategory</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_category")]
		public virtual ITextFieldWrapper TrackingCategory => this.GetField<TextFieldWrapper>("Tracking Category");

		[IndexField("tracking_category")]
 		public string TrackingCategoryValue => this.TrackingCategory.Value;

		/// <summary><para>Field: TrackingLabel</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_label")]
		public virtual ITextFieldWrapper TrackingLabel => this.GetField<TextFieldWrapper>("Tracking Label");

		[IndexField("tracking_label")]
 		public string TrackingLabelValue => this.TrackingLabel.Value;
	}
}
#endregion
#region Register Page Options (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary>
	/// <para>Template: Register Page Options</para>
	/// <para>ID: {5C1F34C2-6308-423E-BFB1-B6DE6BB13FD2}</para>
	/// <para>/sitecore/templates/User Defined/Poker Central/Auth/Rendering Parameters/Register Page Options</para>
	/// </summary>
	[TemplateMapping("{5C1F34C2-6308-423E-BFB1-B6DE6BB13FD2}", "InterfaceRenderingParameterMap")]
	public partial interface IRegisterPageOptions :
		IRenderingParameterWrapper,
		LM.Model.Templates.Ignite.IIgniteRenderingParameters,
		LM.Model.Templates.PokerCentral.IInternalAdvertOptions	{
    	/// <summary><para>Template: Register Page Options</para><para>Field: Terms Tickbox Text</para><para>Data type: Droptree</para></summary>
		ILinkFieldWrapper TermsTickboxText { get; }
	}
	
	[TemplateMapping("{5C1F34C2-6308-423E-BFB1-B6DE6BB13FD2}", "RenderingParameter")]
	public partial class RegisterPageOptions : RenderingParameterWrapper, IRegisterPageOptions
	{
		public RegisterPageOptions(Dictionary<string, string> parameters, ISpawnProvider spawnProvider)
			: base(parameters, spawnProvider)
		{ }

		/// <summary><para>Field: ShowAd</para><para>Data type: Checkbox</para></summary>
		public virtual IBooleanFieldWrapper ShowAd => (Fortis.Model.RenderingParameters.Fields.BooleanFieldWrapper)this.GetField("Show Ad", "checkbox");

		/// <summary><para>Field: ShowAdAfter</para><para>Data type: Number</para></summary>
		public virtual INumberFieldWrapper ShowAdAfter => (Fortis.Model.RenderingParameters.Fields.NumberFieldWrapper)this.GetField("Show Ad After", "number");

		/// <summary><para>Field: TermsTickboxText</para><para>Data type: Droptree</para></summary>
		public virtual ILinkFieldWrapper TermsTickboxText => (Fortis.Model.RenderingParameters.Fields.LinkFieldWrapper)this.GetField("Terms Tickbox Text", "droptree");
	
	}
}
#endregion
#region Contest List (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Contest List</para><para>ID: {2DD29D46-9E8C-423B-9382-C9B4CEB94B51}</para><para>/sitecore/templates/User Defined/Poker Central/Contests/Contest List</para></summary>
	[TemplateMapping("{2DD29D46-9E8C-423B-9382-C9B4CEB94B51}", "InterfaceMap")]
	public partial interface IContestList :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{

    	/// <summary><para>Template: Contest List</para><para>Field: Selected Contests</para><para>Data type: TreelistEx</para></summary>
		[IndexField("selected_contests")]
		IListFieldWrapper SelectedContests { get; }

    	/// <summary><para>Template: Contest List</para><para>Field: Selected Contests</para><para>Data type: TreelistEx</para></summary>
		[IndexField("selected_contests")]
		IEnumerable<Guid> SelectedContestsValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{2DD29D46-9E8C-423B-9382-C9B4CEB94B51}", typeof(Guid))]
	[TemplateMapping("{2DD29D46-9E8C-423B-9382-C9B4CEB94B51}")]
	public partial class ContestList : CustomItemWrapper, IContestList
	{
		public ContestList(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public ContestList(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: SelectedContests</para><para>Data type: TreelistEx</para></summary>
		[IndexField("selected_contests")]
		public virtual IListFieldWrapper SelectedContests => this.GetField<ListFieldWrapper>("Selected Contests");

		[IndexField("selected_contests")]
 		public IEnumerable<Guid> SelectedContestsValue => this.SelectedContests.Value;
	}
}
#endregion
#region Contest (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Contest</para><para>ID: {0484C694-D9F8-4D63-952F-06F0F1A64462}</para><para>/sitecore/templates/User Defined/Poker Central/Contests/Contest</para></summary>
	[TemplateMapping("{0484C694-D9F8-4D63-952F-06F0F1A64462}", "InterfaceMap")]
	public partial interface IContest :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{

    	/// <summary><para>Template: Contest</para><para>Field: Contest Header</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("contest_header")]
		ITextFieldWrapper ContestHeader { get; }

    	/// <summary><para>Template: Contest</para><para>Field: Contest Header</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("contest_header")]
		string ContestHeaderValue { get; }

    	/// <summary><para>Template: Contest</para><para>Field: Contest Image</para><para>Data type: Image</para></summary>
		IImageFieldWrapper ContestImage { get; }

    	/// <summary><para>Template: Contest</para><para>Field: Contest Image</para><para>Data type: Image</para></summary>
		string ContestImageValue { get; }

    	/// <summary><para>Template: Contest</para><para>Field: Contest Video</para><para>Data type: Multilist with Search</para></summary>
		[IndexField("contest_video")]
		IListFieldWrapper ContestVideo { get; }

    	/// <summary><para>Template: Contest</para><para>Field: Contest Video</para><para>Data type: Multilist with Search</para></summary>
		[IndexField("contest_video")]
		IEnumerable<Guid> ContestVideoValue { get; }

    	/// <summary><para>Template: Contest</para><para>Field: Context</para><para>Data type: Droptree</para></summary>
		[IndexField("context")]
		ILinkFieldWrapper Context { get; }

    	/// <summary><para>Template: Contest</para><para>Field: Context</para><para>Data type: Droptree</para></summary>
		[IndexField("context")]
		Guid ContextValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{0484C694-D9F8-4D63-952F-06F0F1A64462}", typeof(Guid))]
	[TemplateMapping("{0484C694-D9F8-4D63-952F-06F0F1A64462}")]
	public partial class Contest : CustomItemWrapper, IContest
	{
		public Contest(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public Contest(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: ContestHeader</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("contest_header")]
		public virtual ITextFieldWrapper ContestHeader => this.GetField<TextFieldWrapper>("Contest Header");

		[IndexField("contest_header")]
 		public string ContestHeaderValue => this.ContestHeader.Value;

		/// <summary><para>Field: ContestImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper ContestImage => this.GetField<ImageFieldWrapper>("Contest Image");

 		public string ContestImageValue => this.ContestImage.Value;

		/// <summary><para>Field: ContestVideo</para><para>Data type: Multilist with Search</para></summary>
		[IndexField("contest_video")]
		public virtual IListFieldWrapper ContestVideo => this.GetField<ListFieldWrapper>("Contest Video");

		[IndexField("contest_video")]
 		public IEnumerable<Guid> ContestVideoValue => this.ContestVideo.Value;

		/// <summary><para>Field: Context</para><para>Data type: Droptree</para></summary>
		[IndexField("context")]
		public virtual ILinkFieldWrapper Context => this.GetField<LinkFieldWrapper>("Context");

		[IndexField("context")]
 		public Guid ContextValue => this.Context.Value;
	}
}
#endregion
#region Contest Landing (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Contest Landing</para><para>ID: {02119DC5-FABB-455A-A1DD-54649C94FED8}</para><para>/sitecore/templates/User Defined/Poker Central/Contests/Page Types/Contest Landing</para></summary>
	[TemplateMapping("{02119DC5-FABB-455A-A1DD-54649C94FED8}", "InterfaceMap")]
	public partial interface IContestLanding :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.PokerCentral.IContentPage,
		LM.Model.Templates.PokerCentral.IContent,
		LM.Model.Templates.PokerCentral.IAnalyticsTracking,
		LM.Model.Templates.PokerCentral.INavigation,
		LM.Model.Templates.PokerCentral.IMetaData
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{02119DC5-FABB-455A-A1DD-54649C94FED8}", typeof(Guid))]
	[TemplateMapping("{02119DC5-FABB-455A-A1DD-54649C94FED8}")]
	public partial class ContestLanding : CustomItemWrapper, IContestLanding
	{
		public ContestLanding(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public ContestLanding(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: ContentBody</para><para>Data type: Rich Text</para></summary>
		[IndexField("content_body")]
		public virtual IRichTextFieldWrapper ContentBody => this.GetField<RichTextFieldWrapper>("Content Body");

		[IndexField("content_body")]
 		public string ContentBodyValue => this.ContentBody.Value;

		/// <summary><para>Field: HideFromMenu</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_menu")]
		public virtual IBooleanFieldWrapper HideFromMenu => this.GetField<BooleanFieldWrapper>("Hide From Menu");

		[IndexField("hide_from_menu")]
 		public bool HideFromMenuValue => this.HideFromMenu.Value;

		/// <summary><para>Field: HideFromSitemap</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_sitemap")]
		public virtual IBooleanFieldWrapper HideFromSitemap => this.GetField<BooleanFieldWrapper>("Hide from Sitemap");

		[IndexField("hide_from_sitemap")]
 		public bool HideFromSitemapValue => this.HideFromSitemap.Value;

		/// <summary><para>Field: MetaCanonicalUrl</para><para>Data type: General Link</para></summary>
		[IndexField("meta_canonical_url")]
		public virtual IGeneralLinkFieldWrapper MetaCanonicalUrl => this.GetField<GeneralLinkFieldWrapper>("Meta Canonical Url");

		[IndexField("meta_canonical_url")]
 		public string MetaCanonicalUrlValue => this.MetaCanonicalUrl.Value;

		/// <summary><para>Field: MetaDescription</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("meta_description")]
		public virtual ITextFieldWrapper MetaDescription => this.GetField<TextFieldWrapper>("Meta Description");

		[IndexField("meta_description")]
 		public string MetaDescriptionValue => this.MetaDescription.Value;

		/// <summary><para>Field: MetaImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper MetaImage => this.GetField<ImageFieldWrapper>("Meta Image");

 		public string MetaImageValue => this.MetaImage.Value;

		/// <summary><para>Field: MetaKeywords</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_keywords")]
		public virtual ITextFieldWrapper MetaKeywords => this.GetField<TextFieldWrapper>("Meta Keywords");

		[IndexField("meta_keywords")]
 		public string MetaKeywordsValue => this.MetaKeywords.Value;

		/// <summary><para>Field: MetaTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_title")]
		public virtual ITextFieldWrapper MetaTitle => this.GetField<TextFieldWrapper>("Meta Title");

		[IndexField("meta_title")]
 		public string MetaTitleValue => this.MetaTitle.Value;

		/// <summary><para>Field: NavigationImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper NavigationImage => this.GetField<ImageFieldWrapper>("Navigation Image");

 		public string NavigationImageValue => this.NavigationImage.Value;

		/// <summary><para>Field: NavigationTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("navigation_title")]
		public virtual ITextFieldWrapper NavigationTitle => this.GetField<TextFieldWrapper>("Navigation Title");

		[IndexField("navigation_title")]
 		public string NavigationTitleValue => this.NavigationTitle.Value;

		/// <summary><para>Field: NavigationUrl</para><para>Data type: General Link</para></summary>
		[IndexField("navigation_url")]
		public virtual IGeneralLinkFieldWrapper NavigationUrl => this.GetField<GeneralLinkFieldWrapper>("Navigation Url");

		[IndexField("navigation_url")]
 		public string NavigationUrlValue => this.NavigationUrl.Value;

		/// <summary><para>Field: PageSummary</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("page_summary")]
		public virtual ITextFieldWrapper PageSummary => this.GetField<TextFieldWrapper>("Page Summary");

		[IndexField("page_summary")]
 		public string PageSummaryValue => this.PageSummary.Value;

		/// <summary><para>Field: PageTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("page_title")]
		public virtual ITextFieldWrapper PageTitle => this.GetField<TextFieldWrapper>("Page Title");

		[IndexField("page_title")]
 		public string PageTitleValue => this.PageTitle.Value;

		/// <summary><para>Field: TrackingAction</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_action")]
		public virtual ITextFieldWrapper TrackingAction => this.GetField<TextFieldWrapper>("Tracking Action");

		[IndexField("tracking_action")]
 		public string TrackingActionValue => this.TrackingAction.Value;

		/// <summary><para>Field: TrackingCategory</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_category")]
		public virtual ITextFieldWrapper TrackingCategory => this.GetField<TextFieldWrapper>("Tracking Category");

		[IndexField("tracking_category")]
 		public string TrackingCategoryValue => this.TrackingCategory.Value;

		/// <summary><para>Field: TrackingLabel</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_label")]
		public virtual ITextFieldWrapper TrackingLabel => this.GetField<TextFieldWrapper>("Tracking Label");

		[IndexField("tracking_label")]
 		public string TrackingLabelValue => this.TrackingLabel.Value;
	}
}
#endregion
#region Contest Page (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Contest Page</para><para>ID: {0B0CC955-6422-46BF-8030-89B52148D10C}</para><para>/sitecore/templates/User Defined/Poker Central/Contests/Page Types/Contest Page</para></summary>
	[TemplateMapping("{0B0CC955-6422-46BF-8030-89B52148D10C}", "InterfaceMap")]
	public partial interface IContestPage :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.PokerCentral.IContest,
		LM.Model.Templates.PokerCentral.IContentPage,
		LM.Model.Templates.PokerCentral.IContent,
		LM.Model.Templates.PokerCentral.ISponsoredContentPage,
		LM.Model.Templates.PokerCentral.ISponsors,
		LM.Model.Templates.PokerCentral.IAnalyticsTracking,
		LM.Model.Templates.PokerCentral.INavigation,
		LM.Model.Templates.PokerCentral.IMetaData
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{0B0CC955-6422-46BF-8030-89B52148D10C}", typeof(Guid))]
	[TemplateMapping("{0B0CC955-6422-46BF-8030-89B52148D10C}")]
	public partial class ContestPage : CustomItemWrapper, IContestPage
	{
		public ContestPage(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public ContestPage(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: ContentBody</para><para>Data type: Rich Text</para></summary>
		[IndexField("content_body")]
		public virtual IRichTextFieldWrapper ContentBody => this.GetField<RichTextFieldWrapper>("Content Body");

		[IndexField("content_body")]
 		public string ContentBodyValue => this.ContentBody.Value;

		/// <summary><para>Field: ContestHeader</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("contest_header")]
		public virtual ITextFieldWrapper ContestHeader => this.GetField<TextFieldWrapper>("Contest Header");

		[IndexField("contest_header")]
 		public string ContestHeaderValue => this.ContestHeader.Value;

		/// <summary><para>Field: ContestImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper ContestImage => this.GetField<ImageFieldWrapper>("Contest Image");

 		public string ContestImageValue => this.ContestImage.Value;

		/// <summary><para>Field: ContestVideo</para><para>Data type: Multilist with Search</para></summary>
		[IndexField("contest_video")]
		public virtual IListFieldWrapper ContestVideo => this.GetField<ListFieldWrapper>("Contest Video");

		[IndexField("contest_video")]
 		public IEnumerable<Guid> ContestVideoValue => this.ContestVideo.Value;

		/// <summary><para>Field: Context</para><para>Data type: Droptree</para></summary>
		[IndexField("context")]
		public virtual ILinkFieldWrapper Context => this.GetField<LinkFieldWrapper>("Context");

		[IndexField("context")]
 		public Guid ContextValue => this.Context.Value;

		/// <summary><para>Field: HideFromMenu</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_menu")]
		public virtual IBooleanFieldWrapper HideFromMenu => this.GetField<BooleanFieldWrapper>("Hide From Menu");

		[IndexField("hide_from_menu")]
 		public bool HideFromMenuValue => this.HideFromMenu.Value;

		/// <summary><para>Field: HideFromSitemap</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_sitemap")]
		public virtual IBooleanFieldWrapper HideFromSitemap => this.GetField<BooleanFieldWrapper>("Hide from Sitemap");

		[IndexField("hide_from_sitemap")]
 		public bool HideFromSitemapValue => this.HideFromSitemap.Value;

		/// <summary><para>Field: MetaCanonicalUrl</para><para>Data type: General Link</para></summary>
		[IndexField("meta_canonical_url")]
		public virtual IGeneralLinkFieldWrapper MetaCanonicalUrl => this.GetField<GeneralLinkFieldWrapper>("Meta Canonical Url");

		[IndexField("meta_canonical_url")]
 		public string MetaCanonicalUrlValue => this.MetaCanonicalUrl.Value;

		/// <summary><para>Field: MetaDescription</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("meta_description")]
		public virtual ITextFieldWrapper MetaDescription => this.GetField<TextFieldWrapper>("Meta Description");

		[IndexField("meta_description")]
 		public string MetaDescriptionValue => this.MetaDescription.Value;

		/// <summary><para>Field: MetaImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper MetaImage => this.GetField<ImageFieldWrapper>("Meta Image");

 		public string MetaImageValue => this.MetaImage.Value;

		/// <summary><para>Field: MetaKeywords</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_keywords")]
		public virtual ITextFieldWrapper MetaKeywords => this.GetField<TextFieldWrapper>("Meta Keywords");

		[IndexField("meta_keywords")]
 		public string MetaKeywordsValue => this.MetaKeywords.Value;

		/// <summary><para>Field: MetaTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_title")]
		public virtual ITextFieldWrapper MetaTitle => this.GetField<TextFieldWrapper>("Meta Title");

		[IndexField("meta_title")]
 		public string MetaTitleValue => this.MetaTitle.Value;

		/// <summary><para>Field: NavigationImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper NavigationImage => this.GetField<ImageFieldWrapper>("Navigation Image");

 		public string NavigationImageValue => this.NavigationImage.Value;

		/// <summary><para>Field: NavigationTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("navigation_title")]
		public virtual ITextFieldWrapper NavigationTitle => this.GetField<TextFieldWrapper>("Navigation Title");

		[IndexField("navigation_title")]
 		public string NavigationTitleValue => this.NavigationTitle.Value;

		/// <summary><para>Field: NavigationUrl</para><para>Data type: General Link</para></summary>
		[IndexField("navigation_url")]
		public virtual IGeneralLinkFieldWrapper NavigationUrl => this.GetField<GeneralLinkFieldWrapper>("Navigation Url");

		[IndexField("navigation_url")]
 		public string NavigationUrlValue => this.NavigationUrl.Value;

		/// <summary><para>Field: PageSummary</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("page_summary")]
		public virtual ITextFieldWrapper PageSummary => this.GetField<TextFieldWrapper>("Page Summary");

		[IndexField("page_summary")]
 		public string PageSummaryValue => this.PageSummary.Value;

		/// <summary><para>Field: PageTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("page_title")]
		public virtual ITextFieldWrapper PageTitle => this.GetField<TextFieldWrapper>("Page Title");

		[IndexField("page_title")]
 		public string PageTitleValue => this.PageTitle.Value;

		/// <summary><para>Field: SponsoredBackground</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper SponsoredBackground => this.GetField<ImageFieldWrapper>("Sponsored Background");

 		public string SponsoredBackgroundValue => this.SponsoredBackground.Value;

		/// <summary><para>Field: TrackingAction</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_action")]
		public virtual ITextFieldWrapper TrackingAction => this.GetField<TextFieldWrapper>("Tracking Action");

		[IndexField("tracking_action")]
 		public string TrackingActionValue => this.TrackingAction.Value;

		/// <summary><para>Field: TrackingCategory</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_category")]
		public virtual ITextFieldWrapper TrackingCategory => this.GetField<TextFieldWrapper>("Tracking Category");

		[IndexField("tracking_category")]
 		public string TrackingCategoryValue => this.TrackingCategory.Value;

		/// <summary><para>Field: TrackingLabel</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_label")]
		public virtual ITextFieldWrapper TrackingLabel => this.GetField<TextFieldWrapper>("Tracking Label");

		[IndexField("tracking_label")]
 		public string TrackingLabelValue => this.TrackingLabel.Value;
	}
}
#endregion
#region Contest List Options (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary>
	/// <para>Template: Contest List Options</para>
	/// <para>ID: {8BFD49C3-5D33-44E7-9413-F066F8C3CB17}</para>
	/// <para>/sitecore/templates/User Defined/Poker Central/Contests/Rendering Parameters/Contest List Options</para>
	/// </summary>
	[TemplateMapping("{8BFD49C3-5D33-44E7-9413-F066F8C3CB17}", "InterfaceRenderingParameterMap")]
	public partial interface IContestListOptions :
		IRenderingParameterWrapper,
		LM.Model.Templates.Ignite.IIgniteRenderingParameters,
		LM.Model.Templates.PokerCentral.IInternalAdvertOptions,
		LM.Model.Templates.PokerCentral.IPagedListOptions	{
	}
	
	[TemplateMapping("{8BFD49C3-5D33-44E7-9413-F066F8C3CB17}", "RenderingParameter")]
	public partial class ContestListOptions : RenderingParameterWrapper, IContestListOptions
	{
		public ContestListOptions(Dictionary<string, string> parameters, ISpawnProvider spawnProvider)
			: base(parameters, spawnProvider)
		{ }

		/// <summary><para>Field: ModuleLinkText</para><para>Data type: Droptree</para></summary>
		public virtual ILinkFieldWrapper ModuleLinkText => (Fortis.Model.RenderingParameters.Fields.LinkFieldWrapper)this.GetField("Module Link Text", "droptree");

		/// <summary><para>Field: ModuleTitle</para><para>Data type: Droptree</para></summary>
		public virtual ILinkFieldWrapper ModuleTitle => (Fortis.Model.RenderingParameters.Fields.LinkFieldWrapper)this.GetField("Module Title", "droptree");

		/// <summary><para>Field: NextButtonText</para><para>Data type: Droptree</para></summary>
		public virtual ILinkFieldWrapper NextButtonText => (Fortis.Model.RenderingParameters.Fields.LinkFieldWrapper)this.GetField("Next Button Text", "droptree");

		/// <summary><para>Field: NumberOfItems</para><para>Data type: Single-Line Text</para></summary>
		public virtual ITextFieldWrapper NumberOfItems => (Fortis.Model.RenderingParameters.Fields.TextFieldWrapper)this.GetField("Number of Items", "single-line text");

		/// <summary><para>Field: PreviousButtonText</para><para>Data type: Droptree</para></summary>
		public virtual ILinkFieldWrapper PreviousButtonText => (Fortis.Model.RenderingParameters.Fields.LinkFieldWrapper)this.GetField("Previous Button Text", "droptree");

		/// <summary><para>Field: ShowAd</para><para>Data type: Checkbox</para></summary>
		public virtual IBooleanFieldWrapper ShowAd => (Fortis.Model.RenderingParameters.Fields.BooleanFieldWrapper)this.GetField("Show Ad", "checkbox");

		/// <summary><para>Field: ShowAdAfter</para><para>Data type: Number</para></summary>
		public virtual INumberFieldWrapper ShowAdAfter => (Fortis.Model.RenderingParameters.Fields.NumberFieldWrapper)this.GetField("Show Ad After", "number");

		/// <summary><para>Field: Styles</para><para>Data type: Droplist</para></summary>
		public virtual ITextFieldWrapper Styles => (Fortis.Model.RenderingParameters.Fields.TextFieldWrapper)this.GetField("Styles", "droplist");
	
	}
}
#endregion
#region News Article (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: News Article</para><para>ID: {2185FBE0-9B0C-4627-AABE-C77D79776D11}</para><para>/sitecore/templates/User Defined/Poker Central/News/News Article</para></summary>
	[TemplateMapping("{2185FBE0-9B0C-4627-AABE-C77D79776D11}", "InterfaceMap")]
	public partial interface INewsArticle :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.PokerCentral.IContentPage,
		LM.Model.Templates.PokerCentral.IContent,
		LM.Model.Templates.PokerCentral.IHero,
		LM.Model.Templates.PokerCentral.IAnalyticsTracking,
		LM.Model.Templates.PokerCentral.INavigation,
		LM.Model.Templates.PokerCentral.IMetaData
	{

    	/// <summary><para>Template: News Article</para><para>Field: Authored Date</para><para>Data type: Datetime</para></summary>
		[IndexField("authored_date")]
		IDateTimeFieldWrapper AuthoredDate { get; }

    	/// <summary><para>Template: News Article</para><para>Field: Authored Date</para><para>Data type: Datetime</para></summary>
		[IndexField("authored_date")]
		DateTime AuthoredDateValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{2185FBE0-9B0C-4627-AABE-C77D79776D11}", typeof(Guid))]
	[TemplateMapping("{2185FBE0-9B0C-4627-AABE-C77D79776D11}")]
	public partial class NewsArticle : CustomItemWrapper, INewsArticle
	{
		public NewsArticle(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public NewsArticle(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: AuthoredDate</para><para>Data type: Datetime</para></summary>
		[IndexField("authored_date")]
		public virtual IDateTimeFieldWrapper AuthoredDate => this.GetField<DateTimeFieldWrapper>("Authored Date");

		[IndexField("authored_date")]
 		public DateTime AuthoredDateValue => this.AuthoredDate.Value;

		/// <summary><para>Field: ContentBody</para><para>Data type: Rich Text</para></summary>
		[IndexField("content_body")]
		public virtual IRichTextFieldWrapper ContentBody => this.GetField<RichTextFieldWrapper>("Content Body");

		[IndexField("content_body")]
 		public string ContentBodyValue => this.ContentBody.Value;

		/// <summary><para>Field: HeroImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper HeroImage => this.GetField<ImageFieldWrapper>("Hero Image");

 		public string HeroImageValue => this.HeroImage.Value;

		/// <summary><para>Field: HeroVideo</para><para>Data type: Multilist with Search</para></summary>
		[IndexField("hero_video")]
		public virtual IListFieldWrapper HeroVideo => this.GetField<ListFieldWrapper>("Hero Video");

		[IndexField("hero_video")]
 		public IEnumerable<Guid> HeroVideoValue => this.HeroVideo.Value;

		/// <summary><para>Field: HideFromMenu</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_menu")]
		public virtual IBooleanFieldWrapper HideFromMenu => this.GetField<BooleanFieldWrapper>("Hide From Menu");

		[IndexField("hide_from_menu")]
 		public bool HideFromMenuValue => this.HideFromMenu.Value;

		/// <summary><para>Field: HideFromSitemap</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_sitemap")]
		public virtual IBooleanFieldWrapper HideFromSitemap => this.GetField<BooleanFieldWrapper>("Hide from Sitemap");

		[IndexField("hide_from_sitemap")]
 		public bool HideFromSitemapValue => this.HideFromSitemap.Value;

		/// <summary><para>Field: MetaCanonicalUrl</para><para>Data type: General Link</para></summary>
		[IndexField("meta_canonical_url")]
		public virtual IGeneralLinkFieldWrapper MetaCanonicalUrl => this.GetField<GeneralLinkFieldWrapper>("Meta Canonical Url");

		[IndexField("meta_canonical_url")]
 		public string MetaCanonicalUrlValue => this.MetaCanonicalUrl.Value;

		/// <summary><para>Field: MetaDescription</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("meta_description")]
		public virtual ITextFieldWrapper MetaDescription => this.GetField<TextFieldWrapper>("Meta Description");

		[IndexField("meta_description")]
 		public string MetaDescriptionValue => this.MetaDescription.Value;

		/// <summary><para>Field: MetaImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper MetaImage => this.GetField<ImageFieldWrapper>("Meta Image");

 		public string MetaImageValue => this.MetaImage.Value;

		/// <summary><para>Field: MetaKeywords</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_keywords")]
		public virtual ITextFieldWrapper MetaKeywords => this.GetField<TextFieldWrapper>("Meta Keywords");

		[IndexField("meta_keywords")]
 		public string MetaKeywordsValue => this.MetaKeywords.Value;

		/// <summary><para>Field: MetaTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_title")]
		public virtual ITextFieldWrapper MetaTitle => this.GetField<TextFieldWrapper>("Meta Title");

		[IndexField("meta_title")]
 		public string MetaTitleValue => this.MetaTitle.Value;

		/// <summary><para>Field: NavigationImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper NavigationImage => this.GetField<ImageFieldWrapper>("Navigation Image");

 		public string NavigationImageValue => this.NavigationImage.Value;

		/// <summary><para>Field: NavigationTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("navigation_title")]
		public virtual ITextFieldWrapper NavigationTitle => this.GetField<TextFieldWrapper>("Navigation Title");

		[IndexField("navigation_title")]
 		public string NavigationTitleValue => this.NavigationTitle.Value;

		/// <summary><para>Field: NavigationUrl</para><para>Data type: General Link</para></summary>
		[IndexField("navigation_url")]
		public virtual IGeneralLinkFieldWrapper NavigationUrl => this.GetField<GeneralLinkFieldWrapper>("Navigation Url");

		[IndexField("navigation_url")]
 		public string NavigationUrlValue => this.NavigationUrl.Value;

		/// <summary><para>Field: PageSummary</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("page_summary")]
		public virtual ITextFieldWrapper PageSummary => this.GetField<TextFieldWrapper>("Page Summary");

		[IndexField("page_summary")]
 		public string PageSummaryValue => this.PageSummary.Value;

		/// <summary><para>Field: PageTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("page_title")]
		public virtual ITextFieldWrapper PageTitle => this.GetField<TextFieldWrapper>("Page Title");

		[IndexField("page_title")]
 		public string PageTitleValue => this.PageTitle.Value;

		/// <summary><para>Field: TrackingAction</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_action")]
		public virtual ITextFieldWrapper TrackingAction => this.GetField<TextFieldWrapper>("Tracking Action");

		[IndexField("tracking_action")]
 		public string TrackingActionValue => this.TrackingAction.Value;

		/// <summary><para>Field: TrackingCategory</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_category")]
		public virtual ITextFieldWrapper TrackingCategory => this.GetField<TextFieldWrapper>("Tracking Category");

		[IndexField("tracking_category")]
 		public string TrackingCategoryValue => this.TrackingCategory.Value;

		/// <summary><para>Field: TrackingLabel</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_label")]
		public virtual ITextFieldWrapper TrackingLabel => this.GetField<TextFieldWrapper>("Tracking Label");

		[IndexField("tracking_label")]
 		public string TrackingLabelValue => this.TrackingLabel.Value;
	}
}
#endregion
#region News Landing (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: News Landing</para><para>ID: {AA1140C0-A37B-413B-B53D-3CB0A2B382A2}</para><para>/sitecore/templates/User Defined/Poker Central/News/News Landing</para></summary>
	[TemplateMapping("{AA1140C0-A37B-413B-B53D-3CB0A2B382A2}", "InterfaceMap")]
	public partial interface INewsLanding :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.PokerCentral.IContentPage,
		LM.Model.Templates.PokerCentral.IContent,
		LM.Model.Templates.PokerCentral.IAnalyticsTracking,
		LM.Model.Templates.PokerCentral.INavigation,
		LM.Model.Templates.PokerCentral.IMetaData
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{AA1140C0-A37B-413B-B53D-3CB0A2B382A2}", typeof(Guid))]
	[TemplateMapping("{AA1140C0-A37B-413B-B53D-3CB0A2B382A2}")]
	public partial class NewsLanding : CustomItemWrapper, INewsLanding
	{
		public NewsLanding(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public NewsLanding(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: ContentBody</para><para>Data type: Rich Text</para></summary>
		[IndexField("content_body")]
		public virtual IRichTextFieldWrapper ContentBody => this.GetField<RichTextFieldWrapper>("Content Body");

		[IndexField("content_body")]
 		public string ContentBodyValue => this.ContentBody.Value;

		/// <summary><para>Field: HideFromMenu</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_menu")]
		public virtual IBooleanFieldWrapper HideFromMenu => this.GetField<BooleanFieldWrapper>("Hide From Menu");

		[IndexField("hide_from_menu")]
 		public bool HideFromMenuValue => this.HideFromMenu.Value;

		/// <summary><para>Field: HideFromSitemap</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_sitemap")]
		public virtual IBooleanFieldWrapper HideFromSitemap => this.GetField<BooleanFieldWrapper>("Hide from Sitemap");

		[IndexField("hide_from_sitemap")]
 		public bool HideFromSitemapValue => this.HideFromSitemap.Value;

		/// <summary><para>Field: MetaCanonicalUrl</para><para>Data type: General Link</para></summary>
		[IndexField("meta_canonical_url")]
		public virtual IGeneralLinkFieldWrapper MetaCanonicalUrl => this.GetField<GeneralLinkFieldWrapper>("Meta Canonical Url");

		[IndexField("meta_canonical_url")]
 		public string MetaCanonicalUrlValue => this.MetaCanonicalUrl.Value;

		/// <summary><para>Field: MetaDescription</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("meta_description")]
		public virtual ITextFieldWrapper MetaDescription => this.GetField<TextFieldWrapper>("Meta Description");

		[IndexField("meta_description")]
 		public string MetaDescriptionValue => this.MetaDescription.Value;

		/// <summary><para>Field: MetaImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper MetaImage => this.GetField<ImageFieldWrapper>("Meta Image");

 		public string MetaImageValue => this.MetaImage.Value;

		/// <summary><para>Field: MetaKeywords</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_keywords")]
		public virtual ITextFieldWrapper MetaKeywords => this.GetField<TextFieldWrapper>("Meta Keywords");

		[IndexField("meta_keywords")]
 		public string MetaKeywordsValue => this.MetaKeywords.Value;

		/// <summary><para>Field: MetaTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_title")]
		public virtual ITextFieldWrapper MetaTitle => this.GetField<TextFieldWrapper>("Meta Title");

		[IndexField("meta_title")]
 		public string MetaTitleValue => this.MetaTitle.Value;

		/// <summary><para>Field: NavigationImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper NavigationImage => this.GetField<ImageFieldWrapper>("Navigation Image");

 		public string NavigationImageValue => this.NavigationImage.Value;

		/// <summary><para>Field: NavigationTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("navigation_title")]
		public virtual ITextFieldWrapper NavigationTitle => this.GetField<TextFieldWrapper>("Navigation Title");

		[IndexField("navigation_title")]
 		public string NavigationTitleValue => this.NavigationTitle.Value;

		/// <summary><para>Field: NavigationUrl</para><para>Data type: General Link</para></summary>
		[IndexField("navigation_url")]
		public virtual IGeneralLinkFieldWrapper NavigationUrl => this.GetField<GeneralLinkFieldWrapper>("Navigation Url");

		[IndexField("navigation_url")]
 		public string NavigationUrlValue => this.NavigationUrl.Value;

		/// <summary><para>Field: PageSummary</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("page_summary")]
		public virtual ITextFieldWrapper PageSummary => this.GetField<TextFieldWrapper>("Page Summary");

		[IndexField("page_summary")]
 		public string PageSummaryValue => this.PageSummary.Value;

		/// <summary><para>Field: PageTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("page_title")]
		public virtual ITextFieldWrapper PageTitle => this.GetField<TextFieldWrapper>("Page Title");

		[IndexField("page_title")]
 		public string PageTitleValue => this.PageTitle.Value;

		/// <summary><para>Field: TrackingAction</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_action")]
		public virtual ITextFieldWrapper TrackingAction => this.GetField<TextFieldWrapper>("Tracking Action");

		[IndexField("tracking_action")]
 		public string TrackingActionValue => this.TrackingAction.Value;

		/// <summary><para>Field: TrackingCategory</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_category")]
		public virtual ITextFieldWrapper TrackingCategory => this.GetField<TextFieldWrapper>("Tracking Category");

		[IndexField("tracking_category")]
 		public string TrackingCategoryValue => this.TrackingCategory.Value;

		/// <summary><para>Field: TrackingLabel</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_label")]
		public virtual ITextFieldWrapper TrackingLabel => this.GetField<TextFieldWrapper>("Tracking Label");

		[IndexField("tracking_label")]
 		public string TrackingLabelValue => this.TrackingLabel.Value;
	}
}
#endregion
#region News List Options (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary>
	/// <para>Template: News List Options</para>
	/// <para>ID: {4BF5282D-075E-40C9-AB15-26D03D6B2567}</para>
	/// <para>/sitecore/templates/User Defined/Poker Central/News/Rendering Parameters/News List Options</para>
	/// </summary>
	[TemplateMapping("{4BF5282D-075E-40C9-AB15-26D03D6B2567}", "InterfaceRenderingParameterMap")]
	public partial interface INewsListOptions :
		IRenderingParameterWrapper,
		LM.Model.Templates.Ignite.IIgniteRenderingParameters,
		LM.Model.Templates.PokerCentral.IInternalAdvertOptions,
		LM.Model.Templates.PokerCentral.IPagedListOptions	{
	}
	
	[TemplateMapping("{4BF5282D-075E-40C9-AB15-26D03D6B2567}", "RenderingParameter")]
	public partial class NewsListOptions : RenderingParameterWrapper, INewsListOptions
	{
		public NewsListOptions(Dictionary<string, string> parameters, ISpawnProvider spawnProvider)
			: base(parameters, spawnProvider)
		{ }

		/// <summary><para>Field: ModuleLinkText</para><para>Data type: Droptree</para></summary>
		public virtual ILinkFieldWrapper ModuleLinkText => (Fortis.Model.RenderingParameters.Fields.LinkFieldWrapper)this.GetField("Module Link Text", "droptree");

		/// <summary><para>Field: ModuleTitle</para><para>Data type: Droptree</para></summary>
		public virtual ILinkFieldWrapper ModuleTitle => (Fortis.Model.RenderingParameters.Fields.LinkFieldWrapper)this.GetField("Module Title", "droptree");

		/// <summary><para>Field: NextButtonText</para><para>Data type: Droptree</para></summary>
		public virtual ILinkFieldWrapper NextButtonText => (Fortis.Model.RenderingParameters.Fields.LinkFieldWrapper)this.GetField("Next Button Text", "droptree");

		/// <summary><para>Field: NumberOfItems</para><para>Data type: Single-Line Text</para></summary>
		public virtual ITextFieldWrapper NumberOfItems => (Fortis.Model.RenderingParameters.Fields.TextFieldWrapper)this.GetField("Number of Items", "single-line text");

		/// <summary><para>Field: PreviousButtonText</para><para>Data type: Droptree</para></summary>
		public virtual ILinkFieldWrapper PreviousButtonText => (Fortis.Model.RenderingParameters.Fields.LinkFieldWrapper)this.GetField("Previous Button Text", "droptree");

		/// <summary><para>Field: ShowAd</para><para>Data type: Checkbox</para></summary>
		public virtual IBooleanFieldWrapper ShowAd => (Fortis.Model.RenderingParameters.Fields.BooleanFieldWrapper)this.GetField("Show Ad", "checkbox");

		/// <summary><para>Field: ShowAdAfter</para><para>Data type: Number</para></summary>
		public virtual INumberFieldWrapper ShowAdAfter => (Fortis.Model.RenderingParameters.Fields.NumberFieldWrapper)this.GetField("Show Ad After", "number");

		/// <summary><para>Field: Styles</para><para>Data type: Droplist</para></summary>
		public virtual ITextFieldWrapper Styles => (Fortis.Model.RenderingParameters.Fields.TextFieldWrapper)this.GetField("Styles", "droplist");
	
	}
}
#endregion
#region Child Content Page (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Child Content Page</para><para>ID: {04B42251-36AB-44F0-BC43-F606988BDD11}</para><para>/sitecore/templates/User Defined/Poker Central/Page Types/Child Content Page</para></summary>
	[TemplateMapping("{04B42251-36AB-44F0-BC43-F606988BDD11}", "InterfaceMap")]
	public partial interface IChildContentPage :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.PokerCentral.IContentPage,
		LM.Model.Templates.PokerCentral.IContent,
		LM.Model.Templates.PokerCentral.ISponsors,
		LM.Model.Templates.PokerCentral.IAnalyticsTracking,
		LM.Model.Templates.PokerCentral.INavigation,
		LM.Model.Templates.PokerCentral.IMetaData
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{04B42251-36AB-44F0-BC43-F606988BDD11}", typeof(Guid))]
	[TemplateMapping("{04B42251-36AB-44F0-BC43-F606988BDD11}")]
	public partial class ChildContentPage : CustomItemWrapper, IChildContentPage
	{
		public ChildContentPage(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public ChildContentPage(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: ContentBody</para><para>Data type: Rich Text</para></summary>
		[IndexField("content_body")]
		public virtual IRichTextFieldWrapper ContentBody => this.GetField<RichTextFieldWrapper>("Content Body");

		[IndexField("content_body")]
 		public string ContentBodyValue => this.ContentBody.Value;

		/// <summary><para>Field: HideFromMenu</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_menu")]
		public virtual IBooleanFieldWrapper HideFromMenu => this.GetField<BooleanFieldWrapper>("Hide From Menu");

		[IndexField("hide_from_menu")]
 		public bool HideFromMenuValue => this.HideFromMenu.Value;

		/// <summary><para>Field: HideFromSitemap</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_sitemap")]
		public virtual IBooleanFieldWrapper HideFromSitemap => this.GetField<BooleanFieldWrapper>("Hide from Sitemap");

		[IndexField("hide_from_sitemap")]
 		public bool HideFromSitemapValue => this.HideFromSitemap.Value;

		/// <summary><para>Field: MetaCanonicalUrl</para><para>Data type: General Link</para></summary>
		[IndexField("meta_canonical_url")]
		public virtual IGeneralLinkFieldWrapper MetaCanonicalUrl => this.GetField<GeneralLinkFieldWrapper>("Meta Canonical Url");

		[IndexField("meta_canonical_url")]
 		public string MetaCanonicalUrlValue => this.MetaCanonicalUrl.Value;

		/// <summary><para>Field: MetaDescription</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("meta_description")]
		public virtual ITextFieldWrapper MetaDescription => this.GetField<TextFieldWrapper>("Meta Description");

		[IndexField("meta_description")]
 		public string MetaDescriptionValue => this.MetaDescription.Value;

		/// <summary><para>Field: MetaImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper MetaImage => this.GetField<ImageFieldWrapper>("Meta Image");

 		public string MetaImageValue => this.MetaImage.Value;

		/// <summary><para>Field: MetaKeywords</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_keywords")]
		public virtual ITextFieldWrapper MetaKeywords => this.GetField<TextFieldWrapper>("Meta Keywords");

		[IndexField("meta_keywords")]
 		public string MetaKeywordsValue => this.MetaKeywords.Value;

		/// <summary><para>Field: MetaTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_title")]
		public virtual ITextFieldWrapper MetaTitle => this.GetField<TextFieldWrapper>("Meta Title");

		[IndexField("meta_title")]
 		public string MetaTitleValue => this.MetaTitle.Value;

		/// <summary><para>Field: NavigationImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper NavigationImage => this.GetField<ImageFieldWrapper>("Navigation Image");

 		public string NavigationImageValue => this.NavigationImage.Value;

		/// <summary><para>Field: NavigationTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("navigation_title")]
		public virtual ITextFieldWrapper NavigationTitle => this.GetField<TextFieldWrapper>("Navigation Title");

		[IndexField("navigation_title")]
 		public string NavigationTitleValue => this.NavigationTitle.Value;

		/// <summary><para>Field: NavigationUrl</para><para>Data type: General Link</para></summary>
		[IndexField("navigation_url")]
		public virtual IGeneralLinkFieldWrapper NavigationUrl => this.GetField<GeneralLinkFieldWrapper>("Navigation Url");

		[IndexField("navigation_url")]
 		public string NavigationUrlValue => this.NavigationUrl.Value;

		/// <summary><para>Field: PageSummary</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("page_summary")]
		public virtual ITextFieldWrapper PageSummary => this.GetField<TextFieldWrapper>("Page Summary");

		[IndexField("page_summary")]
 		public string PageSummaryValue => this.PageSummary.Value;

		/// <summary><para>Field: PageTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("page_title")]
		public virtual ITextFieldWrapper PageTitle => this.GetField<TextFieldWrapper>("Page Title");

		[IndexField("page_title")]
 		public string PageTitleValue => this.PageTitle.Value;

		/// <summary><para>Field: SponsoredBackground</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper SponsoredBackground => this.GetField<ImageFieldWrapper>("Sponsored Background");

 		public string SponsoredBackgroundValue => this.SponsoredBackground.Value;

		/// <summary><para>Field: TrackingAction</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_action")]
		public virtual ITextFieldWrapper TrackingAction => this.GetField<TextFieldWrapper>("Tracking Action");

		[IndexField("tracking_action")]
 		public string TrackingActionValue => this.TrackingAction.Value;

		/// <summary><para>Field: TrackingCategory</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_category")]
		public virtual ITextFieldWrapper TrackingCategory => this.GetField<TextFieldWrapper>("Tracking Category");

		[IndexField("tracking_category")]
 		public string TrackingCategoryValue => this.TrackingCategory.Value;

		/// <summary><para>Field: TrackingLabel</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_label")]
		public virtual ITextFieldWrapper TrackingLabel => this.GetField<TextFieldWrapper>("Tracking Label");

		[IndexField("tracking_label")]
 		public string TrackingLabelValue => this.TrackingLabel.Value;
	}
}
#endregion
#region Content Page (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Content Page</para><para>ID: {752F1533-1F90-46AB-A98E-4704AB2F2EEE}</para><para>/sitecore/templates/User Defined/Poker Central/Page Types/Content Page</para></summary>
	[TemplateMapping("{752F1533-1F90-46AB-A98E-4704AB2F2EEE}", "InterfaceMap")]
	public partial interface IContentPage :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.PokerCentral.IContent,
		LM.Model.Templates.PokerCentral.IAnalyticsTracking,
		LM.Model.Templates.PokerCentral.INavigation,
		LM.Model.Templates.PokerCentral.IMetaData
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{752F1533-1F90-46AB-A98E-4704AB2F2EEE}", typeof(Guid))]
	[TemplateMapping("{752F1533-1F90-46AB-A98E-4704AB2F2EEE}")]
	public partial class ContentPage : CustomItemWrapper, IContentPage
	{
		public ContentPage(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public ContentPage(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: ContentBody</para><para>Data type: Rich Text</para></summary>
		[IndexField("content_body")]
		public virtual IRichTextFieldWrapper ContentBody => this.GetField<RichTextFieldWrapper>("Content Body");

		[IndexField("content_body")]
 		public string ContentBodyValue => this.ContentBody.Value;

		/// <summary><para>Field: HideFromMenu</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_menu")]
		public virtual IBooleanFieldWrapper HideFromMenu => this.GetField<BooleanFieldWrapper>("Hide From Menu");

		[IndexField("hide_from_menu")]
 		public bool HideFromMenuValue => this.HideFromMenu.Value;

		/// <summary><para>Field: HideFromSitemap</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_sitemap")]
		public virtual IBooleanFieldWrapper HideFromSitemap => this.GetField<BooleanFieldWrapper>("Hide from Sitemap");

		[IndexField("hide_from_sitemap")]
 		public bool HideFromSitemapValue => this.HideFromSitemap.Value;

		/// <summary><para>Field: MetaCanonicalUrl</para><para>Data type: General Link</para></summary>
		[IndexField("meta_canonical_url")]
		public virtual IGeneralLinkFieldWrapper MetaCanonicalUrl => this.GetField<GeneralLinkFieldWrapper>("Meta Canonical Url");

		[IndexField("meta_canonical_url")]
 		public string MetaCanonicalUrlValue => this.MetaCanonicalUrl.Value;

		/// <summary><para>Field: MetaDescription</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("meta_description")]
		public virtual ITextFieldWrapper MetaDescription => this.GetField<TextFieldWrapper>("Meta Description");

		[IndexField("meta_description")]
 		public string MetaDescriptionValue => this.MetaDescription.Value;

		/// <summary><para>Field: MetaImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper MetaImage => this.GetField<ImageFieldWrapper>("Meta Image");

 		public string MetaImageValue => this.MetaImage.Value;

		/// <summary><para>Field: MetaKeywords</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_keywords")]
		public virtual ITextFieldWrapper MetaKeywords => this.GetField<TextFieldWrapper>("Meta Keywords");

		[IndexField("meta_keywords")]
 		public string MetaKeywordsValue => this.MetaKeywords.Value;

		/// <summary><para>Field: MetaTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_title")]
		public virtual ITextFieldWrapper MetaTitle => this.GetField<TextFieldWrapper>("Meta Title");

		[IndexField("meta_title")]
 		public string MetaTitleValue => this.MetaTitle.Value;

		/// <summary><para>Field: NavigationImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper NavigationImage => this.GetField<ImageFieldWrapper>("Navigation Image");

 		public string NavigationImageValue => this.NavigationImage.Value;

		/// <summary><para>Field: NavigationTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("navigation_title")]
		public virtual ITextFieldWrapper NavigationTitle => this.GetField<TextFieldWrapper>("Navigation Title");

		[IndexField("navigation_title")]
 		public string NavigationTitleValue => this.NavigationTitle.Value;

		/// <summary><para>Field: NavigationUrl</para><para>Data type: General Link</para></summary>
		[IndexField("navigation_url")]
		public virtual IGeneralLinkFieldWrapper NavigationUrl => this.GetField<GeneralLinkFieldWrapper>("Navigation Url");

		[IndexField("navigation_url")]
 		public string NavigationUrlValue => this.NavigationUrl.Value;

		/// <summary><para>Field: PageSummary</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("page_summary")]
		public virtual ITextFieldWrapper PageSummary => this.GetField<TextFieldWrapper>("Page Summary");

		[IndexField("page_summary")]
 		public string PageSummaryValue => this.PageSummary.Value;

		/// <summary><para>Field: PageTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("page_title")]
		public virtual ITextFieldWrapper PageTitle => this.GetField<TextFieldWrapper>("Page Title");

		[IndexField("page_title")]
 		public string PageTitleValue => this.PageTitle.Value;

		/// <summary><para>Field: TrackingAction</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_action")]
		public virtual ITextFieldWrapper TrackingAction => this.GetField<TextFieldWrapper>("Tracking Action");

		[IndexField("tracking_action")]
 		public string TrackingActionValue => this.TrackingAction.Value;

		/// <summary><para>Field: TrackingCategory</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_category")]
		public virtual ITextFieldWrapper TrackingCategory => this.GetField<TextFieldWrapper>("Tracking Category");

		[IndexField("tracking_category")]
 		public string TrackingCategoryValue => this.TrackingCategory.Value;

		/// <summary><para>Field: TrackingLabel</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_label")]
		public virtual ITextFieldWrapper TrackingLabel => this.GetField<TextFieldWrapper>("Tracking Label");

		[IndexField("tracking_label")]
 		public string TrackingLabelValue => this.TrackingLabel.Value;
	}
}
#endregion
#region Landing Page (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Landing Page</para><para>ID: {70DA93AB-FF30-4B87-8DD5-BEE41CA94AF5}</para><para>/sitecore/templates/User Defined/Poker Central/Page Types/Landing Page</para></summary>
	[TemplateMapping("{70DA93AB-FF30-4B87-8DD5-BEE41CA94AF5}", "InterfaceMap")]
	public partial interface ILandingPage :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.PokerCentral.IChildContentPage,
		LM.Model.Templates.PokerCentral.IContentPage,
		LM.Model.Templates.PokerCentral.IContent,
		LM.Model.Templates.PokerCentral.ISponsors,
		LM.Model.Templates.PokerCentral.IAnalyticsTracking,
		LM.Model.Templates.PokerCentral.INavigation,
		LM.Model.Templates.PokerCentral.IMetaData
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{70DA93AB-FF30-4B87-8DD5-BEE41CA94AF5}", typeof(Guid))]
	[TemplateMapping("{70DA93AB-FF30-4B87-8DD5-BEE41CA94AF5}")]
	public partial class LandingPage : CustomItemWrapper, ILandingPage
	{
		public LandingPage(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public LandingPage(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: ContentBody</para><para>Data type: Rich Text</para></summary>
		[IndexField("content_body")]
		public virtual IRichTextFieldWrapper ContentBody => this.GetField<RichTextFieldWrapper>("Content Body");

		[IndexField("content_body")]
 		public string ContentBodyValue => this.ContentBody.Value;

		/// <summary><para>Field: HideFromMenu</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_menu")]
		public virtual IBooleanFieldWrapper HideFromMenu => this.GetField<BooleanFieldWrapper>("Hide From Menu");

		[IndexField("hide_from_menu")]
 		public bool HideFromMenuValue => this.HideFromMenu.Value;

		/// <summary><para>Field: HideFromSitemap</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_sitemap")]
		public virtual IBooleanFieldWrapper HideFromSitemap => this.GetField<BooleanFieldWrapper>("Hide from Sitemap");

		[IndexField("hide_from_sitemap")]
 		public bool HideFromSitemapValue => this.HideFromSitemap.Value;

		/// <summary><para>Field: MetaCanonicalUrl</para><para>Data type: General Link</para></summary>
		[IndexField("meta_canonical_url")]
		public virtual IGeneralLinkFieldWrapper MetaCanonicalUrl => this.GetField<GeneralLinkFieldWrapper>("Meta Canonical Url");

		[IndexField("meta_canonical_url")]
 		public string MetaCanonicalUrlValue => this.MetaCanonicalUrl.Value;

		/// <summary><para>Field: MetaDescription</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("meta_description")]
		public virtual ITextFieldWrapper MetaDescription => this.GetField<TextFieldWrapper>("Meta Description");

		[IndexField("meta_description")]
 		public string MetaDescriptionValue => this.MetaDescription.Value;

		/// <summary><para>Field: MetaImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper MetaImage => this.GetField<ImageFieldWrapper>("Meta Image");

 		public string MetaImageValue => this.MetaImage.Value;

		/// <summary><para>Field: MetaKeywords</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_keywords")]
		public virtual ITextFieldWrapper MetaKeywords => this.GetField<TextFieldWrapper>("Meta Keywords");

		[IndexField("meta_keywords")]
 		public string MetaKeywordsValue => this.MetaKeywords.Value;

		/// <summary><para>Field: MetaTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_title")]
		public virtual ITextFieldWrapper MetaTitle => this.GetField<TextFieldWrapper>("Meta Title");

		[IndexField("meta_title")]
 		public string MetaTitleValue => this.MetaTitle.Value;

		/// <summary><para>Field: NavigationImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper NavigationImage => this.GetField<ImageFieldWrapper>("Navigation Image");

 		public string NavigationImageValue => this.NavigationImage.Value;

		/// <summary><para>Field: NavigationTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("navigation_title")]
		public virtual ITextFieldWrapper NavigationTitle => this.GetField<TextFieldWrapper>("Navigation Title");

		[IndexField("navigation_title")]
 		public string NavigationTitleValue => this.NavigationTitle.Value;

		/// <summary><para>Field: NavigationUrl</para><para>Data type: General Link</para></summary>
		[IndexField("navigation_url")]
		public virtual IGeneralLinkFieldWrapper NavigationUrl => this.GetField<GeneralLinkFieldWrapper>("Navigation Url");

		[IndexField("navigation_url")]
 		public string NavigationUrlValue => this.NavigationUrl.Value;

		/// <summary><para>Field: PageSummary</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("page_summary")]
		public virtual ITextFieldWrapper PageSummary => this.GetField<TextFieldWrapper>("Page Summary");

		[IndexField("page_summary")]
 		public string PageSummaryValue => this.PageSummary.Value;

		/// <summary><para>Field: PageTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("page_title")]
		public virtual ITextFieldWrapper PageTitle => this.GetField<TextFieldWrapper>("Page Title");

		[IndexField("page_title")]
 		public string PageTitleValue => this.PageTitle.Value;

		/// <summary><para>Field: SponsoredBackground</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper SponsoredBackground => this.GetField<ImageFieldWrapper>("Sponsored Background");

 		public string SponsoredBackgroundValue => this.SponsoredBackground.Value;

		/// <summary><para>Field: TrackingAction</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_action")]
		public virtual ITextFieldWrapper TrackingAction => this.GetField<TextFieldWrapper>("Tracking Action");

		[IndexField("tracking_action")]
 		public string TrackingActionValue => this.TrackingAction.Value;

		/// <summary><para>Field: TrackingCategory</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_category")]
		public virtual ITextFieldWrapper TrackingCategory => this.GetField<TextFieldWrapper>("Tracking Category");

		[IndexField("tracking_category")]
 		public string TrackingCategoryValue => this.TrackingCategory.Value;

		/// <summary><para>Field: TrackingLabel</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_label")]
		public virtual ITextFieldWrapper TrackingLabel => this.GetField<TextFieldWrapper>("Tracking Label");

		[IndexField("tracking_label")]
 		public string TrackingLabelValue => this.TrackingLabel.Value;
	}
}
#endregion
#region Player List (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Player List</para><para>ID: {5A00F91A-3CD5-4825-A461-5A90F32FA41E}</para><para>/sitecore/templates/User Defined/Poker Central/Players/Player List</para></summary>
	[TemplateMapping("{5A00F91A-3CD5-4825-A461-5A90F32FA41E}", "InterfaceMap")]
	public partial interface IPlayerList :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{

    	/// <summary><para>Template: Player List</para><para>Field: Selected Players</para><para>Data type: Multilist with Search</para></summary>
		[IndexField("selected_players")]
		IListFieldWrapper SelectedPlayers { get; }

    	/// <summary><para>Template: Player List</para><para>Field: Selected Players</para><para>Data type: Multilist with Search</para></summary>
		[IndexField("selected_players")]
		IEnumerable<Guid> SelectedPlayersValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{5A00F91A-3CD5-4825-A461-5A90F32FA41E}", typeof(Guid))]
	[TemplateMapping("{5A00F91A-3CD5-4825-A461-5A90F32FA41E}")]
	public partial class PlayerList : CustomItemWrapper, IPlayerList
	{
		public PlayerList(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public PlayerList(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: SelectedPlayers</para><para>Data type: Multilist with Search</para></summary>
		[IndexField("selected_players")]
		public virtual IListFieldWrapper SelectedPlayers => this.GetField<ListFieldWrapper>("Selected Players");

		[IndexField("selected_players")]
 		public IEnumerable<Guid> SelectedPlayersValue => this.SelectedPlayers.Value;
	}
}
#endregion
#region Player (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Player</para><para>ID: {0E5AB4A1-D8EA-4799-AD03-976509561F04}</para><para>/sitecore/templates/User Defined/Poker Central/Players/Player</para></summary>
	[TemplateMapping("{0E5AB4A1-D8EA-4799-AD03-976509561F04}", "InterfaceMap")]
	public partial interface IPlayer :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.PokerCentral.IContentPage,
		LM.Model.Templates.PokerCentral.IShowsList,
		LM.Model.Templates.PokerCentral.IContent,
		LM.Model.Templates.PokerCentral.IHero,
		LM.Model.Templates.PokerCentral.IAnalyticsTracking,
		LM.Model.Templates.PokerCentral.INavigation,
		LM.Model.Templates.PokerCentral.IMetaData
	{

    	/// <summary><para>Template: Player</para><para>Field: Country</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("country")]
		ITextFieldWrapper Country { get; }

    	/// <summary><para>Template: Player</para><para>Field: Country</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("country")]
		string CountryValue { get; }

    	/// <summary><para>Template: Player</para><para>Field: First Name</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("first_name")]
		ITextFieldWrapper FirstName { get; }

    	/// <summary><para>Template: Player</para><para>Field: First Name</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("first_name")]
		string FirstNameValue { get; }

    	/// <summary><para>Template: Player</para><para>Field: Last Name</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("last_name")]
		ITextFieldWrapper LastName { get; }

    	/// <summary><para>Template: Player</para><para>Field: Last Name</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("last_name")]
		string LastNameValue { get; }

    	/// <summary><para>Template: Player</para><para>Field: Player Id</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("player_id")]
		ITextFieldWrapper PlayerId { get; }

    	/// <summary><para>Template: Player</para><para>Field: Player Id</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("player_id")]
		string PlayerIdValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{0E5AB4A1-D8EA-4799-AD03-976509561F04}", typeof(Guid))]
	[TemplateMapping("{0E5AB4A1-D8EA-4799-AD03-976509561F04}")]
	public partial class Player : CustomItemWrapper, IPlayer
	{
		public Player(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public Player(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: ContentBody</para><para>Data type: Rich Text</para></summary>
		[IndexField("content_body")]
		public virtual IRichTextFieldWrapper ContentBody => this.GetField<RichTextFieldWrapper>("Content Body");

		[IndexField("content_body")]
 		public string ContentBodyValue => this.ContentBody.Value;

		/// <summary><para>Field: Country</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("country")]
		public virtual ITextFieldWrapper Country => this.GetField<TextFieldWrapper>("Country");

		[IndexField("country")]
 		public string CountryValue => this.Country.Value;

		/// <summary><para>Field: FirstName</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("first_name")]
		public virtual ITextFieldWrapper FirstName => this.GetField<TextFieldWrapper>("First Name");

		[IndexField("first_name")]
 		public string FirstNameValue => this.FirstName.Value;

		/// <summary><para>Field: HeroImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper HeroImage => this.GetField<ImageFieldWrapper>("Hero Image");

 		public string HeroImageValue => this.HeroImage.Value;

		/// <summary><para>Field: HeroVideo</para><para>Data type: Multilist with Search</para></summary>
		[IndexField("hero_video")]
		public virtual IListFieldWrapper HeroVideo => this.GetField<ListFieldWrapper>("Hero Video");

		[IndexField("hero_video")]
 		public IEnumerable<Guid> HeroVideoValue => this.HeroVideo.Value;

		/// <summary><para>Field: HideFromMenu</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_menu")]
		public virtual IBooleanFieldWrapper HideFromMenu => this.GetField<BooleanFieldWrapper>("Hide From Menu");

		[IndexField("hide_from_menu")]
 		public bool HideFromMenuValue => this.HideFromMenu.Value;

		/// <summary><para>Field: HideFromSitemap</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_sitemap")]
		public virtual IBooleanFieldWrapper HideFromSitemap => this.GetField<BooleanFieldWrapper>("Hide from Sitemap");

		[IndexField("hide_from_sitemap")]
 		public bool HideFromSitemapValue => this.HideFromSitemap.Value;

		/// <summary><para>Field: LastName</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("last_name")]
		public virtual ITextFieldWrapper LastName => this.GetField<TextFieldWrapper>("Last Name");

		[IndexField("last_name")]
 		public string LastNameValue => this.LastName.Value;

		/// <summary><para>Field: MetaCanonicalUrl</para><para>Data type: General Link</para></summary>
		[IndexField("meta_canonical_url")]
		public virtual IGeneralLinkFieldWrapper MetaCanonicalUrl => this.GetField<GeneralLinkFieldWrapper>("Meta Canonical Url");

		[IndexField("meta_canonical_url")]
 		public string MetaCanonicalUrlValue => this.MetaCanonicalUrl.Value;

		/// <summary><para>Field: MetaDescription</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("meta_description")]
		public virtual ITextFieldWrapper MetaDescription => this.GetField<TextFieldWrapper>("Meta Description");

		[IndexField("meta_description")]
 		public string MetaDescriptionValue => this.MetaDescription.Value;

		/// <summary><para>Field: MetaImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper MetaImage => this.GetField<ImageFieldWrapper>("Meta Image");

 		public string MetaImageValue => this.MetaImage.Value;

		/// <summary><para>Field: MetaKeywords</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_keywords")]
		public virtual ITextFieldWrapper MetaKeywords => this.GetField<TextFieldWrapper>("Meta Keywords");

		[IndexField("meta_keywords")]
 		public string MetaKeywordsValue => this.MetaKeywords.Value;

		/// <summary><para>Field: MetaTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_title")]
		public virtual ITextFieldWrapper MetaTitle => this.GetField<TextFieldWrapper>("Meta Title");

		[IndexField("meta_title")]
 		public string MetaTitleValue => this.MetaTitle.Value;

		/// <summary><para>Field: NavigationImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper NavigationImage => this.GetField<ImageFieldWrapper>("Navigation Image");

 		public string NavigationImageValue => this.NavigationImage.Value;

		/// <summary><para>Field: NavigationTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("navigation_title")]
		public virtual ITextFieldWrapper NavigationTitle => this.GetField<TextFieldWrapper>("Navigation Title");

		[IndexField("navigation_title")]
 		public string NavigationTitleValue => this.NavigationTitle.Value;

		/// <summary><para>Field: NavigationUrl</para><para>Data type: General Link</para></summary>
		[IndexField("navigation_url")]
		public virtual IGeneralLinkFieldWrapper NavigationUrl => this.GetField<GeneralLinkFieldWrapper>("Navigation Url");

		[IndexField("navigation_url")]
 		public string NavigationUrlValue => this.NavigationUrl.Value;

		/// <summary><para>Field: PageSummary</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("page_summary")]
		public virtual ITextFieldWrapper PageSummary => this.GetField<TextFieldWrapper>("Page Summary");

		[IndexField("page_summary")]
 		public string PageSummaryValue => this.PageSummary.Value;

		/// <summary><para>Field: PageTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("page_title")]
		public virtual ITextFieldWrapper PageTitle => this.GetField<TextFieldWrapper>("Page Title");

		[IndexField("page_title")]
 		public string PageTitleValue => this.PageTitle.Value;

		/// <summary><para>Field: PlayerId</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("player_id")]
		public virtual ITextFieldWrapper PlayerId => this.GetField<TextFieldWrapper>("Player Id");

		[IndexField("player_id")]
 		public string PlayerIdValue => this.PlayerId.Value;

		/// <summary><para>Field: SelectedShows</para><para>Data type: TreelistEx</para></summary>
		[IndexField("selected_shows")]
		public virtual IListFieldWrapper SelectedShows => this.GetField<ListFieldWrapper>("Selected Shows");

		[IndexField("selected_shows")]
 		public IEnumerable<Guid> SelectedShowsValue => this.SelectedShows.Value;

		/// <summary><para>Field: TrackingAction</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_action")]
		public virtual ITextFieldWrapper TrackingAction => this.GetField<TextFieldWrapper>("Tracking Action");

		[IndexField("tracking_action")]
 		public string TrackingActionValue => this.TrackingAction.Value;

		/// <summary><para>Field: TrackingCategory</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_category")]
		public virtual ITextFieldWrapper TrackingCategory => this.GetField<TextFieldWrapper>("Tracking Category");

		[IndexField("tracking_category")]
 		public string TrackingCategoryValue => this.TrackingCategory.Value;

		/// <summary><para>Field: TrackingLabel</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_label")]
		public virtual ITextFieldWrapper TrackingLabel => this.GetField<TextFieldWrapper>("Tracking Label");

		[IndexField("tracking_label")]
 		public string TrackingLabelValue => this.TrackingLabel.Value;
	}
}
#endregion
#region Players Landing (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Players Landing</para><para>ID: {1281752E-E87F-49C9-9118-EC5A95B9F51F}</para><para>/sitecore/templates/User Defined/Poker Central/Players/Players Landing</para></summary>
	[TemplateMapping("{1281752E-E87F-49C9-9118-EC5A95B9F51F}", "InterfaceMap")]
	public partial interface IPlayersLanding :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.PokerCentral.IChildContentPage,
		LM.Model.Templates.PokerCentral.IContentPage,
		LM.Model.Templates.PokerCentral.ILandingPage,
		LM.Model.Templates.PokerCentral.IContent,
		LM.Model.Templates.PokerCentral.ISponsors,
		LM.Model.Templates.PokerCentral.IAnalyticsTracking,
		LM.Model.Templates.PokerCentral.INavigation,
		LM.Model.Templates.PokerCentral.IMetaData
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{1281752E-E87F-49C9-9118-EC5A95B9F51F}", typeof(Guid))]
	[TemplateMapping("{1281752E-E87F-49C9-9118-EC5A95B9F51F}")]
	public partial class PlayersLanding : CustomItemWrapper, IPlayersLanding
	{
		public PlayersLanding(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public PlayersLanding(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: ContentBody</para><para>Data type: Rich Text</para></summary>
		[IndexField("content_body")]
		public virtual IRichTextFieldWrapper ContentBody => this.GetField<RichTextFieldWrapper>("Content Body");

		[IndexField("content_body")]
 		public string ContentBodyValue => this.ContentBody.Value;

		/// <summary><para>Field: HideFromMenu</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_menu")]
		public virtual IBooleanFieldWrapper HideFromMenu => this.GetField<BooleanFieldWrapper>("Hide From Menu");

		[IndexField("hide_from_menu")]
 		public bool HideFromMenuValue => this.HideFromMenu.Value;

		/// <summary><para>Field: HideFromSitemap</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_sitemap")]
		public virtual IBooleanFieldWrapper HideFromSitemap => this.GetField<BooleanFieldWrapper>("Hide from Sitemap");

		[IndexField("hide_from_sitemap")]
 		public bool HideFromSitemapValue => this.HideFromSitemap.Value;

		/// <summary><para>Field: MetaCanonicalUrl</para><para>Data type: General Link</para></summary>
		[IndexField("meta_canonical_url")]
		public virtual IGeneralLinkFieldWrapper MetaCanonicalUrl => this.GetField<GeneralLinkFieldWrapper>("Meta Canonical Url");

		[IndexField("meta_canonical_url")]
 		public string MetaCanonicalUrlValue => this.MetaCanonicalUrl.Value;

		/// <summary><para>Field: MetaDescription</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("meta_description")]
		public virtual ITextFieldWrapper MetaDescription => this.GetField<TextFieldWrapper>("Meta Description");

		[IndexField("meta_description")]
 		public string MetaDescriptionValue => this.MetaDescription.Value;

		/// <summary><para>Field: MetaImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper MetaImage => this.GetField<ImageFieldWrapper>("Meta Image");

 		public string MetaImageValue => this.MetaImage.Value;

		/// <summary><para>Field: MetaKeywords</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_keywords")]
		public virtual ITextFieldWrapper MetaKeywords => this.GetField<TextFieldWrapper>("Meta Keywords");

		[IndexField("meta_keywords")]
 		public string MetaKeywordsValue => this.MetaKeywords.Value;

		/// <summary><para>Field: MetaTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_title")]
		public virtual ITextFieldWrapper MetaTitle => this.GetField<TextFieldWrapper>("Meta Title");

		[IndexField("meta_title")]
 		public string MetaTitleValue => this.MetaTitle.Value;

		/// <summary><para>Field: NavigationImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper NavigationImage => this.GetField<ImageFieldWrapper>("Navigation Image");

 		public string NavigationImageValue => this.NavigationImage.Value;

		/// <summary><para>Field: NavigationTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("navigation_title")]
		public virtual ITextFieldWrapper NavigationTitle => this.GetField<TextFieldWrapper>("Navigation Title");

		[IndexField("navigation_title")]
 		public string NavigationTitleValue => this.NavigationTitle.Value;

		/// <summary><para>Field: NavigationUrl</para><para>Data type: General Link</para></summary>
		[IndexField("navigation_url")]
		public virtual IGeneralLinkFieldWrapper NavigationUrl => this.GetField<GeneralLinkFieldWrapper>("Navigation Url");

		[IndexField("navigation_url")]
 		public string NavigationUrlValue => this.NavigationUrl.Value;

		/// <summary><para>Field: PageSummary</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("page_summary")]
		public virtual ITextFieldWrapper PageSummary => this.GetField<TextFieldWrapper>("Page Summary");

		[IndexField("page_summary")]
 		public string PageSummaryValue => this.PageSummary.Value;

		/// <summary><para>Field: PageTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("page_title")]
		public virtual ITextFieldWrapper PageTitle => this.GetField<TextFieldWrapper>("Page Title");

		[IndexField("page_title")]
 		public string PageTitleValue => this.PageTitle.Value;

		/// <summary><para>Field: SponsoredBackground</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper SponsoredBackground => this.GetField<ImageFieldWrapper>("Sponsored Background");

 		public string SponsoredBackgroundValue => this.SponsoredBackground.Value;

		/// <summary><para>Field: TrackingAction</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_action")]
		public virtual ITextFieldWrapper TrackingAction => this.GetField<TextFieldWrapper>("Tracking Action");

		[IndexField("tracking_action")]
 		public string TrackingActionValue => this.TrackingAction.Value;

		/// <summary><para>Field: TrackingCategory</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_category")]
		public virtual ITextFieldWrapper TrackingCategory => this.GetField<TextFieldWrapper>("Tracking Category");

		[IndexField("tracking_category")]
 		public string TrackingCategoryValue => this.TrackingCategory.Value;

		/// <summary><para>Field: TrackingLabel</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_label")]
		public virtual ITextFieldWrapper TrackingLabel => this.GetField<TextFieldWrapper>("Tracking Label");

		[IndexField("tracking_label")]
 		public string TrackingLabelValue => this.TrackingLabel.Value;
	}
}
#endregion
#region PlayerHeroOptions (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary>
	/// <para>Template: PlayerHeroOptions</para>
	/// <para>ID: {B50982D5-FDFF-47D9-BBA4-C9E151259C04}</para>
	/// <para>/sitecore/templates/User Defined/Poker Central/Players/Rendering Parameters/PlayerHeroOptions</para>
	/// </summary>
	[TemplateMapping("{B50982D5-FDFF-47D9-BBA4-C9E151259C04}", "InterfaceRenderingParameterMap")]
	public partial interface IPlayerHeroOptions :
		IRenderingParameterWrapper,
		LM.Model.Templates.Ignite.IIgniteRenderingParameters	{
    	/// <summary><para>Template: PlayerHeroOptions</para><para>Field: Career Cashes Label</para><para>Data type: Droplink</para></summary>
		ILinkFieldWrapper CareerCashesLabel { get; }
    	/// <summary><para>Template: PlayerHeroOptions</para><para>Field: Career Wins Label</para><para>Data type: Droplink</para></summary>
		ILinkFieldWrapper CareerWinsLabel { get; }
    	/// <summary><para>Template: PlayerHeroOptions</para><para>Field: Player Profile Button Text</para><para>Data type: Droplink</para></summary>
		ILinkFieldWrapper PlayerProfileButtonText { get; }
    	/// <summary><para>Template: PlayerHeroOptions</para><para>Field: Recent Cash Label</para><para>Data type: Droplink</para></summary>
		ILinkFieldWrapper RecentCashLabel { get; }
    	/// <summary><para>Template: PlayerHeroOptions</para><para>Field: Total Winnings Label</para><para>Data type: Droplink</para></summary>
		ILinkFieldWrapper TotalWinningsLabel { get; }
	}
	
	[TemplateMapping("{B50982D5-FDFF-47D9-BBA4-C9E151259C04}", "RenderingParameter")]
	public partial class PlayerHeroOptions : RenderingParameterWrapper, IPlayerHeroOptions
	{
		public PlayerHeroOptions(Dictionary<string, string> parameters, ISpawnProvider spawnProvider)
			: base(parameters, spawnProvider)
		{ }

		/// <summary><para>Field: CareerCashesLabel</para><para>Data type: Droplink</para></summary>
		public virtual ILinkFieldWrapper CareerCashesLabel => (Fortis.Model.RenderingParameters.Fields.LinkFieldWrapper)this.GetField("Career Cashes Label", "droplink");

		/// <summary><para>Field: CareerWinsLabel</para><para>Data type: Droplink</para></summary>
		public virtual ILinkFieldWrapper CareerWinsLabel => (Fortis.Model.RenderingParameters.Fields.LinkFieldWrapper)this.GetField("Career Wins Label", "droplink");

		/// <summary><para>Field: PlayerProfileButtonText</para><para>Data type: Droplink</para></summary>
		public virtual ILinkFieldWrapper PlayerProfileButtonText => (Fortis.Model.RenderingParameters.Fields.LinkFieldWrapper)this.GetField("Player Profile Button Text", "droplink");

		/// <summary><para>Field: RecentCashLabel</para><para>Data type: Droplink</para></summary>
		public virtual ILinkFieldWrapper RecentCashLabel => (Fortis.Model.RenderingParameters.Fields.LinkFieldWrapper)this.GetField("Recent Cash Label", "droplink");

		/// <summary><para>Field: TotalWinningsLabel</para><para>Data type: Droplink</para></summary>
		public virtual ILinkFieldWrapper TotalWinningsLabel => (Fortis.Model.RenderingParameters.Fields.LinkFieldWrapper)this.GetField("Total Winnings Label", "droplink");
	
	}
}
#endregion
#region Schedule Page (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Schedule Page</para><para>ID: {5F23EFB1-E48A-4B1F-BBE7-C0CB13E56923}</para><para>/sitecore/templates/User Defined/Poker Central/Schedule/Page Types/Schedule Page</para></summary>
	[TemplateMapping("{5F23EFB1-E48A-4B1F-BBE7-C0CB13E56923}", "InterfaceMap")]
	public partial interface ISchedulePage :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.PokerCentral.IContentPage,
		LM.Model.Templates.PokerCentral.IScheduleList,
		LM.Model.Templates.PokerCentral.IContent,
		LM.Model.Templates.PokerCentral.IAnalyticsTracking,
		LM.Model.Templates.PokerCentral.INavigation,
		LM.Model.Templates.PokerCentral.IMetaData
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{5F23EFB1-E48A-4B1F-BBE7-C0CB13E56923}", typeof(Guid))]
	[TemplateMapping("{5F23EFB1-E48A-4B1F-BBE7-C0CB13E56923}")]
	public partial class SchedulePage : CustomItemWrapper, ISchedulePage
	{
		public SchedulePage(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public SchedulePage(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: ContentBody</para><para>Data type: Rich Text</para></summary>
		[IndexField("content_body")]
		public virtual IRichTextFieldWrapper ContentBody => this.GetField<RichTextFieldWrapper>("Content Body");

		[IndexField("content_body")]
 		public string ContentBodyValue => this.ContentBody.Value;

		/// <summary><para>Field: HideFromMenu</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_menu")]
		public virtual IBooleanFieldWrapper HideFromMenu => this.GetField<BooleanFieldWrapper>("Hide From Menu");

		[IndexField("hide_from_menu")]
 		public bool HideFromMenuValue => this.HideFromMenu.Value;

		/// <summary><para>Field: HideFromSitemap</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_sitemap")]
		public virtual IBooleanFieldWrapper HideFromSitemap => this.GetField<BooleanFieldWrapper>("Hide from Sitemap");

		[IndexField("hide_from_sitemap")]
 		public bool HideFromSitemapValue => this.HideFromSitemap.Value;

		/// <summary><para>Field: MetaCanonicalUrl</para><para>Data type: General Link</para></summary>
		[IndexField("meta_canonical_url")]
		public virtual IGeneralLinkFieldWrapper MetaCanonicalUrl => this.GetField<GeneralLinkFieldWrapper>("Meta Canonical Url");

		[IndexField("meta_canonical_url")]
 		public string MetaCanonicalUrlValue => this.MetaCanonicalUrl.Value;

		/// <summary><para>Field: MetaDescription</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("meta_description")]
		public virtual ITextFieldWrapper MetaDescription => this.GetField<TextFieldWrapper>("Meta Description");

		[IndexField("meta_description")]
 		public string MetaDescriptionValue => this.MetaDescription.Value;

		/// <summary><para>Field: MetaImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper MetaImage => this.GetField<ImageFieldWrapper>("Meta Image");

 		public string MetaImageValue => this.MetaImage.Value;

		/// <summary><para>Field: MetaKeywords</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_keywords")]
		public virtual ITextFieldWrapper MetaKeywords => this.GetField<TextFieldWrapper>("Meta Keywords");

		[IndexField("meta_keywords")]
 		public string MetaKeywordsValue => this.MetaKeywords.Value;

		/// <summary><para>Field: MetaTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_title")]
		public virtual ITextFieldWrapper MetaTitle => this.GetField<TextFieldWrapper>("Meta Title");

		[IndexField("meta_title")]
 		public string MetaTitleValue => this.MetaTitle.Value;

		/// <summary><para>Field: NavigationImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper NavigationImage => this.GetField<ImageFieldWrapper>("Navigation Image");

 		public string NavigationImageValue => this.NavigationImage.Value;

		/// <summary><para>Field: NavigationTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("navigation_title")]
		public virtual ITextFieldWrapper NavigationTitle => this.GetField<TextFieldWrapper>("Navigation Title");

		[IndexField("navigation_title")]
 		public string NavigationTitleValue => this.NavigationTitle.Value;

		/// <summary><para>Field: NavigationUrl</para><para>Data type: General Link</para></summary>
		[IndexField("navigation_url")]
		public virtual IGeneralLinkFieldWrapper NavigationUrl => this.GetField<GeneralLinkFieldWrapper>("Navigation Url");

		[IndexField("navigation_url")]
 		public string NavigationUrlValue => this.NavigationUrl.Value;

		/// <summary><para>Field: PageSummary</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("page_summary")]
		public virtual ITextFieldWrapper PageSummary => this.GetField<TextFieldWrapper>("Page Summary");

		[IndexField("page_summary")]
 		public string PageSummaryValue => this.PageSummary.Value;

		/// <summary><para>Field: PageTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("page_title")]
		public virtual ITextFieldWrapper PageTitle => this.GetField<TextFieldWrapper>("Page Title");

		[IndexField("page_title")]
 		public string PageTitleValue => this.PageTitle.Value;

		/// <summary><para>Field: TrackingAction</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_action")]
		public virtual ITextFieldWrapper TrackingAction => this.GetField<TextFieldWrapper>("Tracking Action");

		[IndexField("tracking_action")]
 		public string TrackingActionValue => this.TrackingAction.Value;

		/// <summary><para>Field: TrackingCategory</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_category")]
		public virtual ITextFieldWrapper TrackingCategory => this.GetField<TextFieldWrapper>("Tracking Category");

		[IndexField("tracking_category")]
 		public string TrackingCategoryValue => this.TrackingCategory.Value;

		/// <summary><para>Field: TrackingLabel</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_label")]
		public virtual ITextFieldWrapper TrackingLabel => this.GetField<TextFieldWrapper>("Tracking Label");

		[IndexField("tracking_label")]
 		public string TrackingLabelValue => this.TrackingLabel.Value;
	}
}
#endregion
#region Schedule List Options (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary>
	/// <para>Template: Schedule List Options</para>
	/// <para>ID: {08ED805A-7208-4863-B4E4-7F4D9A40B55B}</para>
	/// <para>/sitecore/templates/User Defined/Poker Central/Schedule/Rendering Parameters/Schedule List Options</para>
	/// </summary>
	[TemplateMapping("{08ED805A-7208-4863-B4E4-7F4D9A40B55B}", "InterfaceRenderingParameterMap")]
	public partial interface IScheduleListOptions :
		IRenderingParameterWrapper,
		LM.Model.Templates.Ignite.IIgniteRenderingParameters,
		LM.Model.Templates.PokerCentral.IInternalAdvertOptions	{
    	/// <summary><para>Template: Schedule List Options</para><para>Field: All Shows</para><para>Data type: Droptree</para></summary>
		ILinkFieldWrapper AllShows { get; }
    	/// <summary><para>Template: Schedule List Options</para><para>Field: Open Preview In New Window</para><para>Data type: Checkbox</para></summary>
		IBooleanFieldWrapper OpenPreviewInNewWindow { get; }
    	/// <summary><para>Template: Schedule List Options</para><para>Field: Open Show In New Window</para><para>Data type: Checkbox</para></summary>
		IBooleanFieldWrapper OpenShowInNewWindow { get; }
    	/// <summary><para>Template: Schedule List Options</para><para>Field: Show Detail Label</para><para>Data type: Droptree</para></summary>
		ILinkFieldWrapper ShowDetailLabel { get; }
    	/// <summary><para>Template: Schedule List Options</para><para>Field: Today Prefix Text</para><para>Data type: Droptree</para></summary>
		ILinkFieldWrapper TodayPrefixText { get; }
    	/// <summary><para>Template: Schedule List Options</para><para>Field: Watch Preview Label</para><para>Data type: Droptree</para></summary>
		ILinkFieldWrapper WatchPreviewLabel { get; }
	}
	
	[TemplateMapping("{08ED805A-7208-4863-B4E4-7F4D9A40B55B}", "RenderingParameter")]
	public partial class ScheduleListOptions : RenderingParameterWrapper, IScheduleListOptions
	{
		public ScheduleListOptions(Dictionary<string, string> parameters, ISpawnProvider spawnProvider)
			: base(parameters, spawnProvider)
		{ }

		/// <summary><para>Field: AllShows</para><para>Data type: Droptree</para></summary>
		public virtual ILinkFieldWrapper AllShows => (Fortis.Model.RenderingParameters.Fields.LinkFieldWrapper)this.GetField("All Shows", "droptree");

		/// <summary><para>Field: OpenPreviewInNewWindow</para><para>Data type: Checkbox</para></summary>
		public virtual IBooleanFieldWrapper OpenPreviewInNewWindow => (Fortis.Model.RenderingParameters.Fields.BooleanFieldWrapper)this.GetField("Open Preview In New Window", "checkbox");

		/// <summary><para>Field: OpenShowInNewWindow</para><para>Data type: Checkbox</para></summary>
		public virtual IBooleanFieldWrapper OpenShowInNewWindow => (Fortis.Model.RenderingParameters.Fields.BooleanFieldWrapper)this.GetField("Open Show In New Window", "checkbox");

		/// <summary><para>Field: ShowAd</para><para>Data type: Checkbox</para></summary>
		public virtual IBooleanFieldWrapper ShowAd => (Fortis.Model.RenderingParameters.Fields.BooleanFieldWrapper)this.GetField("Show Ad", "checkbox");

		/// <summary><para>Field: ShowAdAfter</para><para>Data type: Number</para></summary>
		public virtual INumberFieldWrapper ShowAdAfter => (Fortis.Model.RenderingParameters.Fields.NumberFieldWrapper)this.GetField("Show Ad After", "number");

		/// <summary><para>Field: ShowDetailLabel</para><para>Data type: Droptree</para></summary>
		public virtual ILinkFieldWrapper ShowDetailLabel => (Fortis.Model.RenderingParameters.Fields.LinkFieldWrapper)this.GetField("Show Detail Label", "droptree");

		/// <summary><para>Field: TodayPrefixText</para><para>Data type: Droptree</para></summary>
		public virtual ILinkFieldWrapper TodayPrefixText => (Fortis.Model.RenderingParameters.Fields.LinkFieldWrapper)this.GetField("Today Prefix Text", "droptree");

		/// <summary><para>Field: WatchPreviewLabel</para><para>Data type: Droptree</para></summary>
		public virtual ILinkFieldWrapper WatchPreviewLabel => (Fortis.Model.RenderingParameters.Fields.LinkFieldWrapper)this.GetField("Watch Preview Label", "droptree");
	
	}
}
#endregion
#region Schedule List (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Schedule List</para><para>ID: {29BB1DBE-738C-4E54-9AB1-3EF29070CEFF}</para><para>/sitecore/templates/User Defined/Poker Central/Schedule/Schedule List</para></summary>
	[TemplateMapping("{29BB1DBE-738C-4E54-9AB1-3EF29070CEFF}", "InterfaceMap")]
	public partial interface IScheduleList :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{29BB1DBE-738C-4E54-9AB1-3EF29070CEFF}", typeof(Guid))]
	[TemplateMapping("{29BB1DBE-738C-4E54-9AB1-3EF29070CEFF}")]
	public partial class ScheduleList : CustomItemWrapper, IScheduleList
	{
		public ScheduleList(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public ScheduleList(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }
	}
}
#endregion
#region Show List Options (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary>
	/// <para>Template: Show List Options</para>
	/// <para>ID: {9CC1D334-DE32-4997-9DCE-EB49A0508D20}</para>
	/// <para>/sitecore/templates/User Defined/Poker Central/Shows/Rendering Parameters/Show List Options</para>
	/// </summary>
	[TemplateMapping("{9CC1D334-DE32-4997-9DCE-EB49A0508D20}", "InterfaceRenderingParameterMap")]
	public partial interface IShowListOptions :
		IRenderingParameterWrapper,
		LM.Model.Templates.Ignite.IIgniteRenderingParameters,
		LM.Model.Templates.PokerCentral.IInternalAdvertOptions,
		LM.Model.Templates.PokerCentral.IPagedListOptions	{
	}
	
	[TemplateMapping("{9CC1D334-DE32-4997-9DCE-EB49A0508D20}", "RenderingParameter")]
	public partial class ShowListOptions : RenderingParameterWrapper, IShowListOptions
	{
		public ShowListOptions(Dictionary<string, string> parameters, ISpawnProvider spawnProvider)
			: base(parameters, spawnProvider)
		{ }

		/// <summary><para>Field: ModuleLinkText</para><para>Data type: Droptree</para></summary>
		public virtual ILinkFieldWrapper ModuleLinkText => (Fortis.Model.RenderingParameters.Fields.LinkFieldWrapper)this.GetField("Module Link Text", "droptree");

		/// <summary><para>Field: ModuleTitle</para><para>Data type: Droptree</para></summary>
		public virtual ILinkFieldWrapper ModuleTitle => (Fortis.Model.RenderingParameters.Fields.LinkFieldWrapper)this.GetField("Module Title", "droptree");

		/// <summary><para>Field: NextButtonText</para><para>Data type: Droptree</para></summary>
		public virtual ILinkFieldWrapper NextButtonText => (Fortis.Model.RenderingParameters.Fields.LinkFieldWrapper)this.GetField("Next Button Text", "droptree");

		/// <summary><para>Field: NumberOfItems</para><para>Data type: Single-Line Text</para></summary>
		public virtual ITextFieldWrapper NumberOfItems => (Fortis.Model.RenderingParameters.Fields.TextFieldWrapper)this.GetField("Number of Items", "single-line text");

		/// <summary><para>Field: PreviousButtonText</para><para>Data type: Droptree</para></summary>
		public virtual ILinkFieldWrapper PreviousButtonText => (Fortis.Model.RenderingParameters.Fields.LinkFieldWrapper)this.GetField("Previous Button Text", "droptree");

		/// <summary><para>Field: ShowAd</para><para>Data type: Checkbox</para></summary>
		public virtual IBooleanFieldWrapper ShowAd => (Fortis.Model.RenderingParameters.Fields.BooleanFieldWrapper)this.GetField("Show Ad", "checkbox");

		/// <summary><para>Field: ShowAdAfter</para><para>Data type: Number</para></summary>
		public virtual INumberFieldWrapper ShowAdAfter => (Fortis.Model.RenderingParameters.Fields.NumberFieldWrapper)this.GetField("Show Ad After", "number");

		/// <summary><para>Field: Styles</para><para>Data type: Droplist</para></summary>
		public virtual ITextFieldWrapper Styles => (Fortis.Model.RenderingParameters.Fields.TextFieldWrapper)this.GetField("Styles", "droplist");
	
	}
}
#endregion
#region Show (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Show</para><para>ID: {D88C714D-2928-4CAF-8437-AA5DFA2F8C2A}</para><para>/sitecore/templates/User Defined/Poker Central/Shows/Show</para></summary>
	[TemplateMapping("{D88C714D-2928-4CAF-8437-AA5DFA2F8C2A}", "InterfaceMap")]
	public partial interface IShow :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.PokerCentral.IContentPage,
		LM.Model.Templates.PokerCentral.IContent,
		LM.Model.Templates.PokerCentral.IHero,
		LM.Model.Templates.PokerCentral.IAnalyticsTracking,
		LM.Model.Templates.PokerCentral.INavigation,
		LM.Model.Templates.PokerCentral.IMetaData
	{

    	/// <summary><para>Template: Show</para><para>Field: Labels List</para><para>Data type: TreelistEx</para></summary>
		[IndexField("labels_list")]
		IListFieldWrapper LabelsList { get; }

    	/// <summary><para>Template: Show</para><para>Field: Labels List</para><para>Data type: TreelistEx</para></summary>
		[IndexField("labels_list")]
		IEnumerable<Guid> LabelsListValue { get; }

    	/// <summary><para>Template: Show</para><para>Field: Preview Video</para><para>Data type: Multilist with Search</para></summary>
		[IndexField("preview_video")]
		IListFieldWrapper PreviewVideo { get; }

    	/// <summary><para>Template: Show</para><para>Field: Preview Video</para><para>Data type: Multilist with Search</para></summary>
		[IndexField("preview_video")]
		IEnumerable<Guid> PreviewVideoValue { get; }

    	/// <summary><para>Template: Show</para><para>Field: Show Name</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("show_name")]
		ITextFieldWrapper ShowName { get; }

    	/// <summary><para>Template: Show</para><para>Field: Show Name</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("show_name")]
		string ShowNameValue { get; }

    	/// <summary><para>Template: Show</para><para>Field: Thumbnail Image</para><para>Data type: Image</para></summary>
		IImageFieldWrapper ThumbnailImage { get; }

    	/// <summary><para>Template: Show</para><para>Field: Thumbnail Image</para><para>Data type: Image</para></summary>
		string ThumbnailImageValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{D88C714D-2928-4CAF-8437-AA5DFA2F8C2A}", typeof(Guid))]
	[TemplateMapping("{D88C714D-2928-4CAF-8437-AA5DFA2F8C2A}")]
	public partial class Show : CustomItemWrapper, IShow
	{
		public Show(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public Show(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: ContentBody</para><para>Data type: Rich Text</para></summary>
		[IndexField("content_body")]
		public virtual IRichTextFieldWrapper ContentBody => this.GetField<RichTextFieldWrapper>("Content Body");

		[IndexField("content_body")]
 		public string ContentBodyValue => this.ContentBody.Value;

		/// <summary><para>Field: HeroImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper HeroImage => this.GetField<ImageFieldWrapper>("Hero Image");

 		public string HeroImageValue => this.HeroImage.Value;

		/// <summary><para>Field: HeroVideo</para><para>Data type: Multilist with Search</para></summary>
		[IndexField("hero_video")]
		public virtual IListFieldWrapper HeroVideo => this.GetField<ListFieldWrapper>("Hero Video");

		[IndexField("hero_video")]
 		public IEnumerable<Guid> HeroVideoValue => this.HeroVideo.Value;

		/// <summary><para>Field: HideFromMenu</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_menu")]
		public virtual IBooleanFieldWrapper HideFromMenu => this.GetField<BooleanFieldWrapper>("Hide From Menu");

		[IndexField("hide_from_menu")]
 		public bool HideFromMenuValue => this.HideFromMenu.Value;

		/// <summary><para>Field: HideFromSitemap</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_sitemap")]
		public virtual IBooleanFieldWrapper HideFromSitemap => this.GetField<BooleanFieldWrapper>("Hide from Sitemap");

		[IndexField("hide_from_sitemap")]
 		public bool HideFromSitemapValue => this.HideFromSitemap.Value;

		/// <summary><para>Field: LabelsList</para><para>Data type: TreelistEx</para></summary>
		[IndexField("labels_list")]
		public virtual IListFieldWrapper LabelsList => this.GetField<ListFieldWrapper>("Labels List");

		[IndexField("labels_list")]
 		public IEnumerable<Guid> LabelsListValue => this.LabelsList.Value;

		/// <summary><para>Field: MetaCanonicalUrl</para><para>Data type: General Link</para></summary>
		[IndexField("meta_canonical_url")]
		public virtual IGeneralLinkFieldWrapper MetaCanonicalUrl => this.GetField<GeneralLinkFieldWrapper>("Meta Canonical Url");

		[IndexField("meta_canonical_url")]
 		public string MetaCanonicalUrlValue => this.MetaCanonicalUrl.Value;

		/// <summary><para>Field: MetaDescription</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("meta_description")]
		public virtual ITextFieldWrapper MetaDescription => this.GetField<TextFieldWrapper>("Meta Description");

		[IndexField("meta_description")]
 		public string MetaDescriptionValue => this.MetaDescription.Value;

		/// <summary><para>Field: MetaImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper MetaImage => this.GetField<ImageFieldWrapper>("Meta Image");

 		public string MetaImageValue => this.MetaImage.Value;

		/// <summary><para>Field: MetaKeywords</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_keywords")]
		public virtual ITextFieldWrapper MetaKeywords => this.GetField<TextFieldWrapper>("Meta Keywords");

		[IndexField("meta_keywords")]
 		public string MetaKeywordsValue => this.MetaKeywords.Value;

		/// <summary><para>Field: MetaTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_title")]
		public virtual ITextFieldWrapper MetaTitle => this.GetField<TextFieldWrapper>("Meta Title");

		[IndexField("meta_title")]
 		public string MetaTitleValue => this.MetaTitle.Value;

		/// <summary><para>Field: NavigationImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper NavigationImage => this.GetField<ImageFieldWrapper>("Navigation Image");

 		public string NavigationImageValue => this.NavigationImage.Value;

		/// <summary><para>Field: NavigationTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("navigation_title")]
		public virtual ITextFieldWrapper NavigationTitle => this.GetField<TextFieldWrapper>("Navigation Title");

		[IndexField("navigation_title")]
 		public string NavigationTitleValue => this.NavigationTitle.Value;

		/// <summary><para>Field: NavigationUrl</para><para>Data type: General Link</para></summary>
		[IndexField("navigation_url")]
		public virtual IGeneralLinkFieldWrapper NavigationUrl => this.GetField<GeneralLinkFieldWrapper>("Navigation Url");

		[IndexField("navigation_url")]
 		public string NavigationUrlValue => this.NavigationUrl.Value;

		/// <summary><para>Field: PageSummary</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("page_summary")]
		public virtual ITextFieldWrapper PageSummary => this.GetField<TextFieldWrapper>("Page Summary");

		[IndexField("page_summary")]
 		public string PageSummaryValue => this.PageSummary.Value;

		/// <summary><para>Field: PageTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("page_title")]
		public virtual ITextFieldWrapper PageTitle => this.GetField<TextFieldWrapper>("Page Title");

		[IndexField("page_title")]
 		public string PageTitleValue => this.PageTitle.Value;

		/// <summary><para>Field: PreviewVideo</para><para>Data type: Multilist with Search</para></summary>
		[IndexField("preview_video")]
		public virtual IListFieldWrapper PreviewVideo => this.GetField<ListFieldWrapper>("Preview Video");

		[IndexField("preview_video")]
 		public IEnumerable<Guid> PreviewVideoValue => this.PreviewVideo.Value;

		/// <summary><para>Field: ShowName</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("show_name")]
		public virtual ITextFieldWrapper ShowName => this.GetField<TextFieldWrapper>("Show Name");

		[IndexField("show_name")]
 		public string ShowNameValue => this.ShowName.Value;

		/// <summary><para>Field: ThumbnailImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper ThumbnailImage => this.GetField<ImageFieldWrapper>("Thumbnail Image");

 		public string ThumbnailImageValue => this.ThumbnailImage.Value;

		/// <summary><para>Field: TrackingAction</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_action")]
		public virtual ITextFieldWrapper TrackingAction => this.GetField<TextFieldWrapper>("Tracking Action");

		[IndexField("tracking_action")]
 		public string TrackingActionValue => this.TrackingAction.Value;

		/// <summary><para>Field: TrackingCategory</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_category")]
		public virtual ITextFieldWrapper TrackingCategory => this.GetField<TextFieldWrapper>("Tracking Category");

		[IndexField("tracking_category")]
 		public string TrackingCategoryValue => this.TrackingCategory.Value;

		/// <summary><para>Field: TrackingLabel</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_label")]
		public virtual ITextFieldWrapper TrackingLabel => this.GetField<TextFieldWrapper>("Tracking Label");

		[IndexField("tracking_label")]
 		public string TrackingLabelValue => this.TrackingLabel.Value;
	}
}
#endregion
#region Shows Landing (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Shows Landing</para><para>ID: {1E6A3186-8380-4CD1-9789-801350A87F26}</para><para>/sitecore/templates/User Defined/Poker Central/Shows/Shows Landing</para></summary>
	[TemplateMapping("{1E6A3186-8380-4CD1-9789-801350A87F26}", "InterfaceMap")]
	public partial interface IShowsLanding :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.PokerCentral.IContentPage,
		LM.Model.Templates.PokerCentral.IContent,
		LM.Model.Templates.PokerCentral.IAnalyticsTracking,
		LM.Model.Templates.PokerCentral.INavigation,
		LM.Model.Templates.PokerCentral.IMetaData
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{1E6A3186-8380-4CD1-9789-801350A87F26}", typeof(Guid))]
	[TemplateMapping("{1E6A3186-8380-4CD1-9789-801350A87F26}")]
	public partial class ShowsLanding : CustomItemWrapper, IShowsLanding
	{
		public ShowsLanding(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public ShowsLanding(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: ContentBody</para><para>Data type: Rich Text</para></summary>
		[IndexField("content_body")]
		public virtual IRichTextFieldWrapper ContentBody => this.GetField<RichTextFieldWrapper>("Content Body");

		[IndexField("content_body")]
 		public string ContentBodyValue => this.ContentBody.Value;

		/// <summary><para>Field: HideFromMenu</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_menu")]
		public virtual IBooleanFieldWrapper HideFromMenu => this.GetField<BooleanFieldWrapper>("Hide From Menu");

		[IndexField("hide_from_menu")]
 		public bool HideFromMenuValue => this.HideFromMenu.Value;

		/// <summary><para>Field: HideFromSitemap</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_sitemap")]
		public virtual IBooleanFieldWrapper HideFromSitemap => this.GetField<BooleanFieldWrapper>("Hide from Sitemap");

		[IndexField("hide_from_sitemap")]
 		public bool HideFromSitemapValue => this.HideFromSitemap.Value;

		/// <summary><para>Field: MetaCanonicalUrl</para><para>Data type: General Link</para></summary>
		[IndexField("meta_canonical_url")]
		public virtual IGeneralLinkFieldWrapper MetaCanonicalUrl => this.GetField<GeneralLinkFieldWrapper>("Meta Canonical Url");

		[IndexField("meta_canonical_url")]
 		public string MetaCanonicalUrlValue => this.MetaCanonicalUrl.Value;

		/// <summary><para>Field: MetaDescription</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("meta_description")]
		public virtual ITextFieldWrapper MetaDescription => this.GetField<TextFieldWrapper>("Meta Description");

		[IndexField("meta_description")]
 		public string MetaDescriptionValue => this.MetaDescription.Value;

		/// <summary><para>Field: MetaImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper MetaImage => this.GetField<ImageFieldWrapper>("Meta Image");

 		public string MetaImageValue => this.MetaImage.Value;

		/// <summary><para>Field: MetaKeywords</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_keywords")]
		public virtual ITextFieldWrapper MetaKeywords => this.GetField<TextFieldWrapper>("Meta Keywords");

		[IndexField("meta_keywords")]
 		public string MetaKeywordsValue => this.MetaKeywords.Value;

		/// <summary><para>Field: MetaTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_title")]
		public virtual ITextFieldWrapper MetaTitle => this.GetField<TextFieldWrapper>("Meta Title");

		[IndexField("meta_title")]
 		public string MetaTitleValue => this.MetaTitle.Value;

		/// <summary><para>Field: NavigationImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper NavigationImage => this.GetField<ImageFieldWrapper>("Navigation Image");

 		public string NavigationImageValue => this.NavigationImage.Value;

		/// <summary><para>Field: NavigationTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("navigation_title")]
		public virtual ITextFieldWrapper NavigationTitle => this.GetField<TextFieldWrapper>("Navigation Title");

		[IndexField("navigation_title")]
 		public string NavigationTitleValue => this.NavigationTitle.Value;

		/// <summary><para>Field: NavigationUrl</para><para>Data type: General Link</para></summary>
		[IndexField("navigation_url")]
		public virtual IGeneralLinkFieldWrapper NavigationUrl => this.GetField<GeneralLinkFieldWrapper>("Navigation Url");

		[IndexField("navigation_url")]
 		public string NavigationUrlValue => this.NavigationUrl.Value;

		/// <summary><para>Field: PageSummary</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("page_summary")]
		public virtual ITextFieldWrapper PageSummary => this.GetField<TextFieldWrapper>("Page Summary");

		[IndexField("page_summary")]
 		public string PageSummaryValue => this.PageSummary.Value;

		/// <summary><para>Field: PageTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("page_title")]
		public virtual ITextFieldWrapper PageTitle => this.GetField<TextFieldWrapper>("Page Title");

		[IndexField("page_title")]
 		public string PageTitleValue => this.PageTitle.Value;

		/// <summary><para>Field: TrackingAction</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_action")]
		public virtual ITextFieldWrapper TrackingAction => this.GetField<TextFieldWrapper>("Tracking Action");

		[IndexField("tracking_action")]
 		public string TrackingActionValue => this.TrackingAction.Value;

		/// <summary><para>Field: TrackingCategory</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_category")]
		public virtual ITextFieldWrapper TrackingCategory => this.GetField<TextFieldWrapper>("Tracking Category");

		[IndexField("tracking_category")]
 		public string TrackingCategoryValue => this.TrackingCategory.Value;

		/// <summary><para>Field: TrackingLabel</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_label")]
		public virtual ITextFieldWrapper TrackingLabel => this.GetField<TextFieldWrapper>("Tracking Label");

		[IndexField("tracking_label")]
 		public string TrackingLabelValue => this.TrackingLabel.Value;
	}
}
#endregion
#region Shows List (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Shows List</para><para>ID: {9AD48404-337A-49F3-870C-D78F0B0061E5}</para><para>/sitecore/templates/User Defined/Poker Central/Shows/Shows List</para></summary>
	[TemplateMapping("{9AD48404-337A-49F3-870C-D78F0B0061E5}", "InterfaceMap")]
	public partial interface IShowsList :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{

    	/// <summary><para>Template: Shows List</para><para>Field: Selected Shows</para><para>Data type: TreelistEx</para></summary>
		[IndexField("selected_shows")]
		IListFieldWrapper SelectedShows { get; }

    	/// <summary><para>Template: Shows List</para><para>Field: Selected Shows</para><para>Data type: TreelistEx</para></summary>
		[IndexField("selected_shows")]
		IEnumerable<Guid> SelectedShowsValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{9AD48404-337A-49F3-870C-D78F0B0061E5}", typeof(Guid))]
	[TemplateMapping("{9AD48404-337A-49F3-870C-D78F0B0061E5}")]
	public partial class ShowsList : CustomItemWrapper, IShowsList
	{
		public ShowsList(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public ShowsList(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: SelectedShows</para><para>Data type: TreelistEx</para></summary>
		[IndexField("selected_shows")]
		public virtual IListFieldWrapper SelectedShows => this.GetField<ListFieldWrapper>("Selected Shows");

		[IndexField("selected_shows")]
 		public IEnumerable<Guid> SelectedShowsValue => this.SelectedShows.Value;
	}
}
#endregion
#region Watch Live (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Watch Live</para><para>ID: {78618DC4-0244-43B0-A1E3-9C8A6EB5BDC9}</para><para>/sitecore/templates/User Defined/Poker Central/Watch Live/Watch Live</para></summary>
	[TemplateMapping("{78618DC4-0244-43B0-A1E3-9C8A6EB5BDC9}", "InterfaceMap")]
	public partial interface IWatchLive :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.PokerCentral.IContentPage,
		LM.Model.Templates.PokerCentral.IContent,
		LM.Model.Templates.PokerCentral.IHero,
		LM.Model.Templates.PokerCentral.IAnalyticsTracking,
		LM.Model.Templates.PokerCentral.INavigation,
		LM.Model.Templates.PokerCentral.IMetaData
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{78618DC4-0244-43B0-A1E3-9C8A6EB5BDC9}", typeof(Guid))]
	[TemplateMapping("{78618DC4-0244-43B0-A1E3-9C8A6EB5BDC9}")]
	public partial class WatchLive : CustomItemWrapper, IWatchLive
	{
		public WatchLive(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public WatchLive(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: ContentBody</para><para>Data type: Rich Text</para></summary>
		[IndexField("content_body")]
		public virtual IRichTextFieldWrapper ContentBody => this.GetField<RichTextFieldWrapper>("Content Body");

		[IndexField("content_body")]
 		public string ContentBodyValue => this.ContentBody.Value;

		/// <summary><para>Field: HeroImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper HeroImage => this.GetField<ImageFieldWrapper>("Hero Image");

 		public string HeroImageValue => this.HeroImage.Value;

		/// <summary><para>Field: HeroVideo</para><para>Data type: Multilist with Search</para></summary>
		[IndexField("hero_video")]
		public virtual IListFieldWrapper HeroVideo => this.GetField<ListFieldWrapper>("Hero Video");

		[IndexField("hero_video")]
 		public IEnumerable<Guid> HeroVideoValue => this.HeroVideo.Value;

		/// <summary><para>Field: HideFromMenu</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_menu")]
		public virtual IBooleanFieldWrapper HideFromMenu => this.GetField<BooleanFieldWrapper>("Hide From Menu");

		[IndexField("hide_from_menu")]
 		public bool HideFromMenuValue => this.HideFromMenu.Value;

		/// <summary><para>Field: HideFromSitemap</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_sitemap")]
		public virtual IBooleanFieldWrapper HideFromSitemap => this.GetField<BooleanFieldWrapper>("Hide from Sitemap");

		[IndexField("hide_from_sitemap")]
 		public bool HideFromSitemapValue => this.HideFromSitemap.Value;

		/// <summary><para>Field: MetaCanonicalUrl</para><para>Data type: General Link</para></summary>
		[IndexField("meta_canonical_url")]
		public virtual IGeneralLinkFieldWrapper MetaCanonicalUrl => this.GetField<GeneralLinkFieldWrapper>("Meta Canonical Url");

		[IndexField("meta_canonical_url")]
 		public string MetaCanonicalUrlValue => this.MetaCanonicalUrl.Value;

		/// <summary><para>Field: MetaDescription</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("meta_description")]
		public virtual ITextFieldWrapper MetaDescription => this.GetField<TextFieldWrapper>("Meta Description");

		[IndexField("meta_description")]
 		public string MetaDescriptionValue => this.MetaDescription.Value;

		/// <summary><para>Field: MetaImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper MetaImage => this.GetField<ImageFieldWrapper>("Meta Image");

 		public string MetaImageValue => this.MetaImage.Value;

		/// <summary><para>Field: MetaKeywords</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_keywords")]
		public virtual ITextFieldWrapper MetaKeywords => this.GetField<TextFieldWrapper>("Meta Keywords");

		[IndexField("meta_keywords")]
 		public string MetaKeywordsValue => this.MetaKeywords.Value;

		/// <summary><para>Field: MetaTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_title")]
		public virtual ITextFieldWrapper MetaTitle => this.GetField<TextFieldWrapper>("Meta Title");

		[IndexField("meta_title")]
 		public string MetaTitleValue => this.MetaTitle.Value;

		/// <summary><para>Field: NavigationImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper NavigationImage => this.GetField<ImageFieldWrapper>("Navigation Image");

 		public string NavigationImageValue => this.NavigationImage.Value;

		/// <summary><para>Field: NavigationTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("navigation_title")]
		public virtual ITextFieldWrapper NavigationTitle => this.GetField<TextFieldWrapper>("Navigation Title");

		[IndexField("navigation_title")]
 		public string NavigationTitleValue => this.NavigationTitle.Value;

		/// <summary><para>Field: NavigationUrl</para><para>Data type: General Link</para></summary>
		[IndexField("navigation_url")]
		public virtual IGeneralLinkFieldWrapper NavigationUrl => this.GetField<GeneralLinkFieldWrapper>("Navigation Url");

		[IndexField("navigation_url")]
 		public string NavigationUrlValue => this.NavigationUrl.Value;

		/// <summary><para>Field: PageSummary</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("page_summary")]
		public virtual ITextFieldWrapper PageSummary => this.GetField<TextFieldWrapper>("Page Summary");

		[IndexField("page_summary")]
 		public string PageSummaryValue => this.PageSummary.Value;

		/// <summary><para>Field: PageTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("page_title")]
		public virtual ITextFieldWrapper PageTitle => this.GetField<TextFieldWrapper>("Page Title");

		[IndexField("page_title")]
 		public string PageTitleValue => this.PageTitle.Value;

		/// <summary><para>Field: TrackingAction</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_action")]
		public virtual ITextFieldWrapper TrackingAction => this.GetField<TextFieldWrapper>("Tracking Action");

		[IndexField("tracking_action")]
 		public string TrackingActionValue => this.TrackingAction.Value;

		/// <summary><para>Field: TrackingCategory</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_category")]
		public virtual ITextFieldWrapper TrackingCategory => this.GetField<TextFieldWrapper>("Tracking Category");

		[IndexField("tracking_category")]
 		public string TrackingCategoryValue => this.TrackingCategory.Value;

		/// <summary><para>Field: TrackingLabel</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_label")]
		public virtual ITextFieldWrapper TrackingLabel => this.GetField<TextFieldWrapper>("Tracking Label");

		[IndexField("tracking_label")]
 		public string TrackingLabelValue => this.TrackingLabel.Value;
	}
}
#endregion
#region FAQ Folder (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: FAQ Folder</para><para>ID: {99137447-75E6-484B-836A-F816BDCEE0DC}</para><para>/sitecore/templates/User Defined/Shared/About/FAQ Folder</para></summary>
	[TemplateMapping("{99137447-75E6-484B-836A-F816BDCEE0DC}", "InterfaceMap")]
	public partial interface IFAQFolder :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteFolder,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{99137447-75E6-484B-836A-F816BDCEE0DC}", typeof(Guid))]
	[TemplateMapping("{99137447-75E6-484B-836A-F816BDCEE0DC}")]
	public partial class FAQFolder : CustomItemWrapper, IFAQFolder
	{
		public FAQFolder(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public FAQFolder(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }
	}
}
#endregion
#region Frequently Asked Question (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Frequently Asked Question</para><para>ID: {2135AD0E-19D1-48CA-BA91-DFF060BDB769}</para><para>/sitecore/templates/User Defined/Shared/About/Frequently Asked Question</para></summary>
	[TemplateMapping("{2135AD0E-19D1-48CA-BA91-DFF060BDB769}", "InterfaceMap")]
	public partial interface IFrequentlyAskedQuestion :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{

    	/// <summary><para>Template: Frequently Asked Question</para><para>Field: Answer Text</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("answer_text")]
		ITextFieldWrapper AnswerText { get; }

    	/// <summary><para>Template: Frequently Asked Question</para><para>Field: Answer Text</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("answer_text")]
		string AnswerTextValue { get; }

    	/// <summary><para>Template: Frequently Asked Question</para><para>Field: Answer Title</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("answer_title")]
		ITextFieldWrapper AnswerTitle { get; }

    	/// <summary><para>Template: Frequently Asked Question</para><para>Field: Answer Title</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("answer_title")]
		string AnswerTitleValue { get; }

    	/// <summary><para>Template: Frequently Asked Question</para><para>Field: Question</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("question")]
		ITextFieldWrapper Question { get; }

    	/// <summary><para>Template: Frequently Asked Question</para><para>Field: Question</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("question")]
		string QuestionValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{2135AD0E-19D1-48CA-BA91-DFF060BDB769}", typeof(Guid))]
	[TemplateMapping("{2135AD0E-19D1-48CA-BA91-DFF060BDB769}")]
	public partial class FrequentlyAskedQuestion : CustomItemWrapper, IFrequentlyAskedQuestion
	{
		public FrequentlyAskedQuestion(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public FrequentlyAskedQuestion(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: AnswerText</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("answer_text")]
		public virtual ITextFieldWrapper AnswerText => this.GetField<TextFieldWrapper>("Answer Text");

		[IndexField("answer_text")]
 		public string AnswerTextValue => this.AnswerText.Value;

		/// <summary><para>Field: AnswerTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("answer_title")]
		public virtual ITextFieldWrapper AnswerTitle => this.GetField<TextFieldWrapper>("Answer Title");

		[IndexField("answer_title")]
 		public string AnswerTitleValue => this.AnswerTitle.Value;

		/// <summary><para>Field: Question</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("question")]
		public virtual ITextFieldWrapper Question => this.GetField<TextFieldWrapper>("Question");

		[IndexField("question")]
 		public string QuestionValue => this.Question.Value;
	}
}
#endregion
#region Contact Folder (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Contact Folder</para><para>ID: {8D663B9D-53AC-412C-B158-9E15BC1EBB94}</para><para>/sitecore/templates/User Defined/Shared/Content/Contacts/Contact Folder</para></summary>
	[TemplateMapping("{8D663B9D-53AC-412C-B158-9E15BC1EBB94}", "InterfaceMap")]
	public partial interface IContactFolder :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteFolder,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{8D663B9D-53AC-412C-B158-9E15BC1EBB94}", typeof(Guid))]
	[TemplateMapping("{8D663B9D-53AC-412C-B158-9E15BC1EBB94}")]
	public partial class ContactFolder : CustomItemWrapper, IContactFolder
	{
		public ContactFolder(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public ContactFolder(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }
	}
}
#endregion
#region Contact (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Contact</para><para>ID: {2FF0C7E4-0861-4B3B-8B28-5EF49009293A}</para><para>/sitecore/templates/User Defined/Shared/Content/Contacts/Contact</para></summary>
	[TemplateMapping("{2FF0C7E4-0861-4B3B-8B28-5EF49009293A}", "InterfaceMap")]
	public partial interface IContact :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{

    	/// <summary><para>Template: Contact</para><para>Field: Contact Email</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("contact_email")]
		ITextFieldWrapper ContactEmail { get; }

    	/// <summary><para>Template: Contact</para><para>Field: Contact Email</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("contact_email")]
		string ContactEmailValue { get; }

    	/// <summary><para>Template: Contact</para><para>Field: Contact Group</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("contact_group")]
		ITextFieldWrapper ContactGroup { get; }

    	/// <summary><para>Template: Contact</para><para>Field: Contact Group</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("contact_group")]
		string ContactGroupValue { get; }

    	/// <summary><para>Template: Contact</para><para>Field: Contact Name</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("contact_name")]
		ITextFieldWrapper ContactName { get; }

    	/// <summary><para>Template: Contact</para><para>Field: Contact Name</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("contact_name")]
		string ContactNameValue { get; }

    	/// <summary><para>Template: Contact</para><para>Field: Contact Telephone Number</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("contact_telephone_number")]
		ITextFieldWrapper ContactTelephoneNumber { get; }

    	/// <summary><para>Template: Contact</para><para>Field: Contact Telephone Number</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("contact_telephone_number")]
		string ContactTelephoneNumberValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{2FF0C7E4-0861-4B3B-8B28-5EF49009293A}", typeof(Guid))]
	[TemplateMapping("{2FF0C7E4-0861-4B3B-8B28-5EF49009293A}")]
	public partial class Contact : CustomItemWrapper, IContact
	{
		public Contact(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public Contact(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: ContactEmail</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("contact_email")]
		public virtual ITextFieldWrapper ContactEmail => this.GetField<TextFieldWrapper>("Contact Email");

		[IndexField("contact_email")]
 		public string ContactEmailValue => this.ContactEmail.Value;

		/// <summary><para>Field: ContactGroup</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("contact_group")]
		public virtual ITextFieldWrapper ContactGroup => this.GetField<TextFieldWrapper>("Contact Group");

		[IndexField("contact_group")]
 		public string ContactGroupValue => this.ContactGroup.Value;

		/// <summary><para>Field: ContactName</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("contact_name")]
		public virtual ITextFieldWrapper ContactName => this.GetField<TextFieldWrapper>("Contact Name");

		[IndexField("contact_name")]
 		public string ContactNameValue => this.ContactName.Value;

		/// <summary><para>Field: ContactTelephoneNumber</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("contact_telephone_number")]
		public virtual ITextFieldWrapper ContactTelephoneNumber => this.GetField<TextFieldWrapper>("Contact Telephone Number");

		[IndexField("contact_telephone_number")]
 		public string ContactTelephoneNumberValue => this.ContactTelephoneNumber.Value;
	}
}
#endregion
#region Contact List Rendering Parameters (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary>
	/// <para>Template: Contact List Rendering Parameters</para>
	/// <para>ID: {0A0E1698-EE32-490E-B248-59676C02B463}</para>
	/// <para>/sitecore/templates/User Defined/Shared/Content/Contacts/Rendering Parameters/Contact List Rendering Parameters</para>
	/// </summary>
	[TemplateMapping("{0A0E1698-EE32-490E-B248-59676C02B463}", "InterfaceRenderingParameterMap")]
	public partial interface IContactListRenderingParameters :
		IRenderingParameterWrapper,
		LM.Model.Templates.Ignite.IIgniteRenderingParameters	{
    	/// <summary><para>Template: Contact List Rendering Parameters</para><para>Field: Title Text</para><para>Data type: Droptree</para></summary>
		ILinkFieldWrapper TitleText { get; }
	}
	
	[TemplateMapping("{0A0E1698-EE32-490E-B248-59676C02B463}", "RenderingParameter")]
	public partial class ContactListRenderingParameters : RenderingParameterWrapper, IContactListRenderingParameters
	{
		public ContactListRenderingParameters(Dictionary<string, string> parameters, ISpawnProvider spawnProvider)
			: base(parameters, spawnProvider)
		{ }

		/// <summary><para>Field: TitleText</para><para>Data type: Droptree</para></summary>
		public virtual ILinkFieldWrapper TitleText => (Fortis.Model.RenderingParameters.Fields.LinkFieldWrapper)this.GetField("Title Text", "droptree");
	
	}
}
#endregion
#region Content (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Content</para><para>ID: {E9828587-24E6-478B-8778-C36FCC93C062}</para><para>/sitecore/templates/User Defined/Shared/Content/Content</para></summary>
	[TemplateMapping("{E9828587-24E6-478B-8778-C36FCC93C062}", "InterfaceMap")]
	public partial interface IContent :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{

    	/// <summary><para>Template: Content</para><para>Field: Content Body</para><para>Data type: Rich Text</para></summary>
		[IndexField("content_body")]
		IRichTextFieldWrapper ContentBody { get; }

    	/// <summary><para>Template: Content</para><para>Field: Content Body</para><para>Data type: Rich Text</para></summary>
		[IndexField("content_body")]
		string ContentBodyValue { get; }

    	/// <summary><para>Template: Content</para><para>Field: Page Summary</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("page_summary")]
		ITextFieldWrapper PageSummary { get; }

    	/// <summary><para>Template: Content</para><para>Field: Page Summary</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("page_summary")]
		string PageSummaryValue { get; }

    	/// <summary><para>Template: Content</para><para>Field: Page Title</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("page_title")]
		ITextFieldWrapper PageTitle { get; }

    	/// <summary><para>Template: Content</para><para>Field: Page Title</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("page_title")]
		string PageTitleValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{E9828587-24E6-478B-8778-C36FCC93C062}", typeof(Guid))]
	[TemplateMapping("{E9828587-24E6-478B-8778-C36FCC93C062}")]
	public partial class Content : CustomItemWrapper, IContent
	{
		public Content(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public Content(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: ContentBody</para><para>Data type: Rich Text</para></summary>
		[IndexField("content_body")]
		public virtual IRichTextFieldWrapper ContentBody => this.GetField<RichTextFieldWrapper>("Content Body");

		[IndexField("content_body")]
 		public string ContentBodyValue => this.ContentBody.Value;

		/// <summary><para>Field: PageSummary</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("page_summary")]
		public virtual ITextFieldWrapper PageSummary => this.GetField<TextFieldWrapper>("Page Summary");

		[IndexField("page_summary")]
 		public string PageSummaryValue => this.PageSummary.Value;

		/// <summary><para>Field: PageTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("page_title")]
		public virtual ITextFieldWrapper PageTitle => this.GetField<TextFieldWrapper>("Page Title");

		[IndexField("page_title")]
 		public string PageTitleValue => this.PageTitle.Value;
	}
}
#endregion
#region Control Panel Content Folder (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Control Panel Content Folder</para><para>ID: {F55E518E-636F-4661-A10C-FA237E8A4564}</para><para>/sitecore/templates/User Defined/Shared/Content/Control Panel Content Folder</para></summary>
	[TemplateMapping("{F55E518E-636F-4661-A10C-FA237E8A4564}", "InterfaceMap")]
	public partial interface IControlPanelContentFolder :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteFolder,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.Ignite.ILocalContentFolder
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{F55E518E-636F-4661-A10C-FA237E8A4564}", typeof(Guid))]
	[TemplateMapping("{F55E518E-636F-4661-A10C-FA237E8A4564}")]
	public partial class ControlPanelContentFolder : CustomItemWrapper, IControlPanelContentFolder
	{
		public ControlPanelContentFolder(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public ControlPanelContentFolder(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }
	}
}
#endregion
#region Control Panel Content (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Control Panel Content</para><para>ID: {965A6A30-1DDB-423B-8D77-C4630EC3A497}</para><para>/sitecore/templates/User Defined/Shared/Content/Control Panel Content</para></summary>
	[TemplateMapping("{965A6A30-1DDB-423B-8D77-C4630EC3A497}", "InterfaceMap")]
	public partial interface IControlPanelContent :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{

    	/// <summary><para>Template: Control Panel Content</para><para>Field: Alert Icon</para><para>Data type: Droplist</para></summary>
		ITextFieldWrapper AlertIcon { get; }

    	/// <summary><para>Template: Control Panel Content</para><para>Field: Alert Icon</para><para>Data type: Droplist</para></summary>
		string AlertIconValue { get; }

    	/// <summary><para>Template: Control Panel Content</para><para>Field: Alert Link</para><para>Data type: General Link</para></summary>
		[IndexField("alert_link")]
		IGeneralLinkFieldWrapper AlertLink { get; }

    	/// <summary><para>Template: Control Panel Content</para><para>Field: Alert Link</para><para>Data type: General Link</para></summary>
		[IndexField("alert_link")]
		string AlertLinkValue { get; }

    	/// <summary><para>Template: Control Panel Content</para><para>Field: Alert Link Text</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("alert_link_text")]
		ITextFieldWrapper AlertLinkText { get; }

    	/// <summary><para>Template: Control Panel Content</para><para>Field: Alert Link Text</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("alert_link_text")]
		string AlertLinkTextValue { get; }

    	/// <summary><para>Template: Control Panel Content</para><para>Field: Alert Text</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("alert_text")]
		ITextFieldWrapper AlertText { get; }

    	/// <summary><para>Template: Control Panel Content</para><para>Field: Alert Text</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("alert_text")]
		string AlertTextValue { get; }

    	/// <summary><para>Template: Control Panel Content</para><para>Field: Alert Title</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("alert_title")]
		ITextFieldWrapper AlertTitle { get; }

    	/// <summary><para>Template: Control Panel Content</para><para>Field: Alert Title</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("alert_title")]
		string AlertTitleValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{965A6A30-1DDB-423B-8D77-C4630EC3A497}", typeof(Guid))]
	[TemplateMapping("{965A6A30-1DDB-423B-8D77-C4630EC3A497}")]
	public partial class ControlPanelContent : CustomItemWrapper, IControlPanelContent
	{
		public ControlPanelContent(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public ControlPanelContent(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: AlertIcon</para><para>Data type: Droplist</para></summary>
		public virtual ITextFieldWrapper AlertIcon => this.GetField<TextFieldWrapper>("Alert Icon");

 		public string AlertIconValue => this.AlertIcon.Value;

		/// <summary><para>Field: AlertLink</para><para>Data type: General Link</para></summary>
		[IndexField("alert_link")]
		public virtual IGeneralLinkFieldWrapper AlertLink => this.GetField<GeneralLinkFieldWrapper>("Alert Link");

		[IndexField("alert_link")]
 		public string AlertLinkValue => this.AlertLink.Value;

		/// <summary><para>Field: AlertLinkText</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("alert_link_text")]
		public virtual ITextFieldWrapper AlertLinkText => this.GetField<TextFieldWrapper>("Alert Link Text");

		[IndexField("alert_link_text")]
 		public string AlertLinkTextValue => this.AlertLinkText.Value;

		/// <summary><para>Field: AlertText</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("alert_text")]
		public virtual ITextFieldWrapper AlertText => this.GetField<TextFieldWrapper>("Alert Text");

		[IndexField("alert_text")]
 		public string AlertTextValue => this.AlertText.Value;

		/// <summary><para>Field: AlertTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("alert_title")]
		public virtual ITextFieldWrapper AlertTitle => this.GetField<TextFieldWrapper>("Alert Title");

		[IndexField("alert_title")]
 		public string AlertTitleValue => this.AlertTitle.Value;
	}
}
#endregion
#region Hero (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Hero</para><para>ID: {B19B286C-16CE-4A39-84DE-D77EA0441B4F}</para><para>/sitecore/templates/User Defined/Shared/Content/Hero</para></summary>
	[TemplateMapping("{B19B286C-16CE-4A39-84DE-D77EA0441B4F}", "InterfaceMap")]
	public partial interface IHero :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{

    	/// <summary><para>Template: Hero</para><para>Field: Hero Image</para><para>Data type: Image</para></summary>
		IImageFieldWrapper HeroImage { get; }

    	/// <summary><para>Template: Hero</para><para>Field: Hero Image</para><para>Data type: Image</para></summary>
		string HeroImageValue { get; }

    	/// <summary><para>Template: Hero</para><para>Field: Hero Video</para><para>Data type: Multilist with Search</para></summary>
		[IndexField("hero_video")]
		IListFieldWrapper HeroVideo { get; }

    	/// <summary><para>Template: Hero</para><para>Field: Hero Video</para><para>Data type: Multilist with Search</para></summary>
		[IndexField("hero_video")]
		IEnumerable<Guid> HeroVideoValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{B19B286C-16CE-4A39-84DE-D77EA0441B4F}", typeof(Guid))]
	[TemplateMapping("{B19B286C-16CE-4A39-84DE-D77EA0441B4F}")]
	public partial class Hero : CustomItemWrapper, IHero
	{
		public Hero(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public Hero(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: HeroImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper HeroImage => this.GetField<ImageFieldWrapper>("Hero Image");

 		public string HeroImageValue => this.HeroImage.Value;

		/// <summary><para>Field: HeroVideo</para><para>Data type: Multilist with Search</para></summary>
		[IndexField("hero_video")]
		public virtual IListFieldWrapper HeroVideo => this.GetField<ListFieldWrapper>("Hero Video");

		[IndexField("hero_video")]
 		public IEnumerable<Guid> HeroVideoValue => this.HeroVideo.Value;
	}
}
#endregion
#region Lookup Folder (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Lookup Folder</para><para>ID: {2A757A67-4F93-4D03-8C63-18EB2E9C194A}</para><para>/sitecore/templates/User Defined/Shared/Content/Lookup Folder</para></summary>
	[TemplateMapping("{2A757A67-4F93-4D03-8C63-18EB2E9C194A}", "InterfaceMap")]
	public partial interface ILookupFolder :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteFolder,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{2A757A67-4F93-4D03-8C63-18EB2E9C194A}", typeof(Guid))]
	[TemplateMapping("{2A757A67-4F93-4D03-8C63-18EB2E9C194A}")]
	public partial class LookupFolder : CustomItemWrapper, ILookupFolder
	{
		public LookupFolder(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public LookupFolder(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }
	}
}
#endregion
#region Lookup Item (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Lookup Item</para><para>ID: {E81F2FC8-28BE-4D75-B6B5-194807D3DA00}</para><para>/sitecore/templates/User Defined/Shared/Content/Lookup Item</para></summary>
	[TemplateMapping("{E81F2FC8-28BE-4D75-B6B5-194807D3DA00}", "InterfaceMap")]
	public partial interface ILookupItem :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{

    	/// <summary><para>Template: Lookup Item</para><para>Field: Text Value</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("text_value")]
		ITextFieldWrapper TextValue { get; }

    	/// <summary><para>Template: Lookup Item</para><para>Field: Text Value</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("text_value")]
		string TextValueValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{E81F2FC8-28BE-4D75-B6B5-194807D3DA00}", typeof(Guid))]
	[TemplateMapping("{E81F2FC8-28BE-4D75-B6B5-194807D3DA00}")]
	public partial class LookupItem : CustomItemWrapper, ILookupItem
	{
		public LookupItem(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public LookupItem(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: TextValue</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("text_value")]
		public virtual ITextFieldWrapper TextValue => this.GetField<TextFieldWrapper>("Text Value");

		[IndexField("text_value")]
 		public string TextValueValue => this.TextValue.Value;
	}
}
#endregion
#region Executive (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Executive</para><para>ID: {9A1530D0-1EBC-4D84-A32F-68B928255064}</para><para>/sitecore/templates/User Defined/Shared/Executives/Executive</para></summary>
	[TemplateMapping("{9A1530D0-1EBC-4D84-A32F-68B928255064}", "InterfaceMap")]
	public partial interface IExecutive :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{

    	/// <summary><para>Template: Executive</para><para>Field: Bio</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("bio")]
		ITextFieldWrapper Bio { get; }

    	/// <summary><para>Template: Executive</para><para>Field: Bio</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("bio")]
		string BioValue { get; }

    	/// <summary><para>Template: Executive</para><para>Field: Bio Introduction</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("bio_introduction")]
		ITextFieldWrapper BioIntroduction { get; }

    	/// <summary><para>Template: Executive</para><para>Field: Bio Introduction</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("bio_introduction")]
		string BioIntroductionValue { get; }

    	/// <summary><para>Template: Executive</para><para>Field: Full Name</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("full_name")]
		ITextFieldWrapper FullName { get; }

    	/// <summary><para>Template: Executive</para><para>Field: Full Name</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("full_name")]
		string FullNameValue { get; }

    	/// <summary><para>Template: Executive</para><para>Field: Headshot</para><para>Data type: Image</para></summary>
		IImageFieldWrapper Headshot { get; }

    	/// <summary><para>Template: Executive</para><para>Field: Headshot</para><para>Data type: Image</para></summary>
		string HeadshotValue { get; }

    	/// <summary><para>Template: Executive</para><para>Field: Position</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("position")]
		ITextFieldWrapper Position { get; }

    	/// <summary><para>Template: Executive</para><para>Field: Position</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("position")]
		string PositionValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{9A1530D0-1EBC-4D84-A32F-68B928255064}", typeof(Guid))]
	[TemplateMapping("{9A1530D0-1EBC-4D84-A32F-68B928255064}")]
	public partial class Executive : CustomItemWrapper, IExecutive
	{
		public Executive(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public Executive(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: Bio</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("bio")]
		public virtual ITextFieldWrapper Bio => this.GetField<TextFieldWrapper>("Bio");

		[IndexField("bio")]
 		public string BioValue => this.Bio.Value;

		/// <summary><para>Field: BioIntroduction</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("bio_introduction")]
		public virtual ITextFieldWrapper BioIntroduction => this.GetField<TextFieldWrapper>("Bio Introduction");

		[IndexField("bio_introduction")]
 		public string BioIntroductionValue => this.BioIntroduction.Value;

		/// <summary><para>Field: FullName</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("full_name")]
		public virtual ITextFieldWrapper FullName => this.GetField<TextFieldWrapper>("Full Name");

		[IndexField("full_name")]
 		public string FullNameValue => this.FullName.Value;

		/// <summary><para>Field: Headshot</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper Headshot => this.GetField<ImageFieldWrapper>("Headshot");

 		public string HeadshotValue => this.Headshot.Value;

		/// <summary><para>Field: Position</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("position")]
		public virtual ITextFieldWrapper Position => this.GetField<TextFieldWrapper>("Position");

		[IndexField("position")]
 		public string PositionValue => this.Position.Value;
	}
}
#endregion
#region Executive List Rendering Parameters (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary>
	/// <para>Template: Executive List Rendering Parameters</para>
	/// <para>ID: {09AC4ACA-6265-4402-B650-7A23EF886F1E}</para>
	/// <para>/sitecore/templates/User Defined/Shared/Executives/Rendering Parameters/Executive List Rendering Parameters</para>
	/// </summary>
	[TemplateMapping("{09AC4ACA-6265-4402-B650-7A23EF886F1E}", "InterfaceRenderingParameterMap")]
	public partial interface IExecutiveListRenderingParameters :
		IRenderingParameterWrapper,
		LM.Model.Templates.Ignite.IIgniteRenderingParameters	{
    	/// <summary><para>Template: Executive List Rendering Parameters</para><para>Field: Hide Full Bio Label</para><para>Data type: Droptree</para></summary>
		ILinkFieldWrapper HideFullBioLabel { get; }
    	/// <summary><para>Template: Executive List Rendering Parameters</para><para>Field: Read Full Bio Label</para><para>Data type: Droptree</para></summary>
		ILinkFieldWrapper ReadFullBioLabel { get; }
	}
	
	[TemplateMapping("{09AC4ACA-6265-4402-B650-7A23EF886F1E}", "RenderingParameter")]
	public partial class ExecutiveListRenderingParameters : RenderingParameterWrapper, IExecutiveListRenderingParameters
	{
		public ExecutiveListRenderingParameters(Dictionary<string, string> parameters, ISpawnProvider spawnProvider)
			: base(parameters, spawnProvider)
		{ }

		/// <summary><para>Field: HideFullBioLabel</para><para>Data type: Droptree</para></summary>
		public virtual ILinkFieldWrapper HideFullBioLabel => (Fortis.Model.RenderingParameters.Fields.LinkFieldWrapper)this.GetField("Hide Full Bio Label", "droptree");

		/// <summary><para>Field: ReadFullBioLabel</para><para>Data type: Droptree</para></summary>
		public virtual ILinkFieldWrapper ReadFullBioLabel => (Fortis.Model.RenderingParameters.Fields.LinkFieldWrapper)this.GetField("Read Full Bio Label", "droptree");
	
	}
}
#endregion
#region TwoColumnFrameOptions (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary>
	/// <para>Template: TwoColumnFrameOptions</para>
	/// <para>ID: {1895D4E1-A83A-49F6-A78B-9C1BCE9F3D52}</para>
	/// <para>/sitecore/templates/User Defined/Shared/Frames/Rendering Parameters/TwoColumnFrameOptions</para>
	/// </summary>
	[TemplateMapping("{1895D4E1-A83A-49F6-A78B-9C1BCE9F3D52}", "InterfaceRenderingParameterMap")]
	public partial interface ITwoColumnFrameOptions :
		IRenderingParameterWrapper,
		LM.Model.Templates.Ignite.IIgniteRenderingParameters	{
    	/// <summary><para>Template: TwoColumnFrameOptions</para><para>Field: Column Style</para><para>Data type: Droplist</para></summary>
		ITextFieldWrapper ColumnStyle { get; }
	}
	
	[TemplateMapping("{1895D4E1-A83A-49F6-A78B-9C1BCE9F3D52}", "RenderingParameter")]
	public partial class TwoColumnFrameOptions : RenderingParameterWrapper, ITwoColumnFrameOptions
	{
		public TwoColumnFrameOptions(Dictionary<string, string> parameters, ISpawnProvider spawnProvider)
			: base(parameters, spawnProvider)
		{ }

		/// <summary><para>Field: ColumnStyle</para><para>Data type: Droplist</para></summary>
		public virtual ITextFieldWrapper ColumnStyle => (Fortis.Model.RenderingParameters.Fields.TextFieldWrapper)this.GetField("Column Style", "droplist");
	
	}
}
#endregion
#region Banner CTA (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Banner CTA</para><para>ID: {FC95C32F-84E4-4A4D-A501-342D26B86B25}</para><para>/sitecore/templates/User Defined/Shared/Marketing/CTAs/Banner CTA</para></summary>
	[TemplateMapping("{FC95C32F-84E4-4A4D-A501-342D26B86B25}", "InterfaceMap")]
	public partial interface IBannerCTA :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.PokerCentral.IBaseCTA
	{

    	/// <summary><para>Template: Banner CTA</para><para>Field: CTA Body</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("cta_body")]
		ITextFieldWrapper CTABody { get; }

    	/// <summary><para>Template: Banner CTA</para><para>Field: CTA Body</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("cta_body")]
		string CTABodyValue { get; }

    	/// <summary><para>Template: Banner CTA</para><para>Field: CTA Title</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("cta_title")]
		ITextFieldWrapper CTATitle { get; }

    	/// <summary><para>Template: Banner CTA</para><para>Field: CTA Title</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("cta_title")]
		string CTATitleValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{FC95C32F-84E4-4A4D-A501-342D26B86B25}", typeof(Guid))]
	[TemplateMapping("{FC95C32F-84E4-4A4D-A501-342D26B86B25}")]
	public partial class BannerCTA : CustomItemWrapper, IBannerCTA
	{
		public BannerCTA(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public BannerCTA(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: CTABody</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("cta_body")]
		public virtual ITextFieldWrapper CTABody => this.GetField<TextFieldWrapper>("CTA Body");

		[IndexField("cta_body")]
 		public string CTABodyValue => this.CTABody.Value;

		/// <summary><para>Field: CTALink</para><para>Data type: General Link</para></summary>
		[IndexField("cta_link")]
		public virtual IGeneralLinkFieldWrapper CTALink => this.GetField<GeneralLinkFieldWrapper>("CTA Link");

		[IndexField("cta_link")]
 		public string CTALinkValue => this.CTALink.Value;

		/// <summary><para>Field: CTAText</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("cta_text")]
		public virtual ITextFieldWrapper CTAText => this.GetField<TextFieldWrapper>("CTA Text");

		[IndexField("cta_text")]
 		public string CTATextValue => this.CTAText.Value;

		/// <summary><para>Field: CTATitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("cta_title")]
		public virtual ITextFieldWrapper CTATitle => this.GetField<TextFieldWrapper>("CTA Title");

		[IndexField("cta_title")]
 		public string CTATitleValue => this.CTATitle.Value;
	}
}
#endregion
#region Base CTA (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Base CTA</para><para>ID: {BB67FE5B-450A-41ED-9743-79B35DA559F2}</para><para>/sitecore/templates/User Defined/Shared/Marketing/CTAs/Base CTA</para></summary>
	[TemplateMapping("{BB67FE5B-450A-41ED-9743-79B35DA559F2}", "InterfaceMap")]
	public partial interface IBaseCTA :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{

    	/// <summary><para>Template: Base CTA</para><para>Field: CTA Link</para><para>Data type: General Link</para></summary>
		[IndexField("cta_link")]
		IGeneralLinkFieldWrapper CTALink { get; }

    	/// <summary><para>Template: Base CTA</para><para>Field: CTA Link</para><para>Data type: General Link</para></summary>
		[IndexField("cta_link")]
		string CTALinkValue { get; }

    	/// <summary><para>Template: Base CTA</para><para>Field: CTA Text</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("cta_text")]
		ITextFieldWrapper CTAText { get; }

    	/// <summary><para>Template: Base CTA</para><para>Field: CTA Text</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("cta_text")]
		string CTATextValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{BB67FE5B-450A-41ED-9743-79B35DA559F2}", typeof(Guid))]
	[TemplateMapping("{BB67FE5B-450A-41ED-9743-79B35DA559F2}")]
	public partial class BaseCTA : CustomItemWrapper, IBaseCTA
	{
		public BaseCTA(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public BaseCTA(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: CTALink</para><para>Data type: General Link</para></summary>
		[IndexField("cta_link")]
		public virtual IGeneralLinkFieldWrapper CTALink => this.GetField<GeneralLinkFieldWrapper>("CTA Link");

		[IndexField("cta_link")]
 		public string CTALinkValue => this.CTALink.Value;

		/// <summary><para>Field: CTAText</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("cta_text")]
		public virtual ITextFieldWrapper CTAText => this.GetField<TextFieldWrapper>("CTA Text");

		[IndexField("cta_text")]
 		public string CTATextValue => this.CTAText.Value;
	}
}
#endregion
#region CTA Folder (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: CTA Folder</para><para>ID: {D59ADF75-E047-4BBF-8E76-8B9DD733C1EC}</para><para>/sitecore/templates/User Defined/Shared/Marketing/CTAs/CTA Folder</para></summary>
	[TemplateMapping("{D59ADF75-E047-4BBF-8E76-8B9DD733C1EC}", "InterfaceMap")]
	public partial interface ICTAFolder :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteFolder,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{D59ADF75-E047-4BBF-8E76-8B9DD733C1EC}", typeof(Guid))]
	[TemplateMapping("{D59ADF75-E047-4BBF-8E76-8B9DD733C1EC}")]
	public partial class CTAFolder : CustomItemWrapper, ICTAFolder
	{
		public CTAFolder(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public CTAFolder(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }
	}
}
#endregion
#region CTA Row (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: CTA Row</para><para>ID: {F21CA029-879E-4CD9-A5DB-C5D2D66DAAC5}</para><para>/sitecore/templates/User Defined/Shared/Marketing/CTAs/CTA Row</para></summary>
	[TemplateMapping("{F21CA029-879E-4CD9-A5DB-C5D2D66DAAC5}", "InterfaceMap")]
	public partial interface ICTARow :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{

    	/// <summary><para>Template: CTA Row</para><para>Field: Selected CTAs</para><para>Data type: TreelistEx</para></summary>
		[IndexField("selected_ctas")]
		IListFieldWrapper SelectedCTAs { get; }

    	/// <summary><para>Template: CTA Row</para><para>Field: Selected CTAs</para><para>Data type: TreelistEx</para></summary>
		[IndexField("selected_ctas")]
		IEnumerable<Guid> SelectedCTAsValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{F21CA029-879E-4CD9-A5DB-C5D2D66DAAC5}", typeof(Guid))]
	[TemplateMapping("{F21CA029-879E-4CD9-A5DB-C5D2D66DAAC5}")]
	public partial class CTARow : CustomItemWrapper, ICTARow
	{
		public CTARow(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public CTARow(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: SelectedCTAs</para><para>Data type: TreelistEx</para></summary>
		[IndexField("selected_ctas")]
		public virtual IListFieldWrapper SelectedCTAs => this.GetField<ListFieldWrapper>("Selected CTAs");

		[IndexField("selected_ctas")]
 		public IEnumerable<Guid> SelectedCTAsValue => this.SelectedCTAs.Value;
	}
}
#endregion
#region Image CTA (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Image CTA</para><para>ID: {4DFB45D4-7AB7-4A74-803D-C00917E65219}</para><para>/sitecore/templates/User Defined/Shared/Marketing/CTAs/Image CTA</para></summary>
	[TemplateMapping("{4DFB45D4-7AB7-4A74-803D-C00917E65219}", "InterfaceMap")]
	public partial interface IImageCTA :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.PokerCentral.IBaseCTA
	{

    	/// <summary><para>Template: Image CTA</para><para>Field: CTA Image</para><para>Data type: Image</para></summary>
		IImageFieldWrapper CTAImage { get; }

    	/// <summary><para>Template: Image CTA</para><para>Field: CTA Image</para><para>Data type: Image</para></summary>
		string CTAImageValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{4DFB45D4-7AB7-4A74-803D-C00917E65219}", typeof(Guid))]
	[TemplateMapping("{4DFB45D4-7AB7-4A74-803D-C00917E65219}")]
	public partial class ImageCTA : CustomItemWrapper, IImageCTA
	{
		public ImageCTA(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public ImageCTA(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: CTAImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper CTAImage => this.GetField<ImageFieldWrapper>("CTA Image");

 		public string CTAImageValue => this.CTAImage.Value;

		/// <summary><para>Field: CTALink</para><para>Data type: General Link</para></summary>
		[IndexField("cta_link")]
		public virtual IGeneralLinkFieldWrapper CTALink => this.GetField<GeneralLinkFieldWrapper>("CTA Link");

		[IndexField("cta_link")]
 		public string CTALinkValue => this.CTALink.Value;

		/// <summary><para>Field: CTAText</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("cta_text")]
		public virtual ITextFieldWrapper CTAText => this.GetField<TextFieldWrapper>("CTA Text");

		[IndexField("cta_text")]
 		public string CTATextValue => this.CTAText.Value;
	}
}
#endregion
#region Base Slide (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Base Slide</para><para>ID: {88790B8F-3A30-49D0-B57D-0E9EABCDFD0C}</para><para>/sitecore/templates/User Defined/Shared/Marketing/Featured Slider/Base Slide</para></summary>
	[TemplateMapping("{88790B8F-3A30-49D0-B57D-0E9EABCDFD0C}", "InterfaceMap")]
	public partial interface IBaseSlide :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{

    	/// <summary><para>Template: Base Slide</para><para>Field: Background Image</para><para>Data type: Image</para></summary>
		IImageFieldWrapper BackgroundImage { get; }

    	/// <summary><para>Template: Base Slide</para><para>Field: Background Image</para><para>Data type: Image</para></summary>
		string BackgroundImageValue { get; }

    	/// <summary><para>Template: Base Slide</para><para>Field: Background Image Mobile</para><para>Data type: Image</para></summary>
		IImageFieldWrapper BackgroundImageMobile { get; }

    	/// <summary><para>Template: Base Slide</para><para>Field: Background Image Mobile</para><para>Data type: Image</para></summary>
		string BackgroundImageMobileValue { get; }

    	/// <summary><para>Template: Base Slide</para><para>Field: CTA Text</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("cta_text")]
		ITextFieldWrapper CTAText { get; }

    	/// <summary><para>Template: Base Slide</para><para>Field: CTA Text</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("cta_text")]
		string CTATextValue { get; }

    	/// <summary><para>Template: Base Slide</para><para>Field: Slide Description</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("slide_description")]
		ITextFieldWrapper SlideDescription { get; }

    	/// <summary><para>Template: Base Slide</para><para>Field: Slide Description</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("slide_description")]
		string SlideDescriptionValue { get; }

    	/// <summary><para>Template: Base Slide</para><para>Field: Slide Title</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("slide_title")]
		ITextFieldWrapper SlideTitle { get; }

    	/// <summary><para>Template: Base Slide</para><para>Field: Slide Title</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("slide_title")]
		string SlideTitleValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{88790B8F-3A30-49D0-B57D-0E9EABCDFD0C}", typeof(Guid))]
	[TemplateMapping("{88790B8F-3A30-49D0-B57D-0E9EABCDFD0C}")]
	public partial class BaseSlide : CustomItemWrapper, IBaseSlide
	{
		public BaseSlide(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public BaseSlide(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: BackgroundImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper BackgroundImage => this.GetField<ImageFieldWrapper>("Background Image");

 		public string BackgroundImageValue => this.BackgroundImage.Value;

		/// <summary><para>Field: BackgroundImageMobile</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper BackgroundImageMobile => this.GetField<ImageFieldWrapper>("Background Image Mobile");

 		public string BackgroundImageMobileValue => this.BackgroundImageMobile.Value;

		/// <summary><para>Field: CTAText</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("cta_text")]
		public virtual ITextFieldWrapper CTAText => this.GetField<TextFieldWrapper>("CTA Text");

		[IndexField("cta_text")]
 		public string CTATextValue => this.CTAText.Value;

		/// <summary><para>Field: SlideDescription</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("slide_description")]
		public virtual ITextFieldWrapper SlideDescription => this.GetField<TextFieldWrapper>("Slide Description");

		[IndexField("slide_description")]
 		public string SlideDescriptionValue => this.SlideDescription.Value;

		/// <summary><para>Field: SlideTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("slide_title")]
		public virtual ITextFieldWrapper SlideTitle => this.GetField<TextFieldWrapper>("Slide Title");

		[IndexField("slide_title")]
 		public string SlideTitleValue => this.SlideTitle.Value;
	}
}
#endregion
#region Featured Silder (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Featured Silder</para><para>ID: {16469485-E00C-4470-A458-931D92E0552E}</para><para>/sitecore/templates/User Defined/Shared/Marketing/Featured Slider/Featured Silder</para></summary>
	[TemplateMapping("{16469485-E00C-4470-A458-931D92E0552E}", "InterfaceMap")]
	public partial interface IFeaturedSilder :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{16469485-E00C-4470-A458-931D92E0552E}", typeof(Guid))]
	[TemplateMapping("{16469485-E00C-4470-A458-931D92E0552E}")]
	public partial class FeaturedSilder : CustomItemWrapper, IFeaturedSilder
	{
		public FeaturedSilder(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public FeaturedSilder(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }
	}
}
#endregion
#region Internal Link Slide (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Internal Link Slide</para><para>ID: {33360066-FE38-47DC-ACDD-A3688E67E285}</para><para>/sitecore/templates/User Defined/Shared/Marketing/Featured Slider/Internal Link Slide</para></summary>
	[TemplateMapping("{33360066-FE38-47DC-ACDD-A3688E67E285}", "InterfaceMap")]
	public partial interface IInternalLinkSlide :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.PokerCentral.IBaseSlide
	{

    	/// <summary><para>Template: Internal Link Slide</para><para>Field: CTA Link</para><para>Data type: General Link</para></summary>
		[IndexField("cta_link")]
		IGeneralLinkFieldWrapper CTALink { get; }

    	/// <summary><para>Template: Internal Link Slide</para><para>Field: CTA Link</para><para>Data type: General Link</para></summary>
		[IndexField("cta_link")]
		string CTALinkValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{33360066-FE38-47DC-ACDD-A3688E67E285}", typeof(Guid))]
	[TemplateMapping("{33360066-FE38-47DC-ACDD-A3688E67E285}")]
	public partial class InternalLinkSlide : CustomItemWrapper, IInternalLinkSlide
	{
		public InternalLinkSlide(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public InternalLinkSlide(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: BackgroundImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper BackgroundImage => this.GetField<ImageFieldWrapper>("Background Image");

 		public string BackgroundImageValue => this.BackgroundImage.Value;

		/// <summary><para>Field: BackgroundImageMobile</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper BackgroundImageMobile => this.GetField<ImageFieldWrapper>("Background Image Mobile");

 		public string BackgroundImageMobileValue => this.BackgroundImageMobile.Value;

		/// <summary><para>Field: CTALink</para><para>Data type: General Link</para></summary>
		[IndexField("cta_link")]
		public virtual IGeneralLinkFieldWrapper CTALink => this.GetField<GeneralLinkFieldWrapper>("CTA Link");

		[IndexField("cta_link")]
 		public string CTALinkValue => this.CTALink.Value;

		/// <summary><para>Field: CTAText</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("cta_text")]
		public virtual ITextFieldWrapper CTAText => this.GetField<TextFieldWrapper>("CTA Text");

		[IndexField("cta_text")]
 		public string CTATextValue => this.CTAText.Value;

		/// <summary><para>Field: SlideDescription</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("slide_description")]
		public virtual ITextFieldWrapper SlideDescription => this.GetField<TextFieldWrapper>("Slide Description");

		[IndexField("slide_description")]
 		public string SlideDescriptionValue => this.SlideDescription.Value;

		/// <summary><para>Field: SlideTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("slide_title")]
		public virtual ITextFieldWrapper SlideTitle => this.GetField<TextFieldWrapper>("Slide Title");

		[IndexField("slide_title")]
 		public string SlideTitleValue => this.SlideTitle.Value;
	}
}
#endregion
#region Video Slide (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Video Slide</para><para>ID: {2B677748-027F-4012-A817-C1034BF3F5E1}</para><para>/sitecore/templates/User Defined/Shared/Marketing/Featured Slider/Video Slide</para></summary>
	[TemplateMapping("{2B677748-027F-4012-A817-C1034BF3F5E1}", "InterfaceMap")]
	public partial interface IVideoSlide :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.PokerCentral.IBaseSlide
	{

    	/// <summary><para>Template: Video Slide</para><para>Field: CTA Video</para><para>Data type: Multilist with Search</para></summary>
		[IndexField("cta_video")]
		IListFieldWrapper CTAVideo { get; }

    	/// <summary><para>Template: Video Slide</para><para>Field: CTA Video</para><para>Data type: Multilist with Search</para></summary>
		[IndexField("cta_video")]
		IEnumerable<Guid> CTAVideoValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{2B677748-027F-4012-A817-C1034BF3F5E1}", typeof(Guid))]
	[TemplateMapping("{2B677748-027F-4012-A817-C1034BF3F5E1}")]
	public partial class VideoSlide : CustomItemWrapper, IVideoSlide
	{
		public VideoSlide(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public VideoSlide(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: BackgroundImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper BackgroundImage => this.GetField<ImageFieldWrapper>("Background Image");

 		public string BackgroundImageValue => this.BackgroundImage.Value;

		/// <summary><para>Field: BackgroundImageMobile</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper BackgroundImageMobile => this.GetField<ImageFieldWrapper>("Background Image Mobile");

 		public string BackgroundImageMobileValue => this.BackgroundImageMobile.Value;

		/// <summary><para>Field: CTAText</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("cta_text")]
		public virtual ITextFieldWrapper CTAText => this.GetField<TextFieldWrapper>("CTA Text");

		[IndexField("cta_text")]
 		public string CTATextValue => this.CTAText.Value;

		/// <summary><para>Field: CTAVideo</para><para>Data type: Multilist with Search</para></summary>
		[IndexField("cta_video")]
		public virtual IListFieldWrapper CTAVideo => this.GetField<ListFieldWrapper>("CTA Video");

		[IndexField("cta_video")]
 		public IEnumerable<Guid> CTAVideoValue => this.CTAVideo.Value;

		/// <summary><para>Field: SlideDescription</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("slide_description")]
		public virtual ITextFieldWrapper SlideDescription => this.GetField<TextFieldWrapper>("Slide Description");

		[IndexField("slide_description")]
 		public string SlideDescriptionValue => this.SlideDescription.Value;

		/// <summary><para>Field: SlideTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("slide_title")]
		public virtual ITextFieldWrapper SlideTitle => this.GetField<TextFieldWrapper>("Slide Title");

		[IndexField("slide_title")]
 		public string SlideTitleValue => this.SlideTitle.Value;
	}
}
#endregion
#region Sponsored Content Page (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Sponsored Content Page</para><para>ID: {F5DF1535-9CCE-4598-ABD1-82E79977BB44}</para><para>/sitecore/templates/User Defined/Shared/Marketing/Page Types/Sponsored Content Page</para></summary>
	[TemplateMapping("{F5DF1535-9CCE-4598-ABD1-82E79977BB44}", "InterfaceMap")]
	public partial interface ISponsoredContentPage :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.PokerCentral.IContentPage,
		LM.Model.Templates.PokerCentral.IContent,
		LM.Model.Templates.PokerCentral.ISponsors,
		LM.Model.Templates.PokerCentral.IAnalyticsTracking,
		LM.Model.Templates.PokerCentral.INavigation,
		LM.Model.Templates.PokerCentral.IMetaData
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{F5DF1535-9CCE-4598-ABD1-82E79977BB44}", typeof(Guid))]
	[TemplateMapping("{F5DF1535-9CCE-4598-ABD1-82E79977BB44}")]
	public partial class SponsoredContentPage : CustomItemWrapper, ISponsoredContentPage
	{
		public SponsoredContentPage(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public SponsoredContentPage(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: ContentBody</para><para>Data type: Rich Text</para></summary>
		[IndexField("content_body")]
		public virtual IRichTextFieldWrapper ContentBody => this.GetField<RichTextFieldWrapper>("Content Body");

		[IndexField("content_body")]
 		public string ContentBodyValue => this.ContentBody.Value;

		/// <summary><para>Field: HideFromMenu</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_menu")]
		public virtual IBooleanFieldWrapper HideFromMenu => this.GetField<BooleanFieldWrapper>("Hide From Menu");

		[IndexField("hide_from_menu")]
 		public bool HideFromMenuValue => this.HideFromMenu.Value;

		/// <summary><para>Field: HideFromSitemap</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_sitemap")]
		public virtual IBooleanFieldWrapper HideFromSitemap => this.GetField<BooleanFieldWrapper>("Hide from Sitemap");

		[IndexField("hide_from_sitemap")]
 		public bool HideFromSitemapValue => this.HideFromSitemap.Value;

		/// <summary><para>Field: MetaCanonicalUrl</para><para>Data type: General Link</para></summary>
		[IndexField("meta_canonical_url")]
		public virtual IGeneralLinkFieldWrapper MetaCanonicalUrl => this.GetField<GeneralLinkFieldWrapper>("Meta Canonical Url");

		[IndexField("meta_canonical_url")]
 		public string MetaCanonicalUrlValue => this.MetaCanonicalUrl.Value;

		/// <summary><para>Field: MetaDescription</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("meta_description")]
		public virtual ITextFieldWrapper MetaDescription => this.GetField<TextFieldWrapper>("Meta Description");

		[IndexField("meta_description")]
 		public string MetaDescriptionValue => this.MetaDescription.Value;

		/// <summary><para>Field: MetaImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper MetaImage => this.GetField<ImageFieldWrapper>("Meta Image");

 		public string MetaImageValue => this.MetaImage.Value;

		/// <summary><para>Field: MetaKeywords</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_keywords")]
		public virtual ITextFieldWrapper MetaKeywords => this.GetField<TextFieldWrapper>("Meta Keywords");

		[IndexField("meta_keywords")]
 		public string MetaKeywordsValue => this.MetaKeywords.Value;

		/// <summary><para>Field: MetaTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_title")]
		public virtual ITextFieldWrapper MetaTitle => this.GetField<TextFieldWrapper>("Meta Title");

		[IndexField("meta_title")]
 		public string MetaTitleValue => this.MetaTitle.Value;

		/// <summary><para>Field: NavigationImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper NavigationImage => this.GetField<ImageFieldWrapper>("Navigation Image");

 		public string NavigationImageValue => this.NavigationImage.Value;

		/// <summary><para>Field: NavigationTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("navigation_title")]
		public virtual ITextFieldWrapper NavigationTitle => this.GetField<TextFieldWrapper>("Navigation Title");

		[IndexField("navigation_title")]
 		public string NavigationTitleValue => this.NavigationTitle.Value;

		/// <summary><para>Field: NavigationUrl</para><para>Data type: General Link</para></summary>
		[IndexField("navigation_url")]
		public virtual IGeneralLinkFieldWrapper NavigationUrl => this.GetField<GeneralLinkFieldWrapper>("Navigation Url");

		[IndexField("navigation_url")]
 		public string NavigationUrlValue => this.NavigationUrl.Value;

		/// <summary><para>Field: PageSummary</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("page_summary")]
		public virtual ITextFieldWrapper PageSummary => this.GetField<TextFieldWrapper>("Page Summary");

		[IndexField("page_summary")]
 		public string PageSummaryValue => this.PageSummary.Value;

		/// <summary><para>Field: PageTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("page_title")]
		public virtual ITextFieldWrapper PageTitle => this.GetField<TextFieldWrapper>("Page Title");

		[IndexField("page_title")]
 		public string PageTitleValue => this.PageTitle.Value;

		/// <summary><para>Field: SponsoredBackground</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper SponsoredBackground => this.GetField<ImageFieldWrapper>("Sponsored Background");

 		public string SponsoredBackgroundValue => this.SponsoredBackground.Value;

		/// <summary><para>Field: TrackingAction</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_action")]
		public virtual ITextFieldWrapper TrackingAction => this.GetField<TextFieldWrapper>("Tracking Action");

		[IndexField("tracking_action")]
 		public string TrackingActionValue => this.TrackingAction.Value;

		/// <summary><para>Field: TrackingCategory</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_category")]
		public virtual ITextFieldWrapper TrackingCategory => this.GetField<TextFieldWrapper>("Tracking Category");

		[IndexField("tracking_category")]
 		public string TrackingCategoryValue => this.TrackingCategory.Value;

		/// <summary><para>Field: TrackingLabel</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_label")]
		public virtual ITextFieldWrapper TrackingLabel => this.GetField<TextFieldWrapper>("Tracking Label");

		[IndexField("tracking_label")]
 		public string TrackingLabelValue => this.TrackingLabel.Value;
	}
}
#endregion
#region Featured Slider Rendering Parameters (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary>
	/// <para>Template: Featured Slider Rendering Parameters</para>
	/// <para>ID: {E50781A9-7A1F-4C69-85A0-08E66FECF380}</para>
	/// <para>/sitecore/templates/User Defined/Shared/Marketing/Rendering Parameters/Featured Slider Rendering Parameters</para>
	/// </summary>
	[TemplateMapping("{E50781A9-7A1F-4C69-85A0-08E66FECF380}", "InterfaceRenderingParameterMap")]
	public partial interface IFeaturedSliderRenderingParameters :
		IRenderingParameterWrapper,
		LM.Model.Templates.Ignite.IIgniteRenderingParameters	{
    	/// <summary><para>Template: Featured Slider Rendering Parameters</para><para>Field: Max Slides</para><para>Data type: Single-Line Text</para></summary>
		ITextFieldWrapper MaxSlides { get; }
    	/// <summary><para>Template: Featured Slider Rendering Parameters</para><para>Field: Share Label</para><para>Data type: Droptree</para></summary>
		ILinkFieldWrapper ShareLabel { get; }
	}
	
	[TemplateMapping("{E50781A9-7A1F-4C69-85A0-08E66FECF380}", "RenderingParameter")]
	public partial class FeaturedSliderRenderingParameters : RenderingParameterWrapper, IFeaturedSliderRenderingParameters
	{
		public FeaturedSliderRenderingParameters(Dictionary<string, string> parameters, ISpawnProvider spawnProvider)
			: base(parameters, spawnProvider)
		{ }

		/// <summary><para>Field: MaxSlides</para><para>Data type: Single-Line Text</para></summary>
		public virtual ITextFieldWrapper MaxSlides => (Fortis.Model.RenderingParameters.Fields.TextFieldWrapper)this.GetField("Max Slides", "single-line text");

		/// <summary><para>Field: ShareLabel</para><para>Data type: Droptree</para></summary>
		public virtual ILinkFieldWrapper ShareLabel => (Fortis.Model.RenderingParameters.Fields.LinkFieldWrapper)this.GetField("Share Label", "droptree");
	
	}
}
#endregion
#region Internal Advert Options (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary>
	/// <para>Template: Internal Advert Options</para>
	/// <para>ID: {15B0E294-FB29-4E43-82C2-1A1F4E249FD9}</para>
	/// <para>/sitecore/templates/User Defined/Shared/Marketing/Rendering Parameters/Internal Advert Options</para>
	/// </summary>
	[TemplateMapping("{15B0E294-FB29-4E43-82C2-1A1F4E249FD9}", "InterfaceRenderingParameterMap")]
	public partial interface IInternalAdvertOptions :
		IRenderingParameterWrapper,
		LM.Model.Templates.Ignite.IIgniteRenderingParameters	{
    	/// <summary><para>Template: Internal Advert Options</para><para>Field: Show Ad</para><para>Data type: Checkbox</para></summary>
		IBooleanFieldWrapper ShowAd { get; }
    	/// <summary><para>Template: Internal Advert Options</para><para>Field: Show Ad After</para><para>Data type: Number</para></summary>
		INumberFieldWrapper ShowAdAfter { get; }
	}
	
	[TemplateMapping("{15B0E294-FB29-4E43-82C2-1A1F4E249FD9}", "RenderingParameter")]
	public partial class InternalAdvertOptions : RenderingParameterWrapper, IInternalAdvertOptions
	{
		public InternalAdvertOptions(Dictionary<string, string> parameters, ISpawnProvider spawnProvider)
			: base(parameters, spawnProvider)
		{ }

		/// <summary><para>Field: ShowAd</para><para>Data type: Checkbox</para></summary>
		public virtual IBooleanFieldWrapper ShowAd => (Fortis.Model.RenderingParameters.Fields.BooleanFieldWrapper)this.GetField("Show Ad", "checkbox");

		/// <summary><para>Field: ShowAdAfter</para><para>Data type: Number</para></summary>
		public virtual INumberFieldWrapper ShowAdAfter => (Fortis.Model.RenderingParameters.Fields.NumberFieldWrapper)this.GetField("Show Ad After", "number");
	
	}
}
#endregion
#region Sponsors (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Sponsors</para><para>ID: {8104D759-1D1C-405B-82C2-EAFE2EC15C7E}</para><para>/sitecore/templates/User Defined/Shared/Marketing/Sponsors</para></summary>
	[TemplateMapping("{8104D759-1D1C-405B-82C2-EAFE2EC15C7E}", "InterfaceMap")]
	public partial interface ISponsors :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{

    	/// <summary><para>Template: Sponsors</para><para>Field: Sponsored Background</para><para>Data type: Image</para></summary>
		IImageFieldWrapper SponsoredBackground { get; }

    	/// <summary><para>Template: Sponsors</para><para>Field: Sponsored Background</para><para>Data type: Image</para></summary>
		string SponsoredBackgroundValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{8104D759-1D1C-405B-82C2-EAFE2EC15C7E}", typeof(Guid))]
	[TemplateMapping("{8104D759-1D1C-405B-82C2-EAFE2EC15C7E}")]
	public partial class Sponsors : CustomItemWrapper, ISponsors
	{
		public Sponsors(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public Sponsors(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: SponsoredBackground</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper SponsoredBackground => this.GetField<ImageFieldWrapper>("Sponsored Background");

 		public string SponsoredBackgroundValue => this.SponsoredBackground.Value;
	}
}
#endregion
#region Category (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Category</para><para>ID: {D1478FBE-7D13-4213-86DE-660609C15CCC}</para><para>/sitecore/templates/User Defined/Shared/Media/Category</para></summary>
	[TemplateMapping("{D1478FBE-7D13-4213-86DE-660609C15CCC}", "InterfaceMap")]
	public partial interface ICategory :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{

    	/// <summary><para>Template: Category</para><para>Field: Category Name</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("category_name")]
		ITextFieldWrapper CategoryName { get; }

    	/// <summary><para>Template: Category</para><para>Field: Category Name</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("category_name")]
		string CategoryNameValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{D1478FBE-7D13-4213-86DE-660609C15CCC}", typeof(Guid))]
	[TemplateMapping("{D1478FBE-7D13-4213-86DE-660609C15CCC}")]
	public partial class Category : CustomItemWrapper, ICategory
	{
		public Category(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public Category(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: CategoryName</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("category_name")]
		public virtual ITextFieldWrapper CategoryName => this.GetField<TextFieldWrapper>("Category Name");

		[IndexField("category_name")]
 		public string CategoryNameValue => this.CategoryName.Value;
	}
}
#endregion
#region In The News Folder (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: In The News Folder</para><para>ID: {6DF95BDE-8860-4459-8F82-528117D2A461}</para><para>/sitecore/templates/User Defined/Shared/Media/In The News Folder</para></summary>
	[TemplateMapping("{6DF95BDE-8860-4459-8F82-528117D2A461}", "InterfaceMap")]
	public partial interface IInTheNewsFolder :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteFolder,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{6DF95BDE-8860-4459-8F82-528117D2A461}", typeof(Guid))]
	[TemplateMapping("{6DF95BDE-8860-4459-8F82-528117D2A461}")]
	public partial class InTheNewsFolder : CustomItemWrapper, IInTheNewsFolder
	{
		public InTheNewsFolder(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public InTheNewsFolder(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }
	}
}
#endregion
#region In The News Link (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: In The News Link</para><para>ID: {D2BAFDB7-A961-4B1C-A534-1D705D5AC05F}</para><para>/sitecore/templates/User Defined/Shared/Media/In The News Link</para></summary>
	[TemplateMapping("{D2BAFDB7-A961-4B1C-A534-1D705D5AC05F}", "InterfaceMap")]
	public partial interface IInTheNewsLink :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.PokerCentral.IAnalyticsTracking,
		LM.Model.Templates.PokerCentral.INavigation
	{

    	/// <summary><para>Template: In The News Link</para><para>Field: Article Title</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("article_title")]
		ITextFieldWrapper ArticleTitle { get; }

    	/// <summary><para>Template: In The News Link</para><para>Field: Article Title</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("article_title")]
		string ArticleTitleValue { get; }

    	/// <summary><para>Template: In The News Link</para><para>Field: Categories</para><para>Data type: Multilist</para></summary>
		[IndexField("categories")]
		IListFieldWrapper Categories { get; }

    	/// <summary><para>Template: In The News Link</para><para>Field: Categories</para><para>Data type: Multilist</para></summary>
		[IndexField("categories")]
		IEnumerable<Guid> CategoriesValue { get; }

    	/// <summary><para>Template: In The News Link</para><para>Field: Date Published</para><para>Data type: Date</para></summary>
		[IndexField("date_published")]
		IDateTimeFieldWrapper DatePublished { get; }

    	/// <summary><para>Template: In The News Link</para><para>Field: Date Published</para><para>Data type: Date</para></summary>
		[IndexField("date_published")]
		DateTime DatePublishedValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{D2BAFDB7-A961-4B1C-A534-1D705D5AC05F}", typeof(Guid))]
	[TemplateMapping("{D2BAFDB7-A961-4B1C-A534-1D705D5AC05F}")]
	public partial class InTheNewsLink : CustomItemWrapper, IInTheNewsLink
	{
		public InTheNewsLink(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public InTheNewsLink(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: ArticleTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("article_title")]
		public virtual ITextFieldWrapper ArticleTitle => this.GetField<TextFieldWrapper>("Article Title");

		[IndexField("article_title")]
 		public string ArticleTitleValue => this.ArticleTitle.Value;

		/// <summary><para>Field: Categories</para><para>Data type: Multilist</para></summary>
		[IndexField("categories")]
		public virtual IListFieldWrapper Categories => this.GetField<ListFieldWrapper>("Categories");

		[IndexField("categories")]
 		public IEnumerable<Guid> CategoriesValue => this.Categories.Value;

		/// <summary><para>Field: DatePublished</para><para>Data type: Date</para></summary>
		[IndexField("date_published")]
		public virtual IDateTimeFieldWrapper DatePublished => this.GetField<DateTimeFieldWrapper>("Date Published");

		[IndexField("date_published")]
 		public DateTime DatePublishedValue => this.DatePublished.Value;

		/// <summary><para>Field: HideFromMenu</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_menu")]
		public virtual IBooleanFieldWrapper HideFromMenu => this.GetField<BooleanFieldWrapper>("Hide From Menu");

		[IndexField("hide_from_menu")]
 		public bool HideFromMenuValue => this.HideFromMenu.Value;

		/// <summary><para>Field: NavigationImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper NavigationImage => this.GetField<ImageFieldWrapper>("Navigation Image");

 		public string NavigationImageValue => this.NavigationImage.Value;

		/// <summary><para>Field: NavigationTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("navigation_title")]
		public virtual ITextFieldWrapper NavigationTitle => this.GetField<TextFieldWrapper>("Navigation Title");

		[IndexField("navigation_title")]
 		public string NavigationTitleValue => this.NavigationTitle.Value;

		/// <summary><para>Field: NavigationUrl</para><para>Data type: General Link</para></summary>
		[IndexField("navigation_url")]
		public virtual IGeneralLinkFieldWrapper NavigationUrl => this.GetField<GeneralLinkFieldWrapper>("Navigation Url");

		[IndexField("navigation_url")]
 		public string NavigationUrlValue => this.NavigationUrl.Value;

		/// <summary><para>Field: TrackingAction</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_action")]
		public virtual ITextFieldWrapper TrackingAction => this.GetField<TextFieldWrapper>("Tracking Action");

		[IndexField("tracking_action")]
 		public string TrackingActionValue => this.TrackingAction.Value;

		/// <summary><para>Field: TrackingCategory</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_category")]
		public virtual ITextFieldWrapper TrackingCategory => this.GetField<TextFieldWrapper>("Tracking Category");

		[IndexField("tracking_category")]
 		public string TrackingCategoryValue => this.TrackingCategory.Value;

		/// <summary><para>Field: TrackingLabel</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_label")]
		public virtual ITextFieldWrapper TrackingLabel => this.GetField<TextFieldWrapper>("Tracking Label");

		[IndexField("tracking_label")]
 		public string TrackingLabelValue => this.TrackingLabel.Value;
	}
}
#endregion
#region Press Release (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Press Release</para><para>ID: {EA67B4DD-2B7A-4CE4-8986-900E058FCA4C}</para><para>/sitecore/templates/User Defined/Shared/Media/Press Release</para></summary>
	[TemplateMapping("{EA67B4DD-2B7A-4CE4-8986-900E058FCA4C}", "InterfaceMap")]
	public partial interface IPressRelease :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.PokerCentral.IContentPage,
		LM.Model.Templates.PokerCentral.IContent,
		LM.Model.Templates.PokerCentral.IInTheNewsLink,
		LM.Model.Templates.PokerCentral.IAnalyticsTracking,
		LM.Model.Templates.PokerCentral.INavigation,
		LM.Model.Templates.PokerCentral.IMetaData
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{EA67B4DD-2B7A-4CE4-8986-900E058FCA4C}", typeof(Guid))]
	[TemplateMapping("{EA67B4DD-2B7A-4CE4-8986-900E058FCA4C}")]
	public partial class PressRelease : CustomItemWrapper, IPressRelease
	{
		public PressRelease(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public PressRelease(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: ArticleTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("article_title")]
		public virtual ITextFieldWrapper ArticleTitle => this.GetField<TextFieldWrapper>("Article Title");

		[IndexField("article_title")]
 		public string ArticleTitleValue => this.ArticleTitle.Value;

		/// <summary><para>Field: Categories</para><para>Data type: Multilist</para></summary>
		[IndexField("categories")]
		public virtual IListFieldWrapper Categories => this.GetField<ListFieldWrapper>("Categories");

		[IndexField("categories")]
 		public IEnumerable<Guid> CategoriesValue => this.Categories.Value;

		/// <summary><para>Field: ContentBody</para><para>Data type: Rich Text</para></summary>
		[IndexField("content_body")]
		public virtual IRichTextFieldWrapper ContentBody => this.GetField<RichTextFieldWrapper>("Content Body");

		[IndexField("content_body")]
 		public string ContentBodyValue => this.ContentBody.Value;

		/// <summary><para>Field: DatePublished</para><para>Data type: Date</para></summary>
		[IndexField("date_published")]
		public virtual IDateTimeFieldWrapper DatePublished => this.GetField<DateTimeFieldWrapper>("Date Published");

		[IndexField("date_published")]
 		public DateTime DatePublishedValue => this.DatePublished.Value;

		/// <summary><para>Field: HideFromMenu</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_menu")]
		public virtual IBooleanFieldWrapper HideFromMenu => this.GetField<BooleanFieldWrapper>("Hide From Menu");

		[IndexField("hide_from_menu")]
 		public bool HideFromMenuValue => this.HideFromMenu.Value;

		/// <summary><para>Field: HideFromSitemap</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_sitemap")]
		public virtual IBooleanFieldWrapper HideFromSitemap => this.GetField<BooleanFieldWrapper>("Hide from Sitemap");

		[IndexField("hide_from_sitemap")]
 		public bool HideFromSitemapValue => this.HideFromSitemap.Value;

		/// <summary><para>Field: MetaCanonicalUrl</para><para>Data type: General Link</para></summary>
		[IndexField("meta_canonical_url")]
		public virtual IGeneralLinkFieldWrapper MetaCanonicalUrl => this.GetField<GeneralLinkFieldWrapper>("Meta Canonical Url");

		[IndexField("meta_canonical_url")]
 		public string MetaCanonicalUrlValue => this.MetaCanonicalUrl.Value;

		/// <summary><para>Field: MetaDescription</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("meta_description")]
		public virtual ITextFieldWrapper MetaDescription => this.GetField<TextFieldWrapper>("Meta Description");

		[IndexField("meta_description")]
 		public string MetaDescriptionValue => this.MetaDescription.Value;

		/// <summary><para>Field: MetaImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper MetaImage => this.GetField<ImageFieldWrapper>("Meta Image");

 		public string MetaImageValue => this.MetaImage.Value;

		/// <summary><para>Field: MetaKeywords</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_keywords")]
		public virtual ITextFieldWrapper MetaKeywords => this.GetField<TextFieldWrapper>("Meta Keywords");

		[IndexField("meta_keywords")]
 		public string MetaKeywordsValue => this.MetaKeywords.Value;

		/// <summary><para>Field: MetaTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_title")]
		public virtual ITextFieldWrapper MetaTitle => this.GetField<TextFieldWrapper>("Meta Title");

		[IndexField("meta_title")]
 		public string MetaTitleValue => this.MetaTitle.Value;

		/// <summary><para>Field: NavigationImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper NavigationImage => this.GetField<ImageFieldWrapper>("Navigation Image");

 		public string NavigationImageValue => this.NavigationImage.Value;

		/// <summary><para>Field: NavigationTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("navigation_title")]
		public virtual ITextFieldWrapper NavigationTitle => this.GetField<TextFieldWrapper>("Navigation Title");

		[IndexField("navigation_title")]
 		public string NavigationTitleValue => this.NavigationTitle.Value;

		/// <summary><para>Field: NavigationUrl</para><para>Data type: General Link</para></summary>
		[IndexField("navigation_url")]
		public virtual IGeneralLinkFieldWrapper NavigationUrl => this.GetField<GeneralLinkFieldWrapper>("Navigation Url");

		[IndexField("navigation_url")]
 		public string NavigationUrlValue => this.NavigationUrl.Value;

		/// <summary><para>Field: PageSummary</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("page_summary")]
		public virtual ITextFieldWrapper PageSummary => this.GetField<TextFieldWrapper>("Page Summary");

		[IndexField("page_summary")]
 		public string PageSummaryValue => this.PageSummary.Value;

		/// <summary><para>Field: PageTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("page_title")]
		public virtual ITextFieldWrapper PageTitle => this.GetField<TextFieldWrapper>("Page Title");

		[IndexField("page_title")]
 		public string PageTitleValue => this.PageTitle.Value;

		/// <summary><para>Field: TrackingAction</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_action")]
		public virtual ITextFieldWrapper TrackingAction => this.GetField<TextFieldWrapper>("Tracking Action");

		[IndexField("tracking_action")]
 		public string TrackingActionValue => this.TrackingAction.Value;

		/// <summary><para>Field: TrackingCategory</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_category")]
		public virtual ITextFieldWrapper TrackingCategory => this.GetField<TextFieldWrapper>("Tracking Category");

		[IndexField("tracking_category")]
 		public string TrackingCategoryValue => this.TrackingCategory.Value;

		/// <summary><para>Field: TrackingLabel</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_label")]
		public virtual ITextFieldWrapper TrackingLabel => this.GetField<TextFieldWrapper>("Tracking Label");

		[IndexField("tracking_label")]
 		public string TrackingLabelValue => this.TrackingLabel.Value;
	}
}
#endregion
#region Dynamic Video List Options (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary>
	/// <para>Template: Dynamic Video List Options</para>
	/// <para>ID: {F24B1C83-2724-4454-BB02-69B578C3AD04}</para>
	/// <para>/sitecore/templates/User Defined/Shared/Media/Rendering Parameters/Dynamic Video List Options</para>
	/// </summary>
	[TemplateMapping("{F24B1C83-2724-4454-BB02-69B578C3AD04}", "InterfaceRenderingParameterMap")]
	public partial interface IDynamicVideoListOptions :
		IRenderingParameterWrapper,
		LM.Model.Templates.Ignite.IIgniteRenderingParameters,
		LM.Model.Templates.PokerCentral.IInternalAdvertOptions	{
    	/// <summary><para>Template: Dynamic Video List Options</para><para>Field: Additional Labels</para><para>Data type: Treelist</para></summary>
		IListFieldWrapper AdditionalLabels { get; }
    	/// <summary><para>Template: Dynamic Video List Options</para><para>Field: Module Title</para><para>Data type: Droptree</para></summary>
		ILinkFieldWrapper ModuleTitle { get; }
    	/// <summary><para>Template: Dynamic Video List Options</para><para>Field: Number of items</para><para>Data type: Number</para></summary>
		INumberFieldWrapper NumberOfItems { get; }
	}
	
	[TemplateMapping("{F24B1C83-2724-4454-BB02-69B578C3AD04}", "RenderingParameter")]
	public partial class DynamicVideoListOptions : RenderingParameterWrapper, IDynamicVideoListOptions
	{
		public DynamicVideoListOptions(Dictionary<string, string> parameters, ISpawnProvider spawnProvider)
			: base(parameters, spawnProvider)
		{ }

		/// <summary><para>Field: AdditionalLabels</para><para>Data type: Treelist</para></summary>
		public virtual IListFieldWrapper AdditionalLabels => (Fortis.Model.RenderingParameters.Fields.ListFieldWrapper)this.GetField("Additional Labels", "treelist");

		/// <summary><para>Field: ModuleTitle</para><para>Data type: Droptree</para></summary>
		public virtual ILinkFieldWrapper ModuleTitle => (Fortis.Model.RenderingParameters.Fields.LinkFieldWrapper)this.GetField("Module Title", "droptree");

		/// <summary><para>Field: NumberOfItems</para><para>Data type: Number</para></summary>
		public virtual INumberFieldWrapper NumberOfItems => (Fortis.Model.RenderingParameters.Fields.NumberFieldWrapper)this.GetField("Number of items", "number");

		/// <summary><para>Field: ShowAd</para><para>Data type: Checkbox</para></summary>
		public virtual IBooleanFieldWrapper ShowAd => (Fortis.Model.RenderingParameters.Fields.BooleanFieldWrapper)this.GetField("Show Ad", "checkbox");

		/// <summary><para>Field: ShowAdAfter</para><para>Data type: Number</para></summary>
		public virtual INumberFieldWrapper ShowAdAfter => (Fortis.Model.RenderingParameters.Fields.NumberFieldWrapper)this.GetField("Show Ad After", "number");
	
	}
}
#endregion
#region Analytics Tracking (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Analytics Tracking</para><para>ID: {B204D501-48C3-4E3F-949E-9D428F1EBBBA}</para><para>/sitecore/templates/User Defined/Shared/Navigation/Analytics Tracking</para></summary>
	[TemplateMapping("{B204D501-48C3-4E3F-949E-9D428F1EBBBA}", "InterfaceMap")]
	public partial interface IAnalyticsTracking :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{

    	/// <summary><para>Template: Analytics Tracking</para><para>Field: Tracking Action</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_action")]
		ITextFieldWrapper TrackingAction { get; }

    	/// <summary><para>Template: Analytics Tracking</para><para>Field: Tracking Action</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_action")]
		string TrackingActionValue { get; }

    	/// <summary><para>Template: Analytics Tracking</para><para>Field: Tracking Category</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_category")]
		ITextFieldWrapper TrackingCategory { get; }

    	/// <summary><para>Template: Analytics Tracking</para><para>Field: Tracking Category</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_category")]
		string TrackingCategoryValue { get; }

    	/// <summary><para>Template: Analytics Tracking</para><para>Field: Tracking Label</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_label")]
		ITextFieldWrapper TrackingLabel { get; }

    	/// <summary><para>Template: Analytics Tracking</para><para>Field: Tracking Label</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_label")]
		string TrackingLabelValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{B204D501-48C3-4E3F-949E-9D428F1EBBBA}", typeof(Guid))]
	[TemplateMapping("{B204D501-48C3-4E3F-949E-9D428F1EBBBA}")]
	public partial class AnalyticsTracking : CustomItemWrapper, IAnalyticsTracking
	{
		public AnalyticsTracking(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public AnalyticsTracking(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: TrackingAction</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_action")]
		public virtual ITextFieldWrapper TrackingAction => this.GetField<TextFieldWrapper>("Tracking Action");

		[IndexField("tracking_action")]
 		public string TrackingActionValue => this.TrackingAction.Value;

		/// <summary><para>Field: TrackingCategory</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_category")]
		public virtual ITextFieldWrapper TrackingCategory => this.GetField<TextFieldWrapper>("Tracking Category");

		[IndexField("tracking_category")]
 		public string TrackingCategoryValue => this.TrackingCategory.Value;

		/// <summary><para>Field: TrackingLabel</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_label")]
		public virtual ITextFieldWrapper TrackingLabel => this.GetField<TextFieldWrapper>("Tracking Label");

		[IndexField("tracking_label")]
 		public string TrackingLabelValue => this.TrackingLabel.Value;
	}
}
#endregion
#region Download Link Folder (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Download Link Folder</para><para>ID: {E4FBE316-45CC-47AC-896B-1F51F59D7CCE}</para><para>/sitecore/templates/User Defined/Shared/Navigation/Download Link Folder</para></summary>
	[TemplateMapping("{E4FBE316-45CC-47AC-896B-1F51F59D7CCE}", "InterfaceMap")]
	public partial interface IDownloadLinkFolder :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteFolder,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{

    	/// <summary><para>Template: Download Link Folder</para><para>Field: Link File</para><para>Data type: File</para></summary>
		IFileFieldWrapper LinkFile { get; }

    	/// <summary><para>Template: Download Link Folder</para><para>Field: Link File</para><para>Data type: File</para></summary>
		string LinkFileValue { get; }

    	/// <summary><para>Template: Download Link Folder</para><para>Field: Title</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("title")]
		ITextFieldWrapper Title { get; }

    	/// <summary><para>Template: Download Link Folder</para><para>Field: Title</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("title")]
		string TitleValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{E4FBE316-45CC-47AC-896B-1F51F59D7CCE}", typeof(Guid))]
	[TemplateMapping("{E4FBE316-45CC-47AC-896B-1F51F59D7CCE}")]
	public partial class DownloadLinkFolder : CustomItemWrapper, IDownloadLinkFolder
	{
		public DownloadLinkFolder(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public DownloadLinkFolder(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: LinkFile</para><para>Data type: File</para></summary>
		public virtual IFileFieldWrapper LinkFile => this.GetField<FileFieldWrapper>("Link File");

 		public string LinkFileValue => this.LinkFile.Value;

		/// <summary><para>Field: Title</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("title")]
		public virtual ITextFieldWrapper Title => this.GetField<TextFieldWrapper>("Title");

		[IndexField("title")]
 		public string TitleValue => this.Title.Value;
	}
}
#endregion
#region Download Link (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Download Link</para><para>ID: {1C2FD68F-CBFA-4A1D-8AE4-F762D0F1C489}</para><para>/sitecore/templates/User Defined/Shared/Navigation/Download Link</para></summary>
	[TemplateMapping("{1C2FD68F-CBFA-4A1D-8AE4-F762D0F1C489}", "InterfaceMap")]
	public partial interface IDownloadLink :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.PokerCentral.IAnalyticsTracking
	{

    	/// <summary><para>Template: Download Link</para><para>Field: Link File</para><para>Data type: File</para></summary>
		IFileFieldWrapper LinkFile { get; }

    	/// <summary><para>Template: Download Link</para><para>Field: Link File</para><para>Data type: File</para></summary>
		string LinkFileValue { get; }

    	/// <summary><para>Template: Download Link</para><para>Field: Link Text</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("link_text")]
		ITextFieldWrapper LinkText { get; }

    	/// <summary><para>Template: Download Link</para><para>Field: Link Text</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("link_text")]
		string LinkTextValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{1C2FD68F-CBFA-4A1D-8AE4-F762D0F1C489}", typeof(Guid))]
	[TemplateMapping("{1C2FD68F-CBFA-4A1D-8AE4-F762D0F1C489}")]
	public partial class DownloadLink : CustomItemWrapper, IDownloadLink
	{
		public DownloadLink(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public DownloadLink(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: LinkFile</para><para>Data type: File</para></summary>
		public virtual IFileFieldWrapper LinkFile => this.GetField<FileFieldWrapper>("Link File");

 		public string LinkFileValue => this.LinkFile.Value;

		/// <summary><para>Field: LinkText</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("link_text")]
		public virtual ITextFieldWrapper LinkText => this.GetField<TextFieldWrapper>("Link Text");

		[IndexField("link_text")]
 		public string LinkTextValue => this.LinkText.Value;

		/// <summary><para>Field: TrackingAction</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_action")]
		public virtual ITextFieldWrapper TrackingAction => this.GetField<TextFieldWrapper>("Tracking Action");

		[IndexField("tracking_action")]
 		public string TrackingActionValue => this.TrackingAction.Value;

		/// <summary><para>Field: TrackingCategory</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_category")]
		public virtual ITextFieldWrapper TrackingCategory => this.GetField<TextFieldWrapper>("Tracking Category");

		[IndexField("tracking_category")]
 		public string TrackingCategoryValue => this.TrackingCategory.Value;

		/// <summary><para>Field: TrackingLabel</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_label")]
		public virtual ITextFieldWrapper TrackingLabel => this.GetField<TextFieldWrapper>("Tracking Label");

		[IndexField("tracking_label")]
 		public string TrackingLabelValue => this.TrackingLabel.Value;
	}
}
#endregion
#region Menu Folder (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Menu Folder</para><para>ID: {EBDC7EB4-C748-46DB-BBE8-E7996867BF49}</para><para>/sitecore/templates/User Defined/Shared/Navigation/Menu Folder</para></summary>
	[TemplateMapping("{EBDC7EB4-C748-46DB-BBE8-E7996867BF49}", "InterfaceMap")]
	public partial interface IMenuFolder :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteFolder,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{EBDC7EB4-C748-46DB-BBE8-E7996867BF49}", typeof(Guid))]
	[TemplateMapping("{EBDC7EB4-C748-46DB-BBE8-E7996867BF49}")]
	public partial class MenuFolder : CustomItemWrapper, IMenuFolder
	{
		public MenuFolder(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public MenuFolder(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }
	}
}
#endregion
#region Navigation Link (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Navigation Link</para><para>ID: {CD1AE917-5B3E-4731-BF52-033210EA5941}</para><para>/sitecore/templates/User Defined/Shared/Navigation/Navigation Link</para></summary>
	[TemplateMapping("{CD1AE917-5B3E-4731-BF52-033210EA5941}", "InterfaceMap")]
	public partial interface INavigationLink :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.PokerCentral.IAnalyticsTracking,
		LM.Model.Templates.PokerCentral.INavigation
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{CD1AE917-5B3E-4731-BF52-033210EA5941}", typeof(Guid))]
	[TemplateMapping("{CD1AE917-5B3E-4731-BF52-033210EA5941}")]
	public partial class NavigationLink : CustomItemWrapper, INavigationLink
	{
		public NavigationLink(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public NavigationLink(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: HideFromMenu</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_menu")]
		public virtual IBooleanFieldWrapper HideFromMenu => this.GetField<BooleanFieldWrapper>("Hide From Menu");

		[IndexField("hide_from_menu")]
 		public bool HideFromMenuValue => this.HideFromMenu.Value;

		/// <summary><para>Field: NavigationImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper NavigationImage => this.GetField<ImageFieldWrapper>("Navigation Image");

 		public string NavigationImageValue => this.NavigationImage.Value;

		/// <summary><para>Field: NavigationTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("navigation_title")]
		public virtual ITextFieldWrapper NavigationTitle => this.GetField<TextFieldWrapper>("Navigation Title");

		[IndexField("navigation_title")]
 		public string NavigationTitleValue => this.NavigationTitle.Value;

		/// <summary><para>Field: NavigationUrl</para><para>Data type: General Link</para></summary>
		[IndexField("navigation_url")]
		public virtual IGeneralLinkFieldWrapper NavigationUrl => this.GetField<GeneralLinkFieldWrapper>("Navigation Url");

		[IndexField("navigation_url")]
 		public string NavigationUrlValue => this.NavigationUrl.Value;

		/// <summary><para>Field: TrackingAction</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_action")]
		public virtual ITextFieldWrapper TrackingAction => this.GetField<TextFieldWrapper>("Tracking Action");

		[IndexField("tracking_action")]
 		public string TrackingActionValue => this.TrackingAction.Value;

		/// <summary><para>Field: TrackingCategory</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_category")]
		public virtual ITextFieldWrapper TrackingCategory => this.GetField<TextFieldWrapper>("Tracking Category");

		[IndexField("tracking_category")]
 		public string TrackingCategoryValue => this.TrackingCategory.Value;

		/// <summary><para>Field: TrackingLabel</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_label")]
		public virtual ITextFieldWrapper TrackingLabel => this.GetField<TextFieldWrapper>("Tracking Label");

		[IndexField("tracking_label")]
 		public string TrackingLabelValue => this.TrackingLabel.Value;
	}
}
#endregion
#region Navigation (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Navigation</para><para>ID: {2D6B1753-B66E-442A-A34A-C6C7A0D21EC4}</para><para>/sitecore/templates/User Defined/Shared/Navigation/Navigation</para></summary>
	[TemplateMapping("{2D6B1753-B66E-442A-A34A-C6C7A0D21EC4}", "InterfaceMap")]
	public partial interface INavigation :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.PokerCentral.IAnalyticsTracking
	{

    	/// <summary><para>Template: Navigation</para><para>Field: Hide From Menu</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_menu")]
		IBooleanFieldWrapper HideFromMenu { get; }

    	/// <summary><para>Template: Navigation</para><para>Field: Hide From Menu</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_menu")]
		bool HideFromMenuValue { get; }

    	/// <summary><para>Template: Navigation</para><para>Field: Navigation Image</para><para>Data type: Image</para></summary>
		IImageFieldWrapper NavigationImage { get; }

    	/// <summary><para>Template: Navigation</para><para>Field: Navigation Image</para><para>Data type: Image</para></summary>
		string NavigationImageValue { get; }

    	/// <summary><para>Template: Navigation</para><para>Field: Navigation Title</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("navigation_title")]
		ITextFieldWrapper NavigationTitle { get; }

    	/// <summary><para>Template: Navigation</para><para>Field: Navigation Title</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("navigation_title")]
		string NavigationTitleValue { get; }

    	/// <summary><para>Template: Navigation</para><para>Field: Navigation Url</para><para>Data type: General Link</para></summary>
		[IndexField("navigation_url")]
		IGeneralLinkFieldWrapper NavigationUrl { get; }

    	/// <summary><para>Template: Navigation</para><para>Field: Navigation Url</para><para>Data type: General Link</para></summary>
		[IndexField("navigation_url")]
		string NavigationUrlValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{2D6B1753-B66E-442A-A34A-C6C7A0D21EC4}", typeof(Guid))]
	[TemplateMapping("{2D6B1753-B66E-442A-A34A-C6C7A0D21EC4}")]
	public partial class Navigation : CustomItemWrapper, INavigation
	{
		public Navigation(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public Navigation(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: HideFromMenu</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_menu")]
		public virtual IBooleanFieldWrapper HideFromMenu => this.GetField<BooleanFieldWrapper>("Hide From Menu");

		[IndexField("hide_from_menu")]
 		public bool HideFromMenuValue => this.HideFromMenu.Value;

		/// <summary><para>Field: NavigationImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper NavigationImage => this.GetField<ImageFieldWrapper>("Navigation Image");

 		public string NavigationImageValue => this.NavigationImage.Value;

		/// <summary><para>Field: NavigationTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("navigation_title")]
		public virtual ITextFieldWrapper NavigationTitle => this.GetField<TextFieldWrapper>("Navigation Title");

		[IndexField("navigation_title")]
 		public string NavigationTitleValue => this.NavigationTitle.Value;

		/// <summary><para>Field: NavigationUrl</para><para>Data type: General Link</para></summary>
		[IndexField("navigation_url")]
		public virtual IGeneralLinkFieldWrapper NavigationUrl => this.GetField<GeneralLinkFieldWrapper>("Navigation Url");

		[IndexField("navigation_url")]
 		public string NavigationUrlValue => this.NavigationUrl.Value;

		/// <summary><para>Field: TrackingAction</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_action")]
		public virtual ITextFieldWrapper TrackingAction => this.GetField<TextFieldWrapper>("Tracking Action");

		[IndexField("tracking_action")]
 		public string TrackingActionValue => this.TrackingAction.Value;

		/// <summary><para>Field: TrackingCategory</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_category")]
		public virtual ITextFieldWrapper TrackingCategory => this.GetField<TextFieldWrapper>("Tracking Category");

		[IndexField("tracking_category")]
 		public string TrackingCategoryValue => this.TrackingCategory.Value;

		/// <summary><para>Field: TrackingLabel</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_label")]
		public virtual ITextFieldWrapper TrackingLabel => this.GetField<TextFieldWrapper>("Tracking Label");

		[IndexField("tracking_label")]
 		public string TrackingLabelValue => this.TrackingLabel.Value;
	}
}
#endregion
#region Countdown Clock Rendering Parameters (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary>
	/// <para>Template: Countdown Clock Rendering Parameters</para>
	/// <para>ID: {EBC16B18-5A52-4EE6-8545-33689942C979}</para>
	/// <para>/sitecore/templates/User Defined/Shared/Navigation/Rendering Parameters/Countdown Clock Rendering Parameters</para>
	/// </summary>
	[TemplateMapping("{EBC16B18-5A52-4EE6-8545-33689942C979}", "InterfaceRenderingParameterMap")]
	public partial interface ICountdownClockRenderingParameters :
		IRenderingParameterWrapper,
		LM.Model.Templates.Ignite.IIgniteRenderingParameters	{
    	/// <summary><para>Template: Countdown Clock Rendering Parameters</para><para>Field: Begins In Label</para><para>Data type: Droptree</para></summary>
		ILinkFieldWrapper BeginsInLabel { get; }
    	/// <summary><para>Template: Countdown Clock Rendering Parameters</para><para>Field: Title Text</para><para>Data type: Droptree</para></summary>
		ILinkFieldWrapper TitleText { get; }
	}
	
	[TemplateMapping("{EBC16B18-5A52-4EE6-8545-33689942C979}", "RenderingParameter")]
	public partial class CountdownClockRenderingParameters : RenderingParameterWrapper, ICountdownClockRenderingParameters
	{
		public CountdownClockRenderingParameters(Dictionary<string, string> parameters, ISpawnProvider spawnProvider)
			: base(parameters, spawnProvider)
		{ }

		/// <summary><para>Field: BeginsInLabel</para><para>Data type: Droptree</para></summary>
		public virtual ILinkFieldWrapper BeginsInLabel => (Fortis.Model.RenderingParameters.Fields.LinkFieldWrapper)this.GetField("Begins In Label", "droptree");

		/// <summary><para>Field: TitleText</para><para>Data type: Droptree</para></summary>
		public virtual ILinkFieldWrapper TitleText => (Fortis.Model.RenderingParameters.Fields.LinkFieldWrapper)this.GetField("Title Text", "droptree");
	
	}
}
#endregion
#region Devices Landing Page (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Devices Landing Page</para><para>ID: {E6D7F99F-0CF3-4056-AC6E-8225C3CA8BFB}</para><para>/sitecore/templates/User Defined/Shared/OTTDevices/Devices Landing Page</para></summary>
	[TemplateMapping("{E6D7F99F-0CF3-4056-AC6E-8225C3CA8BFB}", "InterfaceMap")]
	public partial interface IDevicesLandingPage :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.PokerCentral.IChildContentPage,
		LM.Model.Templates.PokerCentral.IContentPage,
		LM.Model.Templates.PokerCentral.ILandingPage,
		LM.Model.Templates.PokerCentral.IContent,
		LM.Model.Templates.PokerCentral.ISponsors,
		LM.Model.Templates.PokerCentral.IAnalyticsTracking,
		LM.Model.Templates.PokerCentral.INavigation,
		LM.Model.Templates.PokerCentral.IMetaData
	{

    	/// <summary><para>Template: Devices Landing Page</para><para>Field: Sponsored Device Image</para><para>Data type: Image</para></summary>
		IImageFieldWrapper SponsoredDeviceImage { get; }

    	/// <summary><para>Template: Devices Landing Page</para><para>Field: Sponsored Device Image</para><para>Data type: Image</para></summary>
		string SponsoredDeviceImageValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{E6D7F99F-0CF3-4056-AC6E-8225C3CA8BFB}", typeof(Guid))]
	[TemplateMapping("{E6D7F99F-0CF3-4056-AC6E-8225C3CA8BFB}")]
	public partial class DevicesLandingPage : CustomItemWrapper, IDevicesLandingPage
	{
		public DevicesLandingPage(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public DevicesLandingPage(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: ContentBody</para><para>Data type: Rich Text</para></summary>
		[IndexField("content_body")]
		public virtual IRichTextFieldWrapper ContentBody => this.GetField<RichTextFieldWrapper>("Content Body");

		[IndexField("content_body")]
 		public string ContentBodyValue => this.ContentBody.Value;

		/// <summary><para>Field: HideFromMenu</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_menu")]
		public virtual IBooleanFieldWrapper HideFromMenu => this.GetField<BooleanFieldWrapper>("Hide From Menu");

		[IndexField("hide_from_menu")]
 		public bool HideFromMenuValue => this.HideFromMenu.Value;

		/// <summary><para>Field: HideFromSitemap</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_sitemap")]
		public virtual IBooleanFieldWrapper HideFromSitemap => this.GetField<BooleanFieldWrapper>("Hide from Sitemap");

		[IndexField("hide_from_sitemap")]
 		public bool HideFromSitemapValue => this.HideFromSitemap.Value;

		/// <summary><para>Field: MetaCanonicalUrl</para><para>Data type: General Link</para></summary>
		[IndexField("meta_canonical_url")]
		public virtual IGeneralLinkFieldWrapper MetaCanonicalUrl => this.GetField<GeneralLinkFieldWrapper>("Meta Canonical Url");

		[IndexField("meta_canonical_url")]
 		public string MetaCanonicalUrlValue => this.MetaCanonicalUrl.Value;

		/// <summary><para>Field: MetaDescription</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("meta_description")]
		public virtual ITextFieldWrapper MetaDescription => this.GetField<TextFieldWrapper>("Meta Description");

		[IndexField("meta_description")]
 		public string MetaDescriptionValue => this.MetaDescription.Value;

		/// <summary><para>Field: MetaImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper MetaImage => this.GetField<ImageFieldWrapper>("Meta Image");

 		public string MetaImageValue => this.MetaImage.Value;

		/// <summary><para>Field: MetaKeywords</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_keywords")]
		public virtual ITextFieldWrapper MetaKeywords => this.GetField<TextFieldWrapper>("Meta Keywords");

		[IndexField("meta_keywords")]
 		public string MetaKeywordsValue => this.MetaKeywords.Value;

		/// <summary><para>Field: MetaTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_title")]
		public virtual ITextFieldWrapper MetaTitle => this.GetField<TextFieldWrapper>("Meta Title");

		[IndexField("meta_title")]
 		public string MetaTitleValue => this.MetaTitle.Value;

		/// <summary><para>Field: NavigationImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper NavigationImage => this.GetField<ImageFieldWrapper>("Navigation Image");

 		public string NavigationImageValue => this.NavigationImage.Value;

		/// <summary><para>Field: NavigationTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("navigation_title")]
		public virtual ITextFieldWrapper NavigationTitle => this.GetField<TextFieldWrapper>("Navigation Title");

		[IndexField("navigation_title")]
 		public string NavigationTitleValue => this.NavigationTitle.Value;

		/// <summary><para>Field: NavigationUrl</para><para>Data type: General Link</para></summary>
		[IndexField("navigation_url")]
		public virtual IGeneralLinkFieldWrapper NavigationUrl => this.GetField<GeneralLinkFieldWrapper>("Navigation Url");

		[IndexField("navigation_url")]
 		public string NavigationUrlValue => this.NavigationUrl.Value;

		/// <summary><para>Field: PageSummary</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("page_summary")]
		public virtual ITextFieldWrapper PageSummary => this.GetField<TextFieldWrapper>("Page Summary");

		[IndexField("page_summary")]
 		public string PageSummaryValue => this.PageSummary.Value;

		/// <summary><para>Field: PageTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("page_title")]
		public virtual ITextFieldWrapper PageTitle => this.GetField<TextFieldWrapper>("Page Title");

		[IndexField("page_title")]
 		public string PageTitleValue => this.PageTitle.Value;

		/// <summary><para>Field: SponsoredBackground</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper SponsoredBackground => this.GetField<ImageFieldWrapper>("Sponsored Background");

 		public string SponsoredBackgroundValue => this.SponsoredBackground.Value;

		/// <summary><para>Field: SponsoredDeviceImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper SponsoredDeviceImage => this.GetField<ImageFieldWrapper>("Sponsored Device Image");

 		public string SponsoredDeviceImageValue => this.SponsoredDeviceImage.Value;

		/// <summary><para>Field: TrackingAction</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_action")]
		public virtual ITextFieldWrapper TrackingAction => this.GetField<TextFieldWrapper>("Tracking Action");

		[IndexField("tracking_action")]
 		public string TrackingActionValue => this.TrackingAction.Value;

		/// <summary><para>Field: TrackingCategory</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_category")]
		public virtual ITextFieldWrapper TrackingCategory => this.GetField<TextFieldWrapper>("Tracking Category");

		[IndexField("tracking_category")]
 		public string TrackingCategoryValue => this.TrackingCategory.Value;

		/// <summary><para>Field: TrackingLabel</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_label")]
		public virtual ITextFieldWrapper TrackingLabel => this.GetField<TextFieldWrapper>("Tracking Label");

		[IndexField("tracking_label")]
 		public string TrackingLabelValue => this.TrackingLabel.Value;
	}
}
#endregion
#region OTT Device (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: OTT Device</para><para>ID: {08427D1C-5EC1-455C-B037-67A1C5752452}</para><para>/sitecore/templates/User Defined/Shared/OTTDevices/OTT Device</para></summary>
	[TemplateMapping("{08427D1C-5EC1-455C-B037-67A1C5752452}", "InterfaceMap")]
	public partial interface IOTTDevice :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.PokerCentral.IContentPage,
		LM.Model.Templates.PokerCentral.IContent,
		LM.Model.Templates.PokerCentral.IAnalyticsTracking,
		LM.Model.Templates.PokerCentral.INavigation,
		LM.Model.Templates.PokerCentral.IMetaData
	{

    	/// <summary><para>Template: OTT Device</para><para>Field: Activate CTA</para><para>Data type: General Link</para></summary>
		[IndexField("activate_cta")]
		IGeneralLinkFieldWrapper ActivateCTA { get; }

    	/// <summary><para>Template: OTT Device</para><para>Field: Activate CTA</para><para>Data type: General Link</para></summary>
		[IndexField("activate_cta")]
		string ActivateCTAValue { get; }

    	/// <summary><para>Template: OTT Device</para><para>Field: Device Image</para><para>Data type: Image</para></summary>
		IImageFieldWrapper DeviceImage { get; }

    	/// <summary><para>Template: OTT Device</para><para>Field: Device Image</para><para>Data type: Image</para></summary>
		string DeviceImageValue { get; }

    	/// <summary><para>Template: OTT Device</para><para>Field: Device Logo</para><para>Data type: Image</para></summary>
		IImageFieldWrapper DeviceLogo { get; }

    	/// <summary><para>Template: OTT Device</para><para>Field: Device Logo</para><para>Data type: Image</para></summary>
		string DeviceLogoValue { get; }

    	/// <summary><para>Template: OTT Device</para><para>Field: Learn More CTA</para><para>Data type: General Link</para></summary>
		[IndexField("learn_more_cta")]
		IGeneralLinkFieldWrapper LearnMoreCTA { get; }

    	/// <summary><para>Template: OTT Device</para><para>Field: Learn More CTA</para><para>Data type: General Link</para></summary>
		[IndexField("learn_more_cta")]
		string LearnMoreCTAValue { get; }

    	/// <summary><para>Template: OTT Device</para><para>Field: Sponsored Device Image</para><para>Data type: Image</para></summary>
		IImageFieldWrapper SponsoredDeviceImage { get; }

    	/// <summary><para>Template: OTT Device</para><para>Field: Sponsored Device Image</para><para>Data type: Image</para></summary>
		string SponsoredDeviceImageValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{08427D1C-5EC1-455C-B037-67A1C5752452}", typeof(Guid))]
	[TemplateMapping("{08427D1C-5EC1-455C-B037-67A1C5752452}")]
	public partial class OTTDevice : CustomItemWrapper, IOTTDevice
	{
		public OTTDevice(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public OTTDevice(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: ActivateCTA</para><para>Data type: General Link</para></summary>
		[IndexField("activate_cta")]
		public virtual IGeneralLinkFieldWrapper ActivateCTA => this.GetField<GeneralLinkFieldWrapper>("Activate CTA");

		[IndexField("activate_cta")]
 		public string ActivateCTAValue => this.ActivateCTA.Value;

		/// <summary><para>Field: ContentBody</para><para>Data type: Rich Text</para></summary>
		[IndexField("content_body")]
		public virtual IRichTextFieldWrapper ContentBody => this.GetField<RichTextFieldWrapper>("Content Body");

		[IndexField("content_body")]
 		public string ContentBodyValue => this.ContentBody.Value;

		/// <summary><para>Field: DeviceImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper DeviceImage => this.GetField<ImageFieldWrapper>("Device Image");

 		public string DeviceImageValue => this.DeviceImage.Value;

		/// <summary><para>Field: DeviceLogo</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper DeviceLogo => this.GetField<ImageFieldWrapper>("Device Logo");

 		public string DeviceLogoValue => this.DeviceLogo.Value;

		/// <summary><para>Field: HideFromMenu</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_menu")]
		public virtual IBooleanFieldWrapper HideFromMenu => this.GetField<BooleanFieldWrapper>("Hide From Menu");

		[IndexField("hide_from_menu")]
 		public bool HideFromMenuValue => this.HideFromMenu.Value;

		/// <summary><para>Field: HideFromSitemap</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_sitemap")]
		public virtual IBooleanFieldWrapper HideFromSitemap => this.GetField<BooleanFieldWrapper>("Hide from Sitemap");

		[IndexField("hide_from_sitemap")]
 		public bool HideFromSitemapValue => this.HideFromSitemap.Value;

		/// <summary><para>Field: LearnMoreCTA</para><para>Data type: General Link</para></summary>
		[IndexField("learn_more_cta")]
		public virtual IGeneralLinkFieldWrapper LearnMoreCTA => this.GetField<GeneralLinkFieldWrapper>("Learn More CTA");

		[IndexField("learn_more_cta")]
 		public string LearnMoreCTAValue => this.LearnMoreCTA.Value;

		/// <summary><para>Field: MetaCanonicalUrl</para><para>Data type: General Link</para></summary>
		[IndexField("meta_canonical_url")]
		public virtual IGeneralLinkFieldWrapper MetaCanonicalUrl => this.GetField<GeneralLinkFieldWrapper>("Meta Canonical Url");

		[IndexField("meta_canonical_url")]
 		public string MetaCanonicalUrlValue => this.MetaCanonicalUrl.Value;

		/// <summary><para>Field: MetaDescription</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("meta_description")]
		public virtual ITextFieldWrapper MetaDescription => this.GetField<TextFieldWrapper>("Meta Description");

		[IndexField("meta_description")]
 		public string MetaDescriptionValue => this.MetaDescription.Value;

		/// <summary><para>Field: MetaImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper MetaImage => this.GetField<ImageFieldWrapper>("Meta Image");

 		public string MetaImageValue => this.MetaImage.Value;

		/// <summary><para>Field: MetaKeywords</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_keywords")]
		public virtual ITextFieldWrapper MetaKeywords => this.GetField<TextFieldWrapper>("Meta Keywords");

		[IndexField("meta_keywords")]
 		public string MetaKeywordsValue => this.MetaKeywords.Value;

		/// <summary><para>Field: MetaTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_title")]
		public virtual ITextFieldWrapper MetaTitle => this.GetField<TextFieldWrapper>("Meta Title");

		[IndexField("meta_title")]
 		public string MetaTitleValue => this.MetaTitle.Value;

		/// <summary><para>Field: NavigationImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper NavigationImage => this.GetField<ImageFieldWrapper>("Navigation Image");

 		public string NavigationImageValue => this.NavigationImage.Value;

		/// <summary><para>Field: NavigationTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("navigation_title")]
		public virtual ITextFieldWrapper NavigationTitle => this.GetField<TextFieldWrapper>("Navigation Title");

		[IndexField("navigation_title")]
 		public string NavigationTitleValue => this.NavigationTitle.Value;

		/// <summary><para>Field: NavigationUrl</para><para>Data type: General Link</para></summary>
		[IndexField("navigation_url")]
		public virtual IGeneralLinkFieldWrapper NavigationUrl => this.GetField<GeneralLinkFieldWrapper>("Navigation Url");

		[IndexField("navigation_url")]
 		public string NavigationUrlValue => this.NavigationUrl.Value;

		/// <summary><para>Field: PageSummary</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("page_summary")]
		public virtual ITextFieldWrapper PageSummary => this.GetField<TextFieldWrapper>("Page Summary");

		[IndexField("page_summary")]
 		public string PageSummaryValue => this.PageSummary.Value;

		/// <summary><para>Field: PageTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("page_title")]
		public virtual ITextFieldWrapper PageTitle => this.GetField<TextFieldWrapper>("Page Title");

		[IndexField("page_title")]
 		public string PageTitleValue => this.PageTitle.Value;

		/// <summary><para>Field: SponsoredDeviceImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper SponsoredDeviceImage => this.GetField<ImageFieldWrapper>("Sponsored Device Image");

 		public string SponsoredDeviceImageValue => this.SponsoredDeviceImage.Value;

		/// <summary><para>Field: TrackingAction</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_action")]
		public virtual ITextFieldWrapper TrackingAction => this.GetField<TextFieldWrapper>("Tracking Action");

		[IndexField("tracking_action")]
 		public string TrackingActionValue => this.TrackingAction.Value;

		/// <summary><para>Field: TrackingCategory</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_category")]
		public virtual ITextFieldWrapper TrackingCategory => this.GetField<TextFieldWrapper>("Tracking Category");

		[IndexField("tracking_category")]
 		public string TrackingCategoryValue => this.TrackingCategory.Value;

		/// <summary><para>Field: TrackingLabel</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_label")]
		public virtual ITextFieldWrapper TrackingLabel => this.GetField<TextFieldWrapper>("Tracking Label");

		[IndexField("tracking_label")]
 		public string TrackingLabelValue => this.TrackingLabel.Value;
	}
}
#endregion
#region Devices List Rendering Parameters (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary>
	/// <para>Template: Devices List Rendering Parameters</para>
	/// <para>ID: {756471B6-C024-45FB-9F91-594357E6AF9F}</para>
	/// <para>/sitecore/templates/User Defined/Shared/OTTDevices/Rendering Parameters/Devices List Rendering Parameters</para>
	/// </summary>
	[TemplateMapping("{756471B6-C024-45FB-9F91-594357E6AF9F}", "InterfaceRenderingParameterMap")]
	public partial interface IDevicesListRenderingParameters :
		IRenderingParameterWrapper,
		LM.Model.Templates.Ignite.IIgniteRenderingParameters	{
    	/// <summary><para>Template: Devices List Rendering Parameters</para><para>Field: Available Now Label</para><para>Data type: Droptree</para></summary>
		ILinkFieldWrapper AvailableNowLabel { get; }
    	/// <summary><para>Template: Devices List Rendering Parameters</para><para>Field: Available Soon Label</para><para>Data type: Droptree</para></summary>
		ILinkFieldWrapper AvailableSoonLabel { get; }
    	/// <summary><para>Template: Devices List Rendering Parameters</para><para>Field: Page Summary Title</para><para>Data type: Droptree</para></summary>
		ILinkFieldWrapper PageSummaryTitle { get; }
	}
	
	[TemplateMapping("{756471B6-C024-45FB-9F91-594357E6AF9F}", "RenderingParameter")]
	public partial class DevicesListRenderingParameters : RenderingParameterWrapper, IDevicesListRenderingParameters
	{
		public DevicesListRenderingParameters(Dictionary<string, string> parameters, ISpawnProvider spawnProvider)
			: base(parameters, spawnProvider)
		{ }

		/// <summary><para>Field: AvailableNowLabel</para><para>Data type: Droptree</para></summary>
		public virtual ILinkFieldWrapper AvailableNowLabel => (Fortis.Model.RenderingParameters.Fields.LinkFieldWrapper)this.GetField("Available Now Label", "droptree");

		/// <summary><para>Field: AvailableSoonLabel</para><para>Data type: Droptree</para></summary>
		public virtual ILinkFieldWrapper AvailableSoonLabel => (Fortis.Model.RenderingParameters.Fields.LinkFieldWrapper)this.GetField("Available Soon Label", "droptree");

		/// <summary><para>Field: PageSummaryTitle</para><para>Data type: Droptree</para></summary>
		public virtual ILinkFieldWrapper PageSummaryTitle => (Fortis.Model.RenderingParameters.Fields.LinkFieldWrapper)this.GetField("Page Summary Title", "droptree");
	
	}
}
#endregion
#region Paged List Options (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary>
	/// <para>Template: Paged List Options</para>
	/// <para>ID: {38C5E9F3-7F85-44BC-BE0D-859B4A88B688}</para>
	/// <para>/sitecore/templates/User Defined/Shared/Paged Lists/Rendering Parameters/Paged List Options</para>
	/// </summary>
	[TemplateMapping("{38C5E9F3-7F85-44BC-BE0D-859B4A88B688}", "InterfaceRenderingParameterMap")]
	public partial interface IPagedListOptions :
		IRenderingParameterWrapper,
		LM.Model.Templates.Ignite.IIgniteRenderingParameters,
		LM.Model.Templates.PokerCentral.IInternalAdvertOptions	{
    	/// <summary><para>Template: Paged List Options</para><para>Field: Module Link Text</para><para>Data type: Droptree</para></summary>
		ILinkFieldWrapper ModuleLinkText { get; }
    	/// <summary><para>Template: Paged List Options</para><para>Field: Module Title</para><para>Data type: Droptree</para></summary>
		ILinkFieldWrapper ModuleTitle { get; }
    	/// <summary><para>Template: Paged List Options</para><para>Field: Next Button Text</para><para>Data type: Droptree</para></summary>
		ILinkFieldWrapper NextButtonText { get; }
    	/// <summary><para>Template: Paged List Options</para><para>Field: Number of Items</para><para>Data type: Single-Line Text</para></summary>
		ITextFieldWrapper NumberOfItems { get; }
    	/// <summary><para>Template: Paged List Options</para><para>Field: Previous Button Text</para><para>Data type: Droptree</para></summary>
		ILinkFieldWrapper PreviousButtonText { get; }
    	/// <summary><para>Template: Paged List Options</para><para>Field: Styles</para><para>Data type: Droplist</para></summary>
		ITextFieldWrapper Styles { get; }
	}
	
	[TemplateMapping("{38C5E9F3-7F85-44BC-BE0D-859B4A88B688}", "RenderingParameter")]
	public partial class PagedListOptions : RenderingParameterWrapper, IPagedListOptions
	{
		public PagedListOptions(Dictionary<string, string> parameters, ISpawnProvider spawnProvider)
			: base(parameters, spawnProvider)
		{ }

		/// <summary><para>Field: ModuleLinkText</para><para>Data type: Droptree</para></summary>
		public virtual ILinkFieldWrapper ModuleLinkText => (Fortis.Model.RenderingParameters.Fields.LinkFieldWrapper)this.GetField("Module Link Text", "droptree");

		/// <summary><para>Field: ModuleTitle</para><para>Data type: Droptree</para></summary>
		public virtual ILinkFieldWrapper ModuleTitle => (Fortis.Model.RenderingParameters.Fields.LinkFieldWrapper)this.GetField("Module Title", "droptree");

		/// <summary><para>Field: NextButtonText</para><para>Data type: Droptree</para></summary>
		public virtual ILinkFieldWrapper NextButtonText => (Fortis.Model.RenderingParameters.Fields.LinkFieldWrapper)this.GetField("Next Button Text", "droptree");

		/// <summary><para>Field: NumberOfItems</para><para>Data type: Single-Line Text</para></summary>
		public virtual ITextFieldWrapper NumberOfItems => (Fortis.Model.RenderingParameters.Fields.TextFieldWrapper)this.GetField("Number of Items", "single-line text");

		/// <summary><para>Field: PreviousButtonText</para><para>Data type: Droptree</para></summary>
		public virtual ILinkFieldWrapper PreviousButtonText => (Fortis.Model.RenderingParameters.Fields.LinkFieldWrapper)this.GetField("Previous Button Text", "droptree");

		/// <summary><para>Field: ShowAd</para><para>Data type: Checkbox</para></summary>
		public virtual IBooleanFieldWrapper ShowAd => (Fortis.Model.RenderingParameters.Fields.BooleanFieldWrapper)this.GetField("Show Ad", "checkbox");

		/// <summary><para>Field: ShowAdAfter</para><para>Data type: Number</para></summary>
		public virtual INumberFieldWrapper ShowAdAfter => (Fortis.Model.RenderingParameters.Fields.NumberFieldWrapper)this.GetField("Show Ad After", "number");

		/// <summary><para>Field: Styles</para><para>Data type: Droplist</para></summary>
		public virtual ITextFieldWrapper Styles => (Fortis.Model.RenderingParameters.Fields.TextFieldWrapper)this.GetField("Styles", "droplist");
	
	}
}
#endregion
#region Poll Answer (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Poll Answer</para><para>ID: {9A90680F-4337-4697-BB09-CA43DAFB294A}</para><para>/sitecore/templates/User Defined/Shared/Poll/Poll Answer</para></summary>
	[TemplateMapping("{9A90680F-4337-4697-BB09-CA43DAFB294A}", "InterfaceMap")]
	public partial interface IPollAnswer :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{

    	/// <summary><para>Template: Poll Answer</para><para>Field: Answer</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("answer")]
		ITextFieldWrapper Answer { get; }

    	/// <summary><para>Template: Poll Answer</para><para>Field: Answer</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("answer")]
		string AnswerValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{9A90680F-4337-4697-BB09-CA43DAFB294A}", typeof(Guid))]
	[TemplateMapping("{9A90680F-4337-4697-BB09-CA43DAFB294A}")]
	public partial class PollAnswer : CustomItemWrapper, IPollAnswer
	{
		public PollAnswer(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public PollAnswer(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: Answer</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("answer")]
		public virtual ITextFieldWrapper Answer => this.GetField<TextFieldWrapper>("Answer");

		[IndexField("answer")]
 		public string AnswerValue => this.Answer.Value;
	}
}
#endregion
#region Poll (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Poll</para><para>ID: {5481525B-CF28-43CB-9611-09C145C8279F}</para><para>/sitecore/templates/User Defined/Shared/Poll/Poll</para></summary>
	[TemplateMapping("{5481525B-CF28-43CB-9611-09C145C8279F}", "InterfaceMap")]
	public partial interface IPoll :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{

    	/// <summary><para>Template: Poll</para><para>Field: Poll Question</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("poll_question")]
		ITextFieldWrapper PollQuestion { get; }

    	/// <summary><para>Template: Poll</para><para>Field: Poll Question</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("poll_question")]
		string PollQuestionValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{5481525B-CF28-43CB-9611-09C145C8279F}", typeof(Guid))]
	[TemplateMapping("{5481525B-CF28-43CB-9611-09C145C8279F}")]
	public partial class Poll : CustomItemWrapper, IPoll
	{
		public Poll(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public Poll(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: PollQuestion</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("poll_question")]
		public virtual ITextFieldWrapper PollQuestion => this.GetField<TextFieldWrapper>("Poll Question");

		[IndexField("poll_question")]
 		public string PollQuestionValue => this.PollQuestion.Value;
	}
}
#endregion
#region Meta Data (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Meta Data</para><para>ID: {9A0ABA02-4903-4E04-8397-5528E6A358DE}</para><para>/sitecore/templates/User Defined/Shared/SEO/Meta Data</para></summary>
	[TemplateMapping("{9A0ABA02-4903-4E04-8397-5528E6A358DE}", "InterfaceMap")]
	public partial interface IMetaData :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{

    	/// <summary><para>Template: Meta Data</para><para>Field: Hide from Sitemap</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_sitemap")]
		IBooleanFieldWrapper HideFromSitemap { get; }

    	/// <summary><para>Template: Meta Data</para><para>Field: Hide from Sitemap</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_sitemap")]
		bool HideFromSitemapValue { get; }

    	/// <summary><para>Template: Meta Data</para><para>Field: Meta Canonical Url</para><para>Data type: General Link</para></summary>
		[IndexField("meta_canonical_url")]
		IGeneralLinkFieldWrapper MetaCanonicalUrl { get; }

    	/// <summary><para>Template: Meta Data</para><para>Field: Meta Canonical Url</para><para>Data type: General Link</para></summary>
		[IndexField("meta_canonical_url")]
		string MetaCanonicalUrlValue { get; }

    	/// <summary><para>Template: Meta Data</para><para>Field: Meta Description</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("meta_description")]
		ITextFieldWrapper MetaDescription { get; }

    	/// <summary><para>Template: Meta Data</para><para>Field: Meta Description</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("meta_description")]
		string MetaDescriptionValue { get; }

    	/// <summary><para>Template: Meta Data</para><para>Field: Meta Image</para><para>Data type: Image</para></summary>
		IImageFieldWrapper MetaImage { get; }

    	/// <summary><para>Template: Meta Data</para><para>Field: Meta Image</para><para>Data type: Image</para></summary>
		string MetaImageValue { get; }

    	/// <summary><para>Template: Meta Data</para><para>Field: Meta Keywords</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_keywords")]
		ITextFieldWrapper MetaKeywords { get; }

    	/// <summary><para>Template: Meta Data</para><para>Field: Meta Keywords</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_keywords")]
		string MetaKeywordsValue { get; }

    	/// <summary><para>Template: Meta Data</para><para>Field: Meta Title</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_title")]
		ITextFieldWrapper MetaTitle { get; }

    	/// <summary><para>Template: Meta Data</para><para>Field: Meta Title</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_title")]
		string MetaTitleValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{9A0ABA02-4903-4E04-8397-5528E6A358DE}", typeof(Guid))]
	[TemplateMapping("{9A0ABA02-4903-4E04-8397-5528E6A358DE}")]
	public partial class MetaData : CustomItemWrapper, IMetaData
	{
		public MetaData(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public MetaData(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: HideFromSitemap</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_sitemap")]
		public virtual IBooleanFieldWrapper HideFromSitemap => this.GetField<BooleanFieldWrapper>("Hide from Sitemap");

		[IndexField("hide_from_sitemap")]
 		public bool HideFromSitemapValue => this.HideFromSitemap.Value;

		/// <summary><para>Field: MetaCanonicalUrl</para><para>Data type: General Link</para></summary>
		[IndexField("meta_canonical_url")]
		public virtual IGeneralLinkFieldWrapper MetaCanonicalUrl => this.GetField<GeneralLinkFieldWrapper>("Meta Canonical Url");

		[IndexField("meta_canonical_url")]
 		public string MetaCanonicalUrlValue => this.MetaCanonicalUrl.Value;

		/// <summary><para>Field: MetaDescription</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("meta_description")]
		public virtual ITextFieldWrapper MetaDescription => this.GetField<TextFieldWrapper>("Meta Description");

		[IndexField("meta_description")]
 		public string MetaDescriptionValue => this.MetaDescription.Value;

		/// <summary><para>Field: MetaImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper MetaImage => this.GetField<ImageFieldWrapper>("Meta Image");

 		public string MetaImageValue => this.MetaImage.Value;

		/// <summary><para>Field: MetaKeywords</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_keywords")]
		public virtual ITextFieldWrapper MetaKeywords => this.GetField<TextFieldWrapper>("Meta Keywords");

		[IndexField("meta_keywords")]
 		public string MetaKeywordsValue => this.MetaKeywords.Value;

		/// <summary><para>Field: MetaTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_title")]
		public virtual ITextFieldWrapper MetaTitle => this.GetField<TextFieldWrapper>("Meta Title");

		[IndexField("meta_title")]
 		public string MetaTitleValue => this.MetaTitle.Value;
	}
}
#endregion
#region Base Settings (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Base Settings</para><para>ID: {234669E7-1942-4681-B327-A0814A544BB1}</para><para>/sitecore/templates/User Defined/Shared/Settings/Base Settings</para></summary>
	[TemplateMapping("{234669E7-1942-4681-B327-A0814A544BB1}", "InterfaceMap")]
	public partial interface IBaseSettings :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{234669E7-1942-4681-B327-A0814A544BB1}", typeof(Guid))]
	[TemplateMapping("{234669E7-1942-4681-B327-A0814A544BB1}")]
	public partial class BaseSettings : CustomItemWrapper, IBaseSettings
	{
		public BaseSettings(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public BaseSettings(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }
	}
}
#endregion
#region Error Settings (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Error Settings</para><para>ID: {E6E5348D-7EAF-43A0-BC84-ECA4258CBB5F}</para><para>/sitecore/templates/User Defined/Shared/Settings/Error Settings</para></summary>
	[TemplateMapping("{E6E5348D-7EAF-43A0-BC84-ECA4258CBB5F}", "InterfaceMap")]
	public partial interface IErrorSettings :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.PokerCentral.IBaseSettings
	{

    	/// <summary><para>Template: Error Settings</para><para>Field: Site 404 Page</para><para>Data type: Droptree</para></summary>
		[IndexField("site_404_page")]
		ILinkFieldWrapper Site404Page { get; }

    	/// <summary><para>Template: Error Settings</para><para>Field: Site 404 Page</para><para>Data type: Droptree</para></summary>
		[IndexField("site_404_page")]
		Guid Site404PageValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{E6E5348D-7EAF-43A0-BC84-ECA4258CBB5F}", typeof(Guid))]
	[TemplateMapping("{E6E5348D-7EAF-43A0-BC84-ECA4258CBB5F}")]
	public partial class ErrorSettings : CustomItemWrapper, IErrorSettings
	{
		public ErrorSettings(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public ErrorSettings(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: Site404Page</para><para>Data type: Droptree</para></summary>
		[IndexField("site_404_page")]
		public virtual ILinkFieldWrapper Site404Page => this.GetField<LinkFieldWrapper>("Site 404 Page");

		[IndexField("site_404_page")]
 		public Guid Site404PageValue => this.Site404Page.Value;
	}
}
#endregion
#region Footer Settings (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Footer Settings</para><para>ID: {4E9CE934-BFC0-456F-983B-C8DCCD6E2F87}</para><para>/sitecore/templates/User Defined/Shared/Settings/Footer Settings</para></summary>
	[TemplateMapping("{4E9CE934-BFC0-456F-983B-C8DCCD6E2F87}", "InterfaceMap")]
	public partial interface IFooterSettings :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.PokerCentral.IBaseSettings
	{

    	/// <summary><para>Template: Footer Settings</para><para>Field: Copywright Notice</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("copywright_notice")]
		ITextFieldWrapper CopywrightNotice { get; }

    	/// <summary><para>Template: Footer Settings</para><para>Field: Copywright Notice</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("copywright_notice")]
		string CopywrightNoticeValue { get; }

    	/// <summary><para>Template: Footer Settings</para><para>Field: Site by Item</para><para>Data type: Droplink</para></summary>
		[IndexField("site_by_item")]
		ILinkFieldWrapper SiteByItem { get; }

    	/// <summary><para>Template: Footer Settings</para><para>Field: Site by Item</para><para>Data type: Droplink</para></summary>
		[IndexField("site_by_item")]
		Guid SiteByItemValue { get; }

    	/// <summary><para>Template: Footer Settings</para><para>Field: Social Media Links</para><para>Data type: Multilist</para></summary>
		[IndexField("social_media_links")]
		IListFieldWrapper SocialMediaLinks { get; }

    	/// <summary><para>Template: Footer Settings</para><para>Field: Social Media Links</para><para>Data type: Multilist</para></summary>
		[IndexField("social_media_links")]
		IEnumerable<Guid> SocialMediaLinksValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{4E9CE934-BFC0-456F-983B-C8DCCD6E2F87}", typeof(Guid))]
	[TemplateMapping("{4E9CE934-BFC0-456F-983B-C8DCCD6E2F87}")]
	public partial class FooterSettings : CustomItemWrapper, IFooterSettings
	{
		public FooterSettings(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public FooterSettings(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: CopywrightNotice</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("copywright_notice")]
		public virtual ITextFieldWrapper CopywrightNotice => this.GetField<TextFieldWrapper>("Copywright Notice");

		[IndexField("copywright_notice")]
 		public string CopywrightNoticeValue => this.CopywrightNotice.Value;

		/// <summary><para>Field: SiteByItem</para><para>Data type: Droplink</para></summary>
		[IndexField("site_by_item")]
		public virtual ILinkFieldWrapper SiteByItem => this.GetField<LinkFieldWrapper>("Site by Item");

		[IndexField("site_by_item")]
 		public Guid SiteByItemValue => this.SiteByItem.Value;

		/// <summary><para>Field: SocialMediaLinks</para><para>Data type: Multilist</para></summary>
		[IndexField("social_media_links")]
		public virtual IListFieldWrapper SocialMediaLinks => this.GetField<ListFieldWrapper>("Social Media Links");

		[IndexField("social_media_links")]
 		public IEnumerable<Guid> SocialMediaLinksValue => this.SocialMediaLinks.Value;
	}
}
#endregion
#region OTT Device Settings (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: OTT Device Settings</para><para>ID: {C9462AF4-18E4-4B2A-902F-72023B5BFD90}</para><para>/sitecore/templates/User Defined/Shared/Settings/OTT Device Settings</para></summary>
	[TemplateMapping("{C9462AF4-18E4-4B2A-902F-72023B5BFD90}", "InterfaceMap")]
	public partial interface IOTTDeviceSettings :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.PokerCentral.IBaseSettings
	{

    	/// <summary><para>Template: OTT Device Settings</para><para>Field: Available Now</para><para>Data type: Multilist</para></summary>
		[IndexField("available_now")]
		IListFieldWrapper AvailableNow { get; }

    	/// <summary><para>Template: OTT Device Settings</para><para>Field: Available Now</para><para>Data type: Multilist</para></summary>
		[IndexField("available_now")]
		IEnumerable<Guid> AvailableNowValue { get; }

    	/// <summary><para>Template: OTT Device Settings</para><para>Field: Available Soon</para><para>Data type: Multilist</para></summary>
		[IndexField("available_soon")]
		IListFieldWrapper AvailableSoon { get; }

    	/// <summary><para>Template: OTT Device Settings</para><para>Field: Available Soon</para><para>Data type: Multilist</para></summary>
		[IndexField("available_soon")]
		IEnumerable<Guid> AvailableSoonValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{C9462AF4-18E4-4B2A-902F-72023B5BFD90}", typeof(Guid))]
	[TemplateMapping("{C9462AF4-18E4-4B2A-902F-72023B5BFD90}")]
	public partial class OTTDeviceSettings : CustomItemWrapper, IOTTDeviceSettings
	{
		public OTTDeviceSettings(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public OTTDeviceSettings(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: AvailableNow</para><para>Data type: Multilist</para></summary>
		[IndexField("available_now")]
		public virtual IListFieldWrapper AvailableNow => this.GetField<ListFieldWrapper>("Available Now");

		[IndexField("available_now")]
 		public IEnumerable<Guid> AvailableNowValue => this.AvailableNow.Value;

		/// <summary><para>Field: AvailableSoon</para><para>Data type: Multilist</para></summary>
		[IndexField("available_soon")]
		public virtual IListFieldWrapper AvailableSoon => this.GetField<ListFieldWrapper>("Available Soon");

		[IndexField("available_soon")]
 		public IEnumerable<Guid> AvailableSoonValue => this.AvailableSoon.Value;
	}
}
#endregion
#region Settings Folder (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Settings Folder</para><para>ID: {FA1CB636-74B5-4105-9F7F-AA298B9ADD12}</para><para>/sitecore/templates/User Defined/Shared/Settings/Settings Folder</para></summary>
	[TemplateMapping("{FA1CB636-74B5-4105-9F7F-AA298B9ADD12}", "InterfaceMap")]
	public partial interface ISettingsFolder :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteFolder,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{FA1CB636-74B5-4105-9F7F-AA298B9ADD12}", typeof(Guid))]
	[TemplateMapping("{FA1CB636-74B5-4105-9F7F-AA298B9ADD12}")]
	public partial class SettingsFolder : CustomItemWrapper, ISettingsFolder
	{
		public SettingsFolder(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public SettingsFolder(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }
	}
}
#endregion
#region Site Settings (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Site Settings</para><para>ID: {7F2B1F43-C2B3-4872-9580-D9D80ED942B0}</para><para>/sitecore/templates/User Defined/Shared/Settings/Site Settings</para></summary>
	[TemplateMapping("{7F2B1F43-C2B3-4872-9580-D9D80ED942B0}", "InterfaceMap")]
	public partial interface ISiteSettings :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.PokerCentral.IBaseSettings
	{

    	/// <summary><para>Template: Site Settings</para><para>Field: Count Down Date</para><para>Data type: Datetime</para></summary>
		[IndexField("count_down_date")]
		IDateTimeFieldWrapper CountDownDate { get; }

    	/// <summary><para>Template: Site Settings</para><para>Field: Count Down Date</para><para>Data type: Datetime</para></summary>
		[IndexField("count_down_date")]
		DateTime CountDownDateValue { get; }

    	/// <summary><para>Template: Site Settings</para><para>Field: Favorite Player List</para><para>Data type: Multilist with Search</para></summary>
		[IndexField("favorite_player_list")]
		IListFieldWrapper FavoritePlayerList { get; }

    	/// <summary><para>Template: Site Settings</para><para>Field: Favorite Player List</para><para>Data type: Multilist with Search</para></summary>
		[IndexField("favorite_player_list")]
		IEnumerable<Guid> FavoritePlayerListValue { get; }

    	/// <summary><para>Template: Site Settings</para><para>Field: Favorite Show List</para><para>Data type: Multilist with Search</para></summary>
		[IndexField("favorite_show_list")]
		IListFieldWrapper FavoriteShowList { get; }

    	/// <summary><para>Template: Site Settings</para><para>Field: Favorite Show List</para><para>Data type: Multilist with Search</para></summary>
		[IndexField("favorite_show_list")]
		IEnumerable<Guid> FavoriteShowListValue { get; }

    	/// <summary><para>Template: Site Settings</para><para>Field: Is Count Down Enabled</para><para>Data type: Checkbox</para></summary>
		[IndexField("is_count_down_enabled")]
		IBooleanFieldWrapper IsCountDownEnabled { get; }

    	/// <summary><para>Template: Site Settings</para><para>Field: Is Count Down Enabled</para><para>Data type: Checkbox</para></summary>
		[IndexField("is_count_down_enabled")]
		bool IsCountDownEnabledValue { get; }

    	/// <summary><para>Template: Site Settings</para><para>Field: Login Page</para><para>Data type: Droptree</para></summary>
		[IndexField("login_page")]
		ILinkFieldWrapper LoginPage { get; }

    	/// <summary><para>Template: Site Settings</para><para>Field: Login Page</para><para>Data type: Droptree</para></summary>
		[IndexField("login_page")]
		Guid LoginPageValue { get; }

    	/// <summary><para>Template: Site Settings</para><para>Field: Mail List Client Id</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("mail_list_client_id")]
		ITextFieldWrapper MailListClientId { get; }

    	/// <summary><para>Template: Site Settings</para><para>Field: Mail List Client Id</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("mail_list_client_id")]
		string MailListClientIdValue { get; }

    	/// <summary><para>Template: Site Settings</para><para>Field: Mail List List Id</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("mail_list_list_id")]
		ITextFieldWrapper MailListListId { get; }

    	/// <summary><para>Template: Site Settings</para><para>Field: Mail List List Id</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("mail_list_list_id")]
		string MailListListIdValue { get; }

    	/// <summary><para>Template: Site Settings</para><para>Field: Profile Page</para><para>Data type: Droptree</para></summary>
		[IndexField("profile_page")]
		ILinkFieldWrapper ProfilePage { get; }

    	/// <summary><para>Template: Site Settings</para><para>Field: Profile Page</para><para>Data type: Droptree</para></summary>
		[IndexField("profile_page")]
		Guid ProfilePageValue { get; }

    	/// <summary><para>Template: Site Settings</para><para>Field: Profile Setup Page</para><para>Data type: Droptree</para></summary>
		[IndexField("profile_setup_page")]
		ILinkFieldWrapper ProfileSetupPage { get; }

    	/// <summary><para>Template: Site Settings</para><para>Field: Profile Setup Page</para><para>Data type: Droptree</para></summary>
		[IndexField("profile_setup_page")]
		Guid ProfileSetupPageValue { get; }

    	/// <summary><para>Template: Site Settings</para><para>Field: Register Page</para><para>Data type: Droptree</para></summary>
		[IndexField("register_page")]
		ILinkFieldWrapper RegisterPage { get; }

    	/// <summary><para>Template: Site Settings</para><para>Field: Register Page</para><para>Data type: Droptree</para></summary>
		[IndexField("register_page")]
		Guid RegisterPageValue { get; }

    	/// <summary><para>Template: Site Settings</para><para>Field: Reset Password Page</para><para>Data type: Droptree</para></summary>
		[IndexField("reset_password_page")]
		ILinkFieldWrapper ResetPasswordPage { get; }

    	/// <summary><para>Template: Site Settings</para><para>Field: Reset Password Page</para><para>Data type: Droptree</para></summary>
		[IndexField("reset_password_page")]
		Guid ResetPasswordPageValue { get; }

    	/// <summary><para>Template: Site Settings</para><para>Field: Show Folder</para><para>Data type: Droptree</para></summary>
		[IndexField("show_folder")]
		ILinkFieldWrapper ShowFolder { get; }

    	/// <summary><para>Template: Site Settings</para><para>Field: Show Folder</para><para>Data type: Droptree</para></summary>
		[IndexField("show_folder")]
		Guid ShowFolderValue { get; }

    	/// <summary><para>Template: Site Settings</para><para>Field: Video Share Page</para><para>Data type: Droptree</para></summary>
		[IndexField("video_share_page")]
		ILinkFieldWrapper VideoSharePage { get; }

    	/// <summary><para>Template: Site Settings</para><para>Field: Video Share Page</para><para>Data type: Droptree</para></summary>
		[IndexField("video_share_page")]
		Guid VideoSharePageValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{7F2B1F43-C2B3-4872-9580-D9D80ED942B0}", typeof(Guid))]
	[TemplateMapping("{7F2B1F43-C2B3-4872-9580-D9D80ED942B0}")]
	public partial class SiteSettings : CustomItemWrapper, ISiteSettings
	{
		public SiteSettings(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public SiteSettings(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: CountDownDate</para><para>Data type: Datetime</para></summary>
		[IndexField("count_down_date")]
		public virtual IDateTimeFieldWrapper CountDownDate => this.GetField<DateTimeFieldWrapper>("Count Down Date");

		[IndexField("count_down_date")]
 		public DateTime CountDownDateValue => this.CountDownDate.Value;

		/// <summary><para>Field: FavoritePlayerList</para><para>Data type: Multilist with Search</para></summary>
		[IndexField("favorite_player_list")]
		public virtual IListFieldWrapper FavoritePlayerList => this.GetField<ListFieldWrapper>("Favorite Player List");

		[IndexField("favorite_player_list")]
 		public IEnumerable<Guid> FavoritePlayerListValue => this.FavoritePlayerList.Value;

		/// <summary><para>Field: FavoriteShowList</para><para>Data type: Multilist with Search</para></summary>
		[IndexField("favorite_show_list")]
		public virtual IListFieldWrapper FavoriteShowList => this.GetField<ListFieldWrapper>("Favorite Show List");

		[IndexField("favorite_show_list")]
 		public IEnumerable<Guid> FavoriteShowListValue => this.FavoriteShowList.Value;

		/// <summary><para>Field: IsCountDownEnabled</para><para>Data type: Checkbox</para></summary>
		[IndexField("is_count_down_enabled")]
		public virtual IBooleanFieldWrapper IsCountDownEnabled => this.GetField<BooleanFieldWrapper>("Is Count Down Enabled");

		[IndexField("is_count_down_enabled")]
 		public bool IsCountDownEnabledValue => this.IsCountDownEnabled.Value;

		/// <summary><para>Field: LoginPage</para><para>Data type: Droptree</para></summary>
		[IndexField("login_page")]
		public virtual ILinkFieldWrapper LoginPage => this.GetField<LinkFieldWrapper>("Login Page");

		[IndexField("login_page")]
 		public Guid LoginPageValue => this.LoginPage.Value;

		/// <summary><para>Field: MailListClientId</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("mail_list_client_id")]
		public virtual ITextFieldWrapper MailListClientId => this.GetField<TextFieldWrapper>("Mail List Client Id");

		[IndexField("mail_list_client_id")]
 		public string MailListClientIdValue => this.MailListClientId.Value;

		/// <summary><para>Field: MailListListId</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("mail_list_list_id")]
		public virtual ITextFieldWrapper MailListListId => this.GetField<TextFieldWrapper>("Mail List List Id");

		[IndexField("mail_list_list_id")]
 		public string MailListListIdValue => this.MailListListId.Value;

		/// <summary><para>Field: ProfilePage</para><para>Data type: Droptree</para></summary>
		[IndexField("profile_page")]
		public virtual ILinkFieldWrapper ProfilePage => this.GetField<LinkFieldWrapper>("Profile Page");

		[IndexField("profile_page")]
 		public Guid ProfilePageValue => this.ProfilePage.Value;

		/// <summary><para>Field: ProfileSetupPage</para><para>Data type: Droptree</para></summary>
		[IndexField("profile_setup_page")]
		public virtual ILinkFieldWrapper ProfileSetupPage => this.GetField<LinkFieldWrapper>("Profile Setup Page");

		[IndexField("profile_setup_page")]
 		public Guid ProfileSetupPageValue => this.ProfileSetupPage.Value;

		/// <summary><para>Field: RegisterPage</para><para>Data type: Droptree</para></summary>
		[IndexField("register_page")]
		public virtual ILinkFieldWrapper RegisterPage => this.GetField<LinkFieldWrapper>("Register Page");

		[IndexField("register_page")]
 		public Guid RegisterPageValue => this.RegisterPage.Value;

		/// <summary><para>Field: ResetPasswordPage</para><para>Data type: Droptree</para></summary>
		[IndexField("reset_password_page")]
		public virtual ILinkFieldWrapper ResetPasswordPage => this.GetField<LinkFieldWrapper>("Reset Password Page");

		[IndexField("reset_password_page")]
 		public Guid ResetPasswordPageValue => this.ResetPasswordPage.Value;

		/// <summary><para>Field: ShowFolder</para><para>Data type: Droptree</para></summary>
		[IndexField("show_folder")]
		public virtual ILinkFieldWrapper ShowFolder => this.GetField<LinkFieldWrapper>("Show Folder");

		[IndexField("show_folder")]
 		public Guid ShowFolderValue => this.ShowFolder.Value;

		/// <summary><para>Field: VideoSharePage</para><para>Data type: Droptree</para></summary>
		[IndexField("video_share_page")]
		public virtual ILinkFieldWrapper VideoSharePage => this.GetField<LinkFieldWrapper>("Video Share Page");

		[IndexField("video_share_page")]
 		public Guid VideoSharePageValue => this.VideoSharePage.Value;
	}
}
#endregion
#region Home Page (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Home Page</para><para>ID: {0C4BBB1E-5B0F-41AA-B5A0-E3226076C676}</para><para>/sitecore/templates/User Defined/Shared/Sites/Page Types/Home Page</para></summary>
	[TemplateMapping("{0C4BBB1E-5B0F-41AA-B5A0-E3226076C676}", "InterfaceMap")]
	public partial interface IHomePage :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.PokerCentral.IContentPage,
		LM.Model.Templates.PokerCentral.IContent,
		LM.Model.Templates.PokerCentral.IAnalyticsTracking,
		LM.Model.Templates.PokerCentral.INavigation,
		LM.Model.Templates.PokerCentral.IMetaData
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{0C4BBB1E-5B0F-41AA-B5A0-E3226076C676}", typeof(Guid))]
	[TemplateMapping("{0C4BBB1E-5B0F-41AA-B5A0-E3226076C676}")]
	public partial class HomePage : CustomItemWrapper, IHomePage
	{
		public HomePage(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public HomePage(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: ContentBody</para><para>Data type: Rich Text</para></summary>
		[IndexField("content_body")]
		public virtual IRichTextFieldWrapper ContentBody => this.GetField<RichTextFieldWrapper>("Content Body");

		[IndexField("content_body")]
 		public string ContentBodyValue => this.ContentBody.Value;

		/// <summary><para>Field: HideFromMenu</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_menu")]
		public virtual IBooleanFieldWrapper HideFromMenu => this.GetField<BooleanFieldWrapper>("Hide From Menu");

		[IndexField("hide_from_menu")]
 		public bool HideFromMenuValue => this.HideFromMenu.Value;

		/// <summary><para>Field: HideFromSitemap</para><para>Data type: Checkbox</para></summary>
		[IndexField("hide_from_sitemap")]
		public virtual IBooleanFieldWrapper HideFromSitemap => this.GetField<BooleanFieldWrapper>("Hide from Sitemap");

		[IndexField("hide_from_sitemap")]
 		public bool HideFromSitemapValue => this.HideFromSitemap.Value;

		/// <summary><para>Field: MetaCanonicalUrl</para><para>Data type: General Link</para></summary>
		[IndexField("meta_canonical_url")]
		public virtual IGeneralLinkFieldWrapper MetaCanonicalUrl => this.GetField<GeneralLinkFieldWrapper>("Meta Canonical Url");

		[IndexField("meta_canonical_url")]
 		public string MetaCanonicalUrlValue => this.MetaCanonicalUrl.Value;

		/// <summary><para>Field: MetaDescription</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("meta_description")]
		public virtual ITextFieldWrapper MetaDescription => this.GetField<TextFieldWrapper>("Meta Description");

		[IndexField("meta_description")]
 		public string MetaDescriptionValue => this.MetaDescription.Value;

		/// <summary><para>Field: MetaImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper MetaImage => this.GetField<ImageFieldWrapper>("Meta Image");

 		public string MetaImageValue => this.MetaImage.Value;

		/// <summary><para>Field: MetaKeywords</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_keywords")]
		public virtual ITextFieldWrapper MetaKeywords => this.GetField<TextFieldWrapper>("Meta Keywords");

		[IndexField("meta_keywords")]
 		public string MetaKeywordsValue => this.MetaKeywords.Value;

		/// <summary><para>Field: MetaTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_title")]
		public virtual ITextFieldWrapper MetaTitle => this.GetField<TextFieldWrapper>("Meta Title");

		[IndexField("meta_title")]
 		public string MetaTitleValue => this.MetaTitle.Value;

		/// <summary><para>Field: NavigationImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper NavigationImage => this.GetField<ImageFieldWrapper>("Navigation Image");

 		public string NavigationImageValue => this.NavigationImage.Value;

		/// <summary><para>Field: NavigationTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("navigation_title")]
		public virtual ITextFieldWrapper NavigationTitle => this.GetField<TextFieldWrapper>("Navigation Title");

		[IndexField("navigation_title")]
 		public string NavigationTitleValue => this.NavigationTitle.Value;

		/// <summary><para>Field: NavigationUrl</para><para>Data type: General Link</para></summary>
		[IndexField("navigation_url")]
		public virtual IGeneralLinkFieldWrapper NavigationUrl => this.GetField<GeneralLinkFieldWrapper>("Navigation Url");

		[IndexField("navigation_url")]
 		public string NavigationUrlValue => this.NavigationUrl.Value;

		/// <summary><para>Field: PageSummary</para><para>Data type: Multi-Line Text</para></summary>
		[IndexField("page_summary")]
		public virtual ITextFieldWrapper PageSummary => this.GetField<TextFieldWrapper>("Page Summary");

		[IndexField("page_summary")]
 		public string PageSummaryValue => this.PageSummary.Value;

		/// <summary><para>Field: PageTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("page_title")]
		public virtual ITextFieldWrapper PageTitle => this.GetField<TextFieldWrapper>("Page Title");

		[IndexField("page_title")]
 		public string PageTitleValue => this.PageTitle.Value;

		/// <summary><para>Field: TrackingAction</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_action")]
		public virtual ITextFieldWrapper TrackingAction => this.GetField<TextFieldWrapper>("Tracking Action");

		[IndexField("tracking_action")]
 		public string TrackingActionValue => this.TrackingAction.Value;

		/// <summary><para>Field: TrackingCategory</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_category")]
		public virtual ITextFieldWrapper TrackingCategory => this.GetField<TextFieldWrapper>("Tracking Category");

		[IndexField("tracking_category")]
 		public string TrackingCategoryValue => this.TrackingCategory.Value;

		/// <summary><para>Field: TrackingLabel</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("tracking_label")]
		public virtual ITextFieldWrapper TrackingLabel => this.GetField<TextFieldWrapper>("Tracking Label");

		[IndexField("tracking_label")]
 		public string TrackingLabelValue => this.TrackingLabel.Value;
	}
}
#endregion
#region Site Root (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Site Root</para><para>ID: {16C0EF20-4B23-4201-B57D-F8A60BADC17B}</para><para>/sitecore/templates/User Defined/Shared/Sites/Site Root</para></summary>
	[TemplateMapping("{16C0EF20-4B23-4201-B57D-F8A60BADC17B}", "InterfaceMap")]
	public partial interface ISiteRoot :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{

    	/// <summary><para>Template: Site Root</para><para>Field: Meta Facebook App Id</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_facebook_app_id")]
		ITextFieldWrapper MetaFacebookAppId { get; }

    	/// <summary><para>Template: Site Root</para><para>Field: Meta Facebook App Id</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_facebook_app_id")]
		string MetaFacebookAppIdValue { get; }

    	/// <summary><para>Template: Site Root</para><para>Field: Meta Site Title</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_site_title")]
		ITextFieldWrapper MetaSiteTitle { get; }

    	/// <summary><para>Template: Site Root</para><para>Field: Meta Site Title</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_site_title")]
		string MetaSiteTitleValue { get; }

    	/// <summary><para>Template: Site Root</para><para>Field: Meta Twitter Account</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_twitter_account")]
		ITextFieldWrapper MetaTwitterAccount { get; }

    	/// <summary><para>Template: Site Root</para><para>Field: Meta Twitter Account</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_twitter_account")]
		string MetaTwitterAccountValue { get; }

    	/// <summary><para>Template: Site Root</para><para>Field: Settings Folder</para><para>Data type: Droptree</para></summary>
		[IndexField("settings_folder")]
		ILinkFieldWrapper SettingsFolder { get; }

    	/// <summary><para>Template: Site Root</para><para>Field: Settings Folder</para><para>Data type: Droptree</para></summary>
		[IndexField("settings_folder")]
		Guid SettingsFolderValue { get; }

    	/// <summary><para>Template: Site Root</para><para>Field: Site Background Image</para><para>Data type: Image</para></summary>
		IImageFieldWrapper SiteBackgroundImage { get; }

    	/// <summary><para>Template: Site Root</para><para>Field: Site Background Image</para><para>Data type: Image</para></summary>
		string SiteBackgroundImageValue { get; }

    	/// <summary><para>Template: Site Root</para><para>Field: Site Logo</para><para>Data type: Image</para></summary>
		IImageFieldWrapper SiteLogo { get; }

    	/// <summary><para>Template: Site Root</para><para>Field: Site Logo</para><para>Data type: Image</para></summary>
		string SiteLogoValue { get; }

    	/// <summary><para>Template: Site Root</para><para>Field: Site Title</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("site_title")]
		ITextFieldWrapper SiteTitle { get; }

    	/// <summary><para>Template: Site Root</para><para>Field: Site Title</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("site_title")]
		string SiteTitleValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{16C0EF20-4B23-4201-B57D-F8A60BADC17B}", typeof(Guid))]
	[TemplateMapping("{16C0EF20-4B23-4201-B57D-F8A60BADC17B}")]
	public partial class SiteRoot : CustomItemWrapper, ISiteRoot
	{
		public SiteRoot(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public SiteRoot(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: MetaFacebookAppId</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_facebook_app_id")]
		public virtual ITextFieldWrapper MetaFacebookAppId => this.GetField<TextFieldWrapper>("Meta Facebook App Id");

		[IndexField("meta_facebook_app_id")]
 		public string MetaFacebookAppIdValue => this.MetaFacebookAppId.Value;

		/// <summary><para>Field: MetaSiteTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_site_title")]
		public virtual ITextFieldWrapper MetaSiteTitle => this.GetField<TextFieldWrapper>("Meta Site Title");

		[IndexField("meta_site_title")]
 		public string MetaSiteTitleValue => this.MetaSiteTitle.Value;

		/// <summary><para>Field: MetaTwitterAccount</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("meta_twitter_account")]
		public virtual ITextFieldWrapper MetaTwitterAccount => this.GetField<TextFieldWrapper>("Meta Twitter Account");

		[IndexField("meta_twitter_account")]
 		public string MetaTwitterAccountValue => this.MetaTwitterAccount.Value;

		/// <summary><para>Field: SettingsFolder</para><para>Data type: Droptree</para></summary>
		[IndexField("settings_folder")]
		public virtual ILinkFieldWrapper SettingsFolder => this.GetField<LinkFieldWrapper>("Settings Folder");

		[IndexField("settings_folder")]
 		public Guid SettingsFolderValue => this.SettingsFolder.Value;

		/// <summary><para>Field: SiteBackgroundImage</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper SiteBackgroundImage => this.GetField<ImageFieldWrapper>("Site Background Image");

 		public string SiteBackgroundImageValue => this.SiteBackgroundImage.Value;

		/// <summary><para>Field: SiteLogo</para><para>Data type: Image</para></summary>
		public virtual IImageFieldWrapper SiteLogo => this.GetField<ImageFieldWrapper>("Site Logo");

 		public string SiteLogoValue => this.SiteLogo.Value;

		/// <summary><para>Field: SiteTitle</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("site_title")]
		public virtual ITextFieldWrapper SiteTitle => this.GetField<TextFieldWrapper>("Site Title");

		[IndexField("site_title")]
 		public string SiteTitleValue => this.SiteTitle.Value;
	}
}
#endregion
#region Twitter Feed Options (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary>
	/// <para>Template: Twitter Feed Options</para>
	/// <para>ID: {41D63E58-E034-4BA6-B56D-C62564305BC4}</para>
	/// <para>/sitecore/templates/User Defined/Shared/Social Media/Rendering Parameters/Twitter Feed Options</para>
	/// </summary>
	[TemplateMapping("{41D63E58-E034-4BA6-B56D-C62564305BC4}", "InterfaceRenderingParameterMap")]
	public partial interface ITwitterFeedOptions :
		IRenderingParameterWrapper,
		LM.Model.Templates.Ignite.IIgniteRenderingParameters	{
    	/// <summary><para>Template: Twitter Feed Options</para><para>Field: Module Title</para><para>Data type: Droptree</para></summary>
		ILinkFieldWrapper ModuleTitle { get; }
    	/// <summary><para>Template: Twitter Feed Options</para><para>Field: Number of Items</para><para>Data type: Single-Line Text</para></summary>
		ITextFieldWrapper NumberOfItems { get; }
	}
	
	[TemplateMapping("{41D63E58-E034-4BA6-B56D-C62564305BC4}", "RenderingParameter")]
	public partial class TwitterFeedOptions : RenderingParameterWrapper, ITwitterFeedOptions
	{
		public TwitterFeedOptions(Dictionary<string, string> parameters, ISpawnProvider spawnProvider)
			: base(parameters, spawnProvider)
		{ }

		/// <summary><para>Field: ModuleTitle</para><para>Data type: Droptree</para></summary>
		public virtual ILinkFieldWrapper ModuleTitle => (Fortis.Model.RenderingParameters.Fields.LinkFieldWrapper)this.GetField("Module Title", "droptree");

		/// <summary><para>Field: NumberOfItems</para><para>Data type: Single-Line Text</para></summary>
		public virtual ITextFieldWrapper NumberOfItems => (Fortis.Model.RenderingParameters.Fields.TextFieldWrapper)this.GetField("Number of Items", "single-line text");
	
	}
}
#endregion
#region Social Media Folder (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Social Media Folder</para><para>ID: {43E53022-FDFE-4E77-90AE-F11176F6DAF3}</para><para>/sitecore/templates/User Defined/Shared/Social Media/Social Media Folder</para></summary>
	[TemplateMapping("{43E53022-FDFE-4E77-90AE-F11176F6DAF3}", "InterfaceMap")]
	public partial interface ISocialMediaFolder :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteFolder,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{43E53022-FDFE-4E77-90AE-F11176F6DAF3}", typeof(Guid))]
	[TemplateMapping("{43E53022-FDFE-4E77-90AE-F11176F6DAF3}")]
	public partial class SocialMediaFolder : CustomItemWrapper, ISocialMediaFolder
	{
		public SocialMediaFolder(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public SocialMediaFolder(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }
	}
}
#endregion
#region Social Media Link (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Social Media Link</para><para>ID: {153A097D-4C65-4A7F-9302-A8318EB89857}</para><para>/sitecore/templates/User Defined/Shared/Social Media/Social Media Link</para></summary>
	[TemplateMapping("{153A097D-4C65-4A7F-9302-A8318EB89857}", "InterfaceMap")]
	public partial interface ISocialMediaLink :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate
	{

    	/// <summary><para>Template: Social Media Link</para><para>Field: Link Url</para><para>Data type: General Link</para></summary>
		[IndexField("link_url")]
		IGeneralLinkFieldWrapper LinkUrl { get; }

    	/// <summary><para>Template: Social Media Link</para><para>Field: Link Url</para><para>Data type: General Link</para></summary>
		[IndexField("link_url")]
		string LinkUrlValue { get; }

    	/// <summary><para>Template: Social Media Link</para><para>Field: Sprite Id</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("sprite_id")]
		ITextFieldWrapper SpriteId { get; }

    	/// <summary><para>Template: Social Media Link</para><para>Field: Sprite Id</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("sprite_id")]
		string SpriteIdValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{153A097D-4C65-4A7F-9302-A8318EB89857}", typeof(Guid))]
	[TemplateMapping("{153A097D-4C65-4A7F-9302-A8318EB89857}")]
	public partial class SocialMediaLink : CustomItemWrapper, ISocialMediaLink
	{
		public SocialMediaLink(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public SocialMediaLink(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: LinkUrl</para><para>Data type: General Link</para></summary>
		[IndexField("link_url")]
		public virtual IGeneralLinkFieldWrapper LinkUrl => this.GetField<GeneralLinkFieldWrapper>("Link Url");

		[IndexField("link_url")]
 		public string LinkUrlValue => this.LinkUrl.Value;

		/// <summary><para>Field: SpriteId</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("sprite_id")]
		public virtual ITextFieldWrapper SpriteId => this.GetField<TextFieldWrapper>("Sprite Id");

		[IndexField("sprite_id")]
 		public string SpriteIdValue => this.SpriteId.Value;
	}
}
#endregion
#region Social Media Settings (PokerCentral)
namespace LM.Model.Templates.PokerCentral
{
	/// <summary><para>Template: Social Media Settings</para><para>ID: {ABCE9E8B-7B32-4C49-9235-73B5D6067789}</para><para>/sitecore/templates/User Defined/Shared/Social Media/Social Media Settings</para></summary>
	[TemplateMapping("{ABCE9E8B-7B32-4C49-9235-73B5D6067789}", "InterfaceMap")]
	public partial interface ISocialMediaSettings :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IIgniteStandardTemplate,
		LM.Model.Templates.PokerCentral.IBaseSettings
	{

    	/// <summary><para>Template: Social Media Settings</para><para>Field: Twitter Screen Name</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("twitter_screen_name")]
		ITextFieldWrapper TwitterScreenName { get; }

    	/// <summary><para>Template: Social Media Settings</para><para>Field: Twitter Screen Name</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("twitter_screen_name")]
		string TwitterScreenNameValue { get; }

    	/// <summary><para>Template: Social Media Settings</para><para>Field: Twitter UserId</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("twitter_userid")]
		ITextFieldWrapper TwitterUserId { get; }

    	/// <summary><para>Template: Social Media Settings</para><para>Field: Twitter UserId</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("twitter_userid")]
		string TwitterUserIdValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{ABCE9E8B-7B32-4C49-9235-73B5D6067789}", typeof(Guid))]
	[TemplateMapping("{ABCE9E8B-7B32-4C49-9235-73B5D6067789}")]
	public partial class SocialMediaSettings : CustomItemWrapper, ISocialMediaSettings
	{
		public SocialMediaSettings(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public SocialMediaSettings(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: TwitterScreenName</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("twitter_screen_name")]
		public virtual ITextFieldWrapper TwitterScreenName => this.GetField<TextFieldWrapper>("Twitter Screen Name");

		[IndexField("twitter_screen_name")]
 		public string TwitterScreenNameValue => this.TwitterScreenName.Value;

		/// <summary><para>Field: TwitterUserId</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("twitter_userid")]
		public virtual ITextFieldWrapper TwitterUserId => this.GetField<TextFieldWrapper>("Twitter UserId");

		[IndexField("twitter_userid")]
 		public string TwitterUserIdValue => this.TwitterUserId.Value;
	}
}
#endregion
#region Media folder (ScSystem)
namespace LM.Model.Templates.ScSystem
{
	/// <summary><para>Template: Media folder</para><para>ID: {FE5DD826-48C6-436D-B87A-7C4210C7413B}</para><para>/sitecore/templates/System/Media/Media folder</para></summary>
	[TemplateMapping("{FE5DD826-48C6-436D-B87A-7C4210C7413B}", "InterfaceMap")]
	public partial interface IMediaFolder :
		ICustomItemWrapper
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{FE5DD826-48C6-436D-B87A-7C4210C7413B}", typeof(Guid))]
	[TemplateMapping("{FE5DD826-48C6-436D-B87A-7C4210C7413B}")]
	public partial class MediaFolder : CustomItemWrapper, IMediaFolder
	{
		public MediaFolder(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public MediaFolder(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }
	}
}
#endregion
#region Audio (ScSystem)
namespace LM.Model.Templates.ScSystem
{
	/// <summary><para>Template: Audio</para><para>ID: {D56DB3AA-7373-4651-837E-8D3977A0B544}</para><para>/sitecore/templates/System/Media/Unversioned/Audio</para></summary>
	[TemplateMapping("{D56DB3AA-7373-4651-837E-8D3977A0B544}", "InterfaceMap")]
	public partial interface IAudio :
		ICustomItemWrapper,
		LM.Model.Templates.ScSystem.IFile
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{D56DB3AA-7373-4651-837E-8D3977A0B544}", typeof(Guid))]
	[TemplateMapping("{D56DB3AA-7373-4651-837E-8D3977A0B544}")]
	public partial class Audio : CustomItemWrapper, IAudio
	{
		public Audio(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public Audio(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: Blob</para><para>Data type: attachment</para></summary>
		public virtual ITextFieldWrapper Blob => this.GetField<TextFieldWrapper>("Blob");

 		public string BlobValue => this.Blob.Value;

		/// <summary><para>Field: CountryCode</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("countrycode")]
		public virtual ITextFieldWrapper CountryCode => this.GetField<TextFieldWrapper>("CountryCode");

		[IndexField("countrycode")]
 		public string CountryCodeValue => this.CountryCode.Value;

		/// <summary><para>Field: Description</para><para>Data type: text</para></summary>
		[IndexField("description")]
		public virtual ITextFieldWrapper Description => this.GetField<TextFieldWrapper>("Description");

		[IndexField("description")]
 		public string DescriptionValue => this.Description.Value;

		/// <summary><para>Field: Extension</para><para>Data type: text</para></summary>
		[IndexField("extension")]
		public virtual ITextFieldWrapper Extension => this.GetField<TextFieldWrapper>("Extension");

		[IndexField("extension")]
 		public string ExtensionValue => this.Extension.Value;

		/// <summary><para>Field: FilePath</para><para>Data type: text</para></summary>
		[IndexField("file_path")]
		public virtual ITextFieldWrapper FilePath => this.GetField<TextFieldWrapper>("File Path");

		[IndexField("file_path")]
 		public string FilePathValue => this.FilePath.Value;

		/// <summary><para>Field: Format</para><para>Data type: text</para></summary>
		[IndexField("format")]
		public virtual ITextFieldWrapper Format => this.GetField<TextFieldWrapper>("Format");

		[IndexField("format")]
 		public string FormatValue => this.Format.Value;

		/// <summary><para>Field: Keywords</para><para>Data type: memo</para></summary>
		public virtual ITextFieldWrapper Keywords => this.GetField<TextFieldWrapper>("Keywords");

 		public string KeywordsValue => this.Keywords.Value;

		/// <summary><para>Field: Latitude</para><para>Data type: Number</para></summary>
		[IndexField("latitude")]
		public virtual INumberFieldWrapper Latitude => this.GetField<NumberFieldWrapper>("Latitude");

		[IndexField("latitude")]
 		public float LatitudeValue => this.Latitude.Value;

		/// <summary><para>Field: LocationDescription</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("locationdescription")]
		public virtual ITextFieldWrapper LocationDescription => this.GetField<TextFieldWrapper>("LocationDescription");

		[IndexField("locationdescription")]
 		public string LocationDescriptionValue => this.LocationDescription.Value;

		/// <summary><para>Field: Longitude</para><para>Data type: Number</para></summary>
		[IndexField("longitude")]
		public virtual INumberFieldWrapper Longitude => this.GetField<NumberFieldWrapper>("Longitude");

		[IndexField("longitude")]
 		public float LongitudeValue => this.Longitude.Value;

		/// <summary><para>Field: MimeType</para><para>Data type: text</para></summary>
		[IndexField("mime_type")]
		public virtual ITextFieldWrapper MimeType => this.GetField<TextFieldWrapper>("Mime Type");

		[IndexField("mime_type")]
 		public string MimeTypeValue => this.MimeType.Value;

		/// <summary><para>Field: Size</para><para>Data type: text</para></summary>
		[IndexField("size")]
		public virtual ITextFieldWrapper Size => this.GetField<TextFieldWrapper>("Size");

		[IndexField("size")]
 		public string SizeValue => this.Size.Value;

		/// <summary><para>Field: Title</para><para>Data type: text</para></summary>
		[IndexField("title")]
		public virtual ITextFieldWrapper Title => this.GetField<TextFieldWrapper>("Title");

		[IndexField("title")]
 		public string TitleValue => this.Title.Value;

		/// <summary><para>Field: ZipCode</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("zipcode")]
		public virtual ITextFieldWrapper ZipCode => this.GetField<TextFieldWrapper>("ZipCode");

		[IndexField("zipcode")]
 		public string ZipCodeValue => this.ZipCode.Value;
	}
}
#endregion
#region Doc (ScSystem)
namespace LM.Model.Templates.ScSystem
{
	/// <summary><para>Template: Doc</para><para>ID: {16692733-9A61-45E6-B0D4-4C0C06F8DD3C}</para><para>/sitecore/templates/System/Media/Unversioned/Doc</para></summary>
	[TemplateMapping("{16692733-9A61-45E6-B0D4-4C0C06F8DD3C}", "InterfaceMap")]
	public partial interface IDoc :
		ICustomItemWrapper,
		LM.Model.Templates.ScSystem.IDocument,
		LM.Model.Templates.ScSystem.IFile
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{16692733-9A61-45E6-B0D4-4C0C06F8DD3C}", typeof(Guid))]
	[TemplateMapping("{16692733-9A61-45E6-B0D4-4C0C06F8DD3C}")]
	public partial class Doc : CustomItemWrapper, IDoc
	{
		public Doc(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public Doc(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: Blob</para><para>Data type: attachment</para></summary>
		public virtual ITextFieldWrapper Blob => this.GetField<TextFieldWrapper>("Blob");

 		public string BlobValue => this.Blob.Value;

		/// <summary><para>Field: CountryCode</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("countrycode")]
		public virtual ITextFieldWrapper CountryCode => this.GetField<TextFieldWrapper>("CountryCode");

		[IndexField("countrycode")]
 		public string CountryCodeValue => this.CountryCode.Value;

		/// <summary><para>Field: Description</para><para>Data type: text</para></summary>
		[IndexField("description")]
		public virtual ITextFieldWrapper Description => this.GetField<TextFieldWrapper>("Description");

		[IndexField("description")]
 		public string DescriptionValue => this.Description.Value;

		/// <summary><para>Field: Extension</para><para>Data type: text</para></summary>
		[IndexField("extension")]
		public virtual ITextFieldWrapper Extension => this.GetField<TextFieldWrapper>("Extension");

		[IndexField("extension")]
 		public string ExtensionValue => this.Extension.Value;

		/// <summary><para>Field: FilePath</para><para>Data type: text</para></summary>
		[IndexField("file_path")]
		public virtual ITextFieldWrapper FilePath => this.GetField<TextFieldWrapper>("File Path");

		[IndexField("file_path")]
 		public string FilePathValue => this.FilePath.Value;

		/// <summary><para>Field: Format</para><para>Data type: text</para></summary>
		[IndexField("format")]
		public virtual ITextFieldWrapper Format => this.GetField<TextFieldWrapper>("Format");

		[IndexField("format")]
 		public string FormatValue => this.Format.Value;

		/// <summary><para>Field: Keywords</para><para>Data type: memo</para></summary>
		public virtual ITextFieldWrapper Keywords => this.GetField<TextFieldWrapper>("Keywords");

 		public string KeywordsValue => this.Keywords.Value;

		/// <summary><para>Field: Latitude</para><para>Data type: Number</para></summary>
		[IndexField("latitude")]
		public virtual INumberFieldWrapper Latitude => this.GetField<NumberFieldWrapper>("Latitude");

		[IndexField("latitude")]
 		public float LatitudeValue => this.Latitude.Value;

		/// <summary><para>Field: LocationDescription</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("locationdescription")]
		public virtual ITextFieldWrapper LocationDescription => this.GetField<TextFieldWrapper>("LocationDescription");

		[IndexField("locationdescription")]
 		public string LocationDescriptionValue => this.LocationDescription.Value;

		/// <summary><para>Field: Longitude</para><para>Data type: Number</para></summary>
		[IndexField("longitude")]
		public virtual INumberFieldWrapper Longitude => this.GetField<NumberFieldWrapper>("Longitude");

		[IndexField("longitude")]
 		public float LongitudeValue => this.Longitude.Value;

		/// <summary><para>Field: MimeType</para><para>Data type: text</para></summary>
		[IndexField("mime_type")]
		public virtual ITextFieldWrapper MimeType => this.GetField<TextFieldWrapper>("Mime Type");

		[IndexField("mime_type")]
 		public string MimeTypeValue => this.MimeType.Value;

		/// <summary><para>Field: Size</para><para>Data type: text</para></summary>
		[IndexField("size")]
		public virtual ITextFieldWrapper Size => this.GetField<TextFieldWrapper>("Size");

		[IndexField("size")]
 		public string SizeValue => this.Size.Value;

		/// <summary><para>Field: Title</para><para>Data type: text</para></summary>
		[IndexField("title")]
		public virtual ITextFieldWrapper Title => this.GetField<TextFieldWrapper>("Title");

		[IndexField("title")]
 		public string TitleValue => this.Title.Value;

		/// <summary><para>Field: ZipCode</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("zipcode")]
		public virtual ITextFieldWrapper ZipCode => this.GetField<TextFieldWrapper>("ZipCode");

		[IndexField("zipcode")]
 		public string ZipCodeValue => this.ZipCode.Value;
	}
}
#endregion
#region Document (ScSystem)
namespace LM.Model.Templates.ScSystem
{
	/// <summary><para>Template: Document</para><para>ID: {777F0C76-D712-46EA-9F40-371ACDA18A1C}</para><para>/sitecore/templates/System/Media/Unversioned/Document</para></summary>
	[TemplateMapping("{777F0C76-D712-46EA-9F40-371ACDA18A1C}", "InterfaceMap")]
	public partial interface IDocument :
		ICustomItemWrapper,
		LM.Model.Templates.ScSystem.IFile
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{777F0C76-D712-46EA-9F40-371ACDA18A1C}", typeof(Guid))]
	[TemplateMapping("{777F0C76-D712-46EA-9F40-371ACDA18A1C}")]
	public partial class Document : CustomItemWrapper, IDocument
	{
		public Document(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public Document(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: Blob</para><para>Data type: attachment</para></summary>
		public virtual ITextFieldWrapper Blob => this.GetField<TextFieldWrapper>("Blob");

 		public string BlobValue => this.Blob.Value;

		/// <summary><para>Field: CountryCode</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("countrycode")]
		public virtual ITextFieldWrapper CountryCode => this.GetField<TextFieldWrapper>("CountryCode");

		[IndexField("countrycode")]
 		public string CountryCodeValue => this.CountryCode.Value;

		/// <summary><para>Field: Description</para><para>Data type: text</para></summary>
		[IndexField("description")]
		public virtual ITextFieldWrapper Description => this.GetField<TextFieldWrapper>("Description");

		[IndexField("description")]
 		public string DescriptionValue => this.Description.Value;

		/// <summary><para>Field: Extension</para><para>Data type: text</para></summary>
		[IndexField("extension")]
		public virtual ITextFieldWrapper Extension => this.GetField<TextFieldWrapper>("Extension");

		[IndexField("extension")]
 		public string ExtensionValue => this.Extension.Value;

		/// <summary><para>Field: FilePath</para><para>Data type: text</para></summary>
		[IndexField("file_path")]
		public virtual ITextFieldWrapper FilePath => this.GetField<TextFieldWrapper>("File Path");

		[IndexField("file_path")]
 		public string FilePathValue => this.FilePath.Value;

		/// <summary><para>Field: Format</para><para>Data type: text</para></summary>
		[IndexField("format")]
		public virtual ITextFieldWrapper Format => this.GetField<TextFieldWrapper>("Format");

		[IndexField("format")]
 		public string FormatValue => this.Format.Value;

		/// <summary><para>Field: Keywords</para><para>Data type: memo</para></summary>
		public virtual ITextFieldWrapper Keywords => this.GetField<TextFieldWrapper>("Keywords");

 		public string KeywordsValue => this.Keywords.Value;

		/// <summary><para>Field: Latitude</para><para>Data type: Number</para></summary>
		[IndexField("latitude")]
		public virtual INumberFieldWrapper Latitude => this.GetField<NumberFieldWrapper>("Latitude");

		[IndexField("latitude")]
 		public float LatitudeValue => this.Latitude.Value;

		/// <summary><para>Field: LocationDescription</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("locationdescription")]
		public virtual ITextFieldWrapper LocationDescription => this.GetField<TextFieldWrapper>("LocationDescription");

		[IndexField("locationdescription")]
 		public string LocationDescriptionValue => this.LocationDescription.Value;

		/// <summary><para>Field: Longitude</para><para>Data type: Number</para></summary>
		[IndexField("longitude")]
		public virtual INumberFieldWrapper Longitude => this.GetField<NumberFieldWrapper>("Longitude");

		[IndexField("longitude")]
 		public float LongitudeValue => this.Longitude.Value;

		/// <summary><para>Field: MimeType</para><para>Data type: text</para></summary>
		[IndexField("mime_type")]
		public virtual ITextFieldWrapper MimeType => this.GetField<TextFieldWrapper>("Mime Type");

		[IndexField("mime_type")]
 		public string MimeTypeValue => this.MimeType.Value;

		/// <summary><para>Field: Size</para><para>Data type: text</para></summary>
		[IndexField("size")]
		public virtual ITextFieldWrapper Size => this.GetField<TextFieldWrapper>("Size");

		[IndexField("size")]
 		public string SizeValue => this.Size.Value;

		/// <summary><para>Field: Title</para><para>Data type: text</para></summary>
		[IndexField("title")]
		public virtual ITextFieldWrapper Title => this.GetField<TextFieldWrapper>("Title");

		[IndexField("title")]
 		public string TitleValue => this.Title.Value;

		/// <summary><para>Field: ZipCode</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("zipcode")]
		public virtual ITextFieldWrapper ZipCode => this.GetField<TextFieldWrapper>("ZipCode");

		[IndexField("zipcode")]
 		public string ZipCodeValue => this.ZipCode.Value;
	}
}
#endregion
#region Docx (ScSystem)
namespace LM.Model.Templates.ScSystem
{
	/// <summary><para>Template: Docx</para><para>ID: {7BB0411F-50CD-4C21-AD8F-1FCDE7C3AFFE}</para><para>/sitecore/templates/System/Media/Unversioned/Docx</para></summary>
	[TemplateMapping("{7BB0411F-50CD-4C21-AD8F-1FCDE7C3AFFE}", "InterfaceMap")]
	public partial interface IDocx :
		ICustomItemWrapper,
		LM.Model.Templates.ScSystem.IDocument,
		LM.Model.Templates.ScSystem.IFile
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{7BB0411F-50CD-4C21-AD8F-1FCDE7C3AFFE}", typeof(Guid))]
	[TemplateMapping("{7BB0411F-50CD-4C21-AD8F-1FCDE7C3AFFE}")]
	public partial class Docx : CustomItemWrapper, IDocx
	{
		public Docx(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public Docx(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: Blob</para><para>Data type: attachment</para></summary>
		public virtual ITextFieldWrapper Blob => this.GetField<TextFieldWrapper>("Blob");

 		public string BlobValue => this.Blob.Value;

		/// <summary><para>Field: CountryCode</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("countrycode")]
		public virtual ITextFieldWrapper CountryCode => this.GetField<TextFieldWrapper>("CountryCode");

		[IndexField("countrycode")]
 		public string CountryCodeValue => this.CountryCode.Value;

		/// <summary><para>Field: Description</para><para>Data type: text</para></summary>
		[IndexField("description")]
		public virtual ITextFieldWrapper Description => this.GetField<TextFieldWrapper>("Description");

		[IndexField("description")]
 		public string DescriptionValue => this.Description.Value;

		/// <summary><para>Field: Extension</para><para>Data type: text</para></summary>
		[IndexField("extension")]
		public virtual ITextFieldWrapper Extension => this.GetField<TextFieldWrapper>("Extension");

		[IndexField("extension")]
 		public string ExtensionValue => this.Extension.Value;

		/// <summary><para>Field: FilePath</para><para>Data type: text</para></summary>
		[IndexField("file_path")]
		public virtual ITextFieldWrapper FilePath => this.GetField<TextFieldWrapper>("File Path");

		[IndexField("file_path")]
 		public string FilePathValue => this.FilePath.Value;

		/// <summary><para>Field: Format</para><para>Data type: text</para></summary>
		[IndexField("format")]
		public virtual ITextFieldWrapper Format => this.GetField<TextFieldWrapper>("Format");

		[IndexField("format")]
 		public string FormatValue => this.Format.Value;

		/// <summary><para>Field: Keywords</para><para>Data type: memo</para></summary>
		public virtual ITextFieldWrapper Keywords => this.GetField<TextFieldWrapper>("Keywords");

 		public string KeywordsValue => this.Keywords.Value;

		/// <summary><para>Field: Latitude</para><para>Data type: Number</para></summary>
		[IndexField("latitude")]
		public virtual INumberFieldWrapper Latitude => this.GetField<NumberFieldWrapper>("Latitude");

		[IndexField("latitude")]
 		public float LatitudeValue => this.Latitude.Value;

		/// <summary><para>Field: LocationDescription</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("locationdescription")]
		public virtual ITextFieldWrapper LocationDescription => this.GetField<TextFieldWrapper>("LocationDescription");

		[IndexField("locationdescription")]
 		public string LocationDescriptionValue => this.LocationDescription.Value;

		/// <summary><para>Field: Longitude</para><para>Data type: Number</para></summary>
		[IndexField("longitude")]
		public virtual INumberFieldWrapper Longitude => this.GetField<NumberFieldWrapper>("Longitude");

		[IndexField("longitude")]
 		public float LongitudeValue => this.Longitude.Value;

		/// <summary><para>Field: MimeType</para><para>Data type: text</para></summary>
		[IndexField("mime_type")]
		public virtual ITextFieldWrapper MimeType => this.GetField<TextFieldWrapper>("Mime Type");

		[IndexField("mime_type")]
 		public string MimeTypeValue => this.MimeType.Value;

		/// <summary><para>Field: Size</para><para>Data type: text</para></summary>
		[IndexField("size")]
		public virtual ITextFieldWrapper Size => this.GetField<TextFieldWrapper>("Size");

		[IndexField("size")]
 		public string SizeValue => this.Size.Value;

		/// <summary><para>Field: Title</para><para>Data type: text</para></summary>
		[IndexField("title")]
		public virtual ITextFieldWrapper Title => this.GetField<TextFieldWrapper>("Title");

		[IndexField("title")]
 		public string TitleValue => this.Title.Value;

		/// <summary><para>Field: ZipCode</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("zipcode")]
		public virtual ITextFieldWrapper ZipCode => this.GetField<TextFieldWrapper>("ZipCode");

		[IndexField("zipcode")]
 		public string ZipCodeValue => this.ZipCode.Value;
	}
}
#endregion
#region File (ScSystem)
namespace LM.Model.Templates.ScSystem
{
	/// <summary><para>Template: File</para><para>ID: {962B53C4-F93B-4DF9-9821-415C867B8903}</para><para>/sitecore/templates/System/Media/Unversioned/File</para></summary>
	[TemplateMapping("{962B53C4-F93B-4DF9-9821-415C867B8903}", "InterfaceMap")]
	public partial interface IFile :
		ICustomItemWrapper
	{

    	/// <summary><para>Template: File</para><para>Field: Blob</para><para>Data type: attachment</para></summary>
		ITextFieldWrapper Blob { get; }

    	/// <summary><para>Template: File</para><para>Field: Blob</para><para>Data type: attachment</para></summary>
		string BlobValue { get; }

    	/// <summary><para>Template: File</para><para>Field: CountryCode</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("countrycode")]
		ITextFieldWrapper CountryCode { get; }

    	/// <summary><para>Template: File</para><para>Field: CountryCode</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("countrycode")]
		string CountryCodeValue { get; }

    	/// <summary><para>Template: File</para><para>Field: Description</para><para>Data type: text</para></summary>
		[IndexField("description")]
		ITextFieldWrapper Description { get; }

    	/// <summary><para>Template: File</para><para>Field: Description</para><para>Data type: text</para></summary>
		[IndexField("description")]
		string DescriptionValue { get; }

    	/// <summary><para>Template: File</para><para>Field: Extension</para><para>Data type: text</para></summary>
		[IndexField("extension")]
		ITextFieldWrapper Extension { get; }

    	/// <summary><para>Template: File</para><para>Field: Extension</para><para>Data type: text</para></summary>
		[IndexField("extension")]
		string ExtensionValue { get; }

    	/// <summary><para>Template: File</para><para>Field: File Path</para><para>Data type: text</para></summary>
		[IndexField("file_path")]
		ITextFieldWrapper FilePath { get; }

    	/// <summary><para>Template: File</para><para>Field: File Path</para><para>Data type: text</para></summary>
		[IndexField("file_path")]
		string FilePathValue { get; }

    	/// <summary><para>Template: File</para><para>Field: Format</para><para>Data type: text</para></summary>
		[IndexField("format")]
		ITextFieldWrapper Format { get; }

    	/// <summary><para>Template: File</para><para>Field: Format</para><para>Data type: text</para></summary>
		[IndexField("format")]
		string FormatValue { get; }

    	/// <summary><para>Template: File</para><para>Field: Keywords</para><para>Data type: memo</para></summary>
		ITextFieldWrapper Keywords { get; }

    	/// <summary><para>Template: File</para><para>Field: Keywords</para><para>Data type: memo</para></summary>
		string KeywordsValue { get; }

    	/// <summary><para>Template: File</para><para>Field: Latitude</para><para>Data type: Number</para></summary>
		[IndexField("latitude")]
		INumberFieldWrapper Latitude { get; }

    	/// <summary><para>Template: File</para><para>Field: Latitude</para><para>Data type: Number</para></summary>
		[IndexField("latitude")]
		float LatitudeValue { get; }

    	/// <summary><para>Template: File</para><para>Field: LocationDescription</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("locationdescription")]
		ITextFieldWrapper LocationDescription { get; }

    	/// <summary><para>Template: File</para><para>Field: LocationDescription</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("locationdescription")]
		string LocationDescriptionValue { get; }

    	/// <summary><para>Template: File</para><para>Field: Longitude</para><para>Data type: Number</para></summary>
		[IndexField("longitude")]
		INumberFieldWrapper Longitude { get; }

    	/// <summary><para>Template: File</para><para>Field: Longitude</para><para>Data type: Number</para></summary>
		[IndexField("longitude")]
		float LongitudeValue { get; }

    	/// <summary><para>Template: File</para><para>Field: Mime Type</para><para>Data type: text</para></summary>
		[IndexField("mime_type")]
		ITextFieldWrapper MimeType { get; }

    	/// <summary><para>Template: File</para><para>Field: Mime Type</para><para>Data type: text</para></summary>
		[IndexField("mime_type")]
		string MimeTypeValue { get; }

    	/// <summary><para>Template: File</para><para>Field: Size</para><para>Data type: text</para></summary>
		[IndexField("size")]
		ITextFieldWrapper Size { get; }

    	/// <summary><para>Template: File</para><para>Field: Size</para><para>Data type: text</para></summary>
		[IndexField("size")]
		string SizeValue { get; }

    	/// <summary><para>Template: File</para><para>Field: Title</para><para>Data type: text</para></summary>
		[IndexField("title")]
		ITextFieldWrapper Title { get; }

    	/// <summary><para>Template: File</para><para>Field: Title</para><para>Data type: text</para></summary>
		[IndexField("title")]
		string TitleValue { get; }

    	/// <summary><para>Template: File</para><para>Field: ZipCode</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("zipcode")]
		ITextFieldWrapper ZipCode { get; }

    	/// <summary><para>Template: File</para><para>Field: ZipCode</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("zipcode")]
		string ZipCodeValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{962B53C4-F93B-4DF9-9821-415C867B8903}", typeof(Guid))]
	[TemplateMapping("{962B53C4-F93B-4DF9-9821-415C867B8903}")]
	public partial class File : CustomItemWrapper, IFile
	{
		public File(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public File(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: Blob</para><para>Data type: attachment</para></summary>
		public virtual ITextFieldWrapper Blob => this.GetField<TextFieldWrapper>("Blob");

 		public string BlobValue => this.Blob.Value;

		/// <summary><para>Field: CountryCode</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("countrycode")]
		public virtual ITextFieldWrapper CountryCode => this.GetField<TextFieldWrapper>("CountryCode");

		[IndexField("countrycode")]
 		public string CountryCodeValue => this.CountryCode.Value;

		/// <summary><para>Field: Description</para><para>Data type: text</para></summary>
		[IndexField("description")]
		public virtual ITextFieldWrapper Description => this.GetField<TextFieldWrapper>("Description");

		[IndexField("description")]
 		public string DescriptionValue => this.Description.Value;

		/// <summary><para>Field: Extension</para><para>Data type: text</para></summary>
		[IndexField("extension")]
		public virtual ITextFieldWrapper Extension => this.GetField<TextFieldWrapper>("Extension");

		[IndexField("extension")]
 		public string ExtensionValue => this.Extension.Value;

		/// <summary><para>Field: FilePath</para><para>Data type: text</para></summary>
		[IndexField("file_path")]
		public virtual ITextFieldWrapper FilePath => this.GetField<TextFieldWrapper>("File Path");

		[IndexField("file_path")]
 		public string FilePathValue => this.FilePath.Value;

		/// <summary><para>Field: Format</para><para>Data type: text</para></summary>
		[IndexField("format")]
		public virtual ITextFieldWrapper Format => this.GetField<TextFieldWrapper>("Format");

		[IndexField("format")]
 		public string FormatValue => this.Format.Value;

		/// <summary><para>Field: Keywords</para><para>Data type: memo</para></summary>
		public virtual ITextFieldWrapper Keywords => this.GetField<TextFieldWrapper>("Keywords");

 		public string KeywordsValue => this.Keywords.Value;

		/// <summary><para>Field: Latitude</para><para>Data type: Number</para></summary>
		[IndexField("latitude")]
		public virtual INumberFieldWrapper Latitude => this.GetField<NumberFieldWrapper>("Latitude");

		[IndexField("latitude")]
 		public float LatitudeValue => this.Latitude.Value;

		/// <summary><para>Field: LocationDescription</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("locationdescription")]
		public virtual ITextFieldWrapper LocationDescription => this.GetField<TextFieldWrapper>("LocationDescription");

		[IndexField("locationdescription")]
 		public string LocationDescriptionValue => this.LocationDescription.Value;

		/// <summary><para>Field: Longitude</para><para>Data type: Number</para></summary>
		[IndexField("longitude")]
		public virtual INumberFieldWrapper Longitude => this.GetField<NumberFieldWrapper>("Longitude");

		[IndexField("longitude")]
 		public float LongitudeValue => this.Longitude.Value;

		/// <summary><para>Field: MimeType</para><para>Data type: text</para></summary>
		[IndexField("mime_type")]
		public virtual ITextFieldWrapper MimeType => this.GetField<TextFieldWrapper>("Mime Type");

		[IndexField("mime_type")]
 		public string MimeTypeValue => this.MimeType.Value;

		/// <summary><para>Field: Size</para><para>Data type: text</para></summary>
		[IndexField("size")]
		public virtual ITextFieldWrapper Size => this.GetField<TextFieldWrapper>("Size");

		[IndexField("size")]
 		public string SizeValue => this.Size.Value;

		/// <summary><para>Field: Title</para><para>Data type: text</para></summary>
		[IndexField("title")]
		public virtual ITextFieldWrapper Title => this.GetField<TextFieldWrapper>("Title");

		[IndexField("title")]
 		public string TitleValue => this.Title.Value;

		/// <summary><para>Field: ZipCode</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("zipcode")]
		public virtual ITextFieldWrapper ZipCode => this.GetField<TextFieldWrapper>("ZipCode");

		[IndexField("zipcode")]
 		public string ZipCodeValue => this.ZipCode.Value;
	}
}
#endregion
#region Flash (ScSystem)
namespace LM.Model.Templates.ScSystem
{
	/// <summary><para>Template: Flash</para><para>ID: {9867C0B9-A7BE-4D96-AD7E-4AD18109ED20}</para><para>/sitecore/templates/System/Media/Unversioned/Flash</para></summary>
	[TemplateMapping("{9867C0B9-A7BE-4D96-AD7E-4AD18109ED20}", "InterfaceMap")]
	public partial interface IFlash :
		ICustomItemWrapper,
		LM.Model.Templates.ScSystem.IFile,
		LM.Model.Templates.ScSystem.IMovie
	{

    	/// <summary><para>Template: Flash</para><para>Field: Dimensions</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("dimensions")]
		ITextFieldWrapper Dimensions { get; }

    	/// <summary><para>Template: Flash</para><para>Field: Dimensions</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("dimensions")]
		string DimensionsValue { get; }

    	/// <summary><para>Template: Flash</para><para>Field: FrameCount</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("framecount")]
		ITextFieldWrapper FrameCount { get; }

    	/// <summary><para>Template: Flash</para><para>Field: FrameCount</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("framecount")]
		string FrameCountValue { get; }

    	/// <summary><para>Template: Flash</para><para>Field: FrameRate</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("framerate")]
		ITextFieldWrapper FrameRate { get; }

    	/// <summary><para>Template: Flash</para><para>Field: FrameRate</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("framerate")]
		string FrameRateValue { get; }

    	/// <summary><para>Template: Flash</para><para>Field: Height</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("height")]
		ITextFieldWrapper Height { get; }

    	/// <summary><para>Template: Flash</para><para>Field: Height</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("height")]
		string HeightValue { get; }

    	/// <summary><para>Template: Flash</para><para>Field: Version</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("version")]
		ITextFieldWrapper Version { get; }

    	/// <summary><para>Template: Flash</para><para>Field: Version</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("version")]
		string VersionValue { get; }

    	/// <summary><para>Template: Flash</para><para>Field: Width</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("width")]
		ITextFieldWrapper Width { get; }

    	/// <summary><para>Template: Flash</para><para>Field: Width</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("width")]
		string WidthValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{9867C0B9-A7BE-4D96-AD7E-4AD18109ED20}", typeof(Guid))]
	[TemplateMapping("{9867C0B9-A7BE-4D96-AD7E-4AD18109ED20}")]
	public partial class Flash : CustomItemWrapper, IFlash
	{
		public Flash(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public Flash(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: Blob</para><para>Data type: attachment</para></summary>
		public virtual ITextFieldWrapper Blob => this.GetField<TextFieldWrapper>("Blob");

 		public string BlobValue => this.Blob.Value;

		/// <summary><para>Field: CountryCode</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("countrycode")]
		public virtual ITextFieldWrapper CountryCode => this.GetField<TextFieldWrapper>("CountryCode");

		[IndexField("countrycode")]
 		public string CountryCodeValue => this.CountryCode.Value;

		/// <summary><para>Field: Description</para><para>Data type: text</para></summary>
		[IndexField("description")]
		public virtual ITextFieldWrapper Description => this.GetField<TextFieldWrapper>("Description");

		[IndexField("description")]
 		public string DescriptionValue => this.Description.Value;

		/// <summary><para>Field: Dimensions</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("dimensions")]
		public virtual ITextFieldWrapper Dimensions => this.GetField<TextFieldWrapper>("Dimensions");

		[IndexField("dimensions")]
 		public string DimensionsValue => this.Dimensions.Value;

		/// <summary><para>Field: Extension</para><para>Data type: text</para></summary>
		[IndexField("extension")]
		public virtual ITextFieldWrapper Extension => this.GetField<TextFieldWrapper>("Extension");

		[IndexField("extension")]
 		public string ExtensionValue => this.Extension.Value;

		/// <summary><para>Field: FilePath</para><para>Data type: text</para></summary>
		[IndexField("file_path")]
		public virtual ITextFieldWrapper FilePath => this.GetField<TextFieldWrapper>("File Path");

		[IndexField("file_path")]
 		public string FilePathValue => this.FilePath.Value;

		/// <summary><para>Field: Format</para><para>Data type: text</para></summary>
		[IndexField("format")]
		public virtual ITextFieldWrapper Format => this.GetField<TextFieldWrapper>("Format");

		[IndexField("format")]
 		public string FormatValue => this.Format.Value;

		/// <summary><para>Field: FrameCount</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("framecount")]
		public virtual ITextFieldWrapper FrameCount => this.GetField<TextFieldWrapper>("FrameCount");

		[IndexField("framecount")]
 		public string FrameCountValue => this.FrameCount.Value;

		/// <summary><para>Field: FrameRate</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("framerate")]
		public virtual ITextFieldWrapper FrameRate => this.GetField<TextFieldWrapper>("FrameRate");

		[IndexField("framerate")]
 		public string FrameRateValue => this.FrameRate.Value;

		/// <summary><para>Field: Height</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("height")]
		public virtual ITextFieldWrapper Height => this.GetField<TextFieldWrapper>("Height");

		[IndexField("height")]
 		public string HeightValue => this.Height.Value;

		/// <summary><para>Field: Keywords</para><para>Data type: memo</para></summary>
		public virtual ITextFieldWrapper Keywords => this.GetField<TextFieldWrapper>("Keywords");

 		public string KeywordsValue => this.Keywords.Value;

		/// <summary><para>Field: Latitude</para><para>Data type: Number</para></summary>
		[IndexField("latitude")]
		public virtual INumberFieldWrapper Latitude => this.GetField<NumberFieldWrapper>("Latitude");

		[IndexField("latitude")]
 		public float LatitudeValue => this.Latitude.Value;

		/// <summary><para>Field: LocationDescription</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("locationdescription")]
		public virtual ITextFieldWrapper LocationDescription => this.GetField<TextFieldWrapper>("LocationDescription");

		[IndexField("locationdescription")]
 		public string LocationDescriptionValue => this.LocationDescription.Value;

		/// <summary><para>Field: Longitude</para><para>Data type: Number</para></summary>
		[IndexField("longitude")]
		public virtual INumberFieldWrapper Longitude => this.GetField<NumberFieldWrapper>("Longitude");

		[IndexField("longitude")]
 		public float LongitudeValue => this.Longitude.Value;

		/// <summary><para>Field: MimeType</para><para>Data type: text</para></summary>
		[IndexField("mime_type")]
		public virtual ITextFieldWrapper MimeType => this.GetField<TextFieldWrapper>("Mime Type");

		[IndexField("mime_type")]
 		public string MimeTypeValue => this.MimeType.Value;

		/// <summary><para>Field: Size</para><para>Data type: text</para></summary>
		[IndexField("size")]
		public virtual ITextFieldWrapper Size => this.GetField<TextFieldWrapper>("Size");

		[IndexField("size")]
 		public string SizeValue => this.Size.Value;

		/// <summary><para>Field: Title</para><para>Data type: text</para></summary>
		[IndexField("title")]
		public virtual ITextFieldWrapper Title => this.GetField<TextFieldWrapper>("Title");

		[IndexField("title")]
 		public string TitleValue => this.Title.Value;

		/// <summary><para>Field: Version</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("version")]
		public virtual ITextFieldWrapper Version => this.GetField<TextFieldWrapper>("Version");

		[IndexField("version")]
 		public string VersionValue => this.Version.Value;

		/// <summary><para>Field: Width</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("width")]
		public virtual ITextFieldWrapper Width => this.GetField<TextFieldWrapper>("Width");

		[IndexField("width")]
 		public string WidthValue => this.Width.Value;

		/// <summary><para>Field: ZipCode</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("zipcode")]
		public virtual ITextFieldWrapper ZipCode => this.GetField<TextFieldWrapper>("ZipCode");

		[IndexField("zipcode")]
 		public string ZipCodeValue => this.ZipCode.Value;
	}
}
#endregion
#region Image (ScSystem)
namespace LM.Model.Templates.ScSystem
{
	/// <summary><para>Template: Image</para><para>ID: {F1828A2C-7E5D-4BBD-98CA-320474871548}</para><para>/sitecore/templates/System/Media/Unversioned/Image</para></summary>
	[TemplateMapping("{F1828A2C-7E5D-4BBD-98CA-320474871548}", "InterfaceMap")]
	public partial interface IImage :
		ICustomItemWrapper,
		LM.Model.Templates.ScSystem.IFile
	{

    	/// <summary><para>Template: Image</para><para>Field: Alt</para><para>Data type: text</para></summary>
		[IndexField("alt")]
		ITextFieldWrapper Alt { get; }

    	/// <summary><para>Template: Image</para><para>Field: Alt</para><para>Data type: text</para></summary>
		[IndexField("alt")]
		string AltValue { get; }

    	/// <summary><para>Template: Image</para><para>Field: Dimensions</para><para>Data type: text</para></summary>
		[IndexField("dimensions")]
		ITextFieldWrapper Dimensions { get; }

    	/// <summary><para>Template: Image</para><para>Field: Dimensions</para><para>Data type: text</para></summary>
		[IndexField("dimensions")]
		string DimensionsValue { get; }

    	/// <summary><para>Template: Image</para><para>Field: Height</para><para>Data type: text</para></summary>
		[IndexField("height")]
		ITextFieldWrapper Height { get; }

    	/// <summary><para>Template: Image</para><para>Field: Height</para><para>Data type: text</para></summary>
		[IndexField("height")]
		string HeightValue { get; }

    	/// <summary><para>Template: Image</para><para>Field: Width</para><para>Data type: text</para></summary>
		[IndexField("width")]
		ITextFieldWrapper Width { get; }

    	/// <summary><para>Template: Image</para><para>Field: Width</para><para>Data type: text</para></summary>
		[IndexField("width")]
		string WidthValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{F1828A2C-7E5D-4BBD-98CA-320474871548}", typeof(Guid))]
	[TemplateMapping("{F1828A2C-7E5D-4BBD-98CA-320474871548}")]
	public partial class Image : CustomItemWrapper, IImage
	{
		public Image(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public Image(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: Alt</para><para>Data type: text</para></summary>
		[IndexField("alt")]
		public virtual ITextFieldWrapper Alt => this.GetField<TextFieldWrapper>("Alt");

		[IndexField("alt")]
 		public string AltValue => this.Alt.Value;

		/// <summary><para>Field: Blob</para><para>Data type: attachment</para></summary>
		public virtual ITextFieldWrapper Blob => this.GetField<TextFieldWrapper>("Blob");

 		public string BlobValue => this.Blob.Value;

		/// <summary><para>Field: CountryCode</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("countrycode")]
		public virtual ITextFieldWrapper CountryCode => this.GetField<TextFieldWrapper>("CountryCode");

		[IndexField("countrycode")]
 		public string CountryCodeValue => this.CountryCode.Value;

		/// <summary><para>Field: Description</para><para>Data type: text</para></summary>
		[IndexField("description")]
		public virtual ITextFieldWrapper Description => this.GetField<TextFieldWrapper>("Description");

		[IndexField("description")]
 		public string DescriptionValue => this.Description.Value;

		/// <summary><para>Field: Dimensions</para><para>Data type: text</para></summary>
		[IndexField("dimensions")]
		public virtual ITextFieldWrapper Dimensions => this.GetField<TextFieldWrapper>("Dimensions");

		[IndexField("dimensions")]
 		public string DimensionsValue => this.Dimensions.Value;

		/// <summary><para>Field: Extension</para><para>Data type: text</para></summary>
		[IndexField("extension")]
		public virtual ITextFieldWrapper Extension => this.GetField<TextFieldWrapper>("Extension");

		[IndexField("extension")]
 		public string ExtensionValue => this.Extension.Value;

		/// <summary><para>Field: FilePath</para><para>Data type: text</para></summary>
		[IndexField("file_path")]
		public virtual ITextFieldWrapper FilePath => this.GetField<TextFieldWrapper>("File Path");

		[IndexField("file_path")]
 		public string FilePathValue => this.FilePath.Value;

		/// <summary><para>Field: Format</para><para>Data type: text</para></summary>
		[IndexField("format")]
		public virtual ITextFieldWrapper Format => this.GetField<TextFieldWrapper>("Format");

		[IndexField("format")]
 		public string FormatValue => this.Format.Value;

		/// <summary><para>Field: Height</para><para>Data type: text</para></summary>
		[IndexField("height")]
		public virtual ITextFieldWrapper Height => this.GetField<TextFieldWrapper>("Height");

		[IndexField("height")]
 		public string HeightValue => this.Height.Value;

		/// <summary><para>Field: Keywords</para><para>Data type: memo</para></summary>
		public virtual ITextFieldWrapper Keywords => this.GetField<TextFieldWrapper>("Keywords");

 		public string KeywordsValue => this.Keywords.Value;

		/// <summary><para>Field: Latitude</para><para>Data type: Number</para></summary>
		[IndexField("latitude")]
		public virtual INumberFieldWrapper Latitude => this.GetField<NumberFieldWrapper>("Latitude");

		[IndexField("latitude")]
 		public float LatitudeValue => this.Latitude.Value;

		/// <summary><para>Field: LocationDescription</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("locationdescription")]
		public virtual ITextFieldWrapper LocationDescription => this.GetField<TextFieldWrapper>("LocationDescription");

		[IndexField("locationdescription")]
 		public string LocationDescriptionValue => this.LocationDescription.Value;

		/// <summary><para>Field: Longitude</para><para>Data type: Number</para></summary>
		[IndexField("longitude")]
		public virtual INumberFieldWrapper Longitude => this.GetField<NumberFieldWrapper>("Longitude");

		[IndexField("longitude")]
 		public float LongitudeValue => this.Longitude.Value;

		/// <summary><para>Field: MimeType</para><para>Data type: text</para></summary>
		[IndexField("mime_type")]
		public virtual ITextFieldWrapper MimeType => this.GetField<TextFieldWrapper>("Mime Type");

		[IndexField("mime_type")]
 		public string MimeTypeValue => this.MimeType.Value;

		/// <summary><para>Field: Size</para><para>Data type: text</para></summary>
		[IndexField("size")]
		public virtual ITextFieldWrapper Size => this.GetField<TextFieldWrapper>("Size");

		[IndexField("size")]
 		public string SizeValue => this.Size.Value;

		/// <summary><para>Field: Title</para><para>Data type: text</para></summary>
		[IndexField("title")]
		public virtual ITextFieldWrapper Title => this.GetField<TextFieldWrapper>("Title");

		[IndexField("title")]
 		public string TitleValue => this.Title.Value;

		/// <summary><para>Field: Width</para><para>Data type: text</para></summary>
		[IndexField("width")]
		public virtual ITextFieldWrapper Width => this.GetField<TextFieldWrapper>("Width");

		[IndexField("width")]
 		public string WidthValue => this.Width.Value;

		/// <summary><para>Field: ZipCode</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("zipcode")]
		public virtual ITextFieldWrapper ZipCode => this.GetField<TextFieldWrapper>("ZipCode");

		[IndexField("zipcode")]
 		public string ZipCodeValue => this.ZipCode.Value;
	}
}
#endregion
#region Jpeg (ScSystem)
namespace LM.Model.Templates.ScSystem
{
	/// <summary><para>Template: Jpeg</para><para>ID: {DAF085E8-602E-43A6-8299-038FF171349F}</para><para>/sitecore/templates/System/Media/Unversioned/Jpeg</para></summary>
	[TemplateMapping("{DAF085E8-602E-43A6-8299-038FF171349F}", "InterfaceMap")]
	public partial interface IJpeg :
		ICustomItemWrapper,
		LM.Model.Templates.ScSystem.IFile,
		LM.Model.Templates.ScSystem.IImage
	{

    	/// <summary><para>Template: Jpeg</para><para>Field: Artist</para><para>Data type: text</para></summary>
		[IndexField("artist")]
		ITextFieldWrapper Artist { get; }

    	/// <summary><para>Template: Jpeg</para><para>Field: Artist</para><para>Data type: text</para></summary>
		[IndexField("artist")]
		string ArtistValue { get; }

    	/// <summary><para>Template: Jpeg</para><para>Field: Copyright</para><para>Data type: text</para></summary>
		[IndexField("copyright")]
		ITextFieldWrapper Copyright { get; }

    	/// <summary><para>Template: Jpeg</para><para>Field: Copyright</para><para>Data type: text</para></summary>
		[IndexField("copyright")]
		string CopyrightValue { get; }

    	/// <summary><para>Template: Jpeg</para><para>Field: DateTime</para><para>Data type: text</para></summary>
		[IndexField("datetime")]
		ITextFieldWrapper DateTime { get; }

    	/// <summary><para>Template: Jpeg</para><para>Field: DateTime</para><para>Data type: text</para></summary>
		[IndexField("datetime")]
		string DateTimeValue { get; }

    	/// <summary><para>Template: Jpeg</para><para>Field: ImageDescription</para><para>Data type: text</para></summary>
		[IndexField("imagedescription")]
		ITextFieldWrapper ImageDescription { get; }

    	/// <summary><para>Template: Jpeg</para><para>Field: ImageDescription</para><para>Data type: text</para></summary>
		[IndexField("imagedescription")]
		string ImageDescriptionValue { get; }

    	/// <summary><para>Template: Jpeg</para><para>Field: Make</para><para>Data type: text</para></summary>
		[IndexField("make")]
		ITextFieldWrapper Make { get; }

    	/// <summary><para>Template: Jpeg</para><para>Field: Make</para><para>Data type: text</para></summary>
		[IndexField("make")]
		string MakeValue { get; }

    	/// <summary><para>Template: Jpeg</para><para>Field: Model</para><para>Data type: text</para></summary>
		[IndexField("model")]
		ITextFieldWrapper Model { get; }

    	/// <summary><para>Template: Jpeg</para><para>Field: Model</para><para>Data type: text</para></summary>
		[IndexField("model")]
		string ModelValue { get; }

    	/// <summary><para>Template: Jpeg</para><para>Field: Software</para><para>Data type: text</para></summary>
		[IndexField("software")]
		ITextFieldWrapper Software { get; }

    	/// <summary><para>Template: Jpeg</para><para>Field: Software</para><para>Data type: text</para></summary>
		[IndexField("software")]
		string SoftwareValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{DAF085E8-602E-43A6-8299-038FF171349F}", typeof(Guid))]
	[TemplateMapping("{DAF085E8-602E-43A6-8299-038FF171349F}")]
	public partial class Jpeg : CustomItemWrapper, IJpeg
	{
		public Jpeg(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public Jpeg(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: Alt</para><para>Data type: text</para></summary>
		[IndexField("alt")]
		public virtual ITextFieldWrapper Alt => this.GetField<TextFieldWrapper>("Alt");

		[IndexField("alt")]
 		public string AltValue => this.Alt.Value;

		/// <summary><para>Field: Artist</para><para>Data type: text</para></summary>
		[IndexField("artist")]
		public virtual ITextFieldWrapper Artist => this.GetField<TextFieldWrapper>("Artist");

		[IndexField("artist")]
 		public string ArtistValue => this.Artist.Value;

		/// <summary><para>Field: Blob</para><para>Data type: attachment</para></summary>
		public virtual ITextFieldWrapper Blob => this.GetField<TextFieldWrapper>("Blob");

 		public string BlobValue => this.Blob.Value;

		/// <summary><para>Field: Copyright</para><para>Data type: text</para></summary>
		[IndexField("copyright")]
		public virtual ITextFieldWrapper Copyright => this.GetField<TextFieldWrapper>("Copyright");

		[IndexField("copyright")]
 		public string CopyrightValue => this.Copyright.Value;

		/// <summary><para>Field: CountryCode</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("countrycode")]
		public virtual ITextFieldWrapper CountryCode => this.GetField<TextFieldWrapper>("CountryCode");

		[IndexField("countrycode")]
 		public string CountryCodeValue => this.CountryCode.Value;

		/// <summary><para>Field: DateTime</para><para>Data type: text</para></summary>
		[IndexField("datetime")]
		public virtual ITextFieldWrapper DateTime => this.GetField<TextFieldWrapper>("DateTime");

		[IndexField("datetime")]
 		public string DateTimeValue => this.DateTime.Value;

		/// <summary><para>Field: Description</para><para>Data type: text</para></summary>
		[IndexField("description")]
		public virtual ITextFieldWrapper Description => this.GetField<TextFieldWrapper>("Description");

		[IndexField("description")]
 		public string DescriptionValue => this.Description.Value;

		/// <summary><para>Field: Dimensions</para><para>Data type: text</para></summary>
		[IndexField("dimensions")]
		public virtual ITextFieldWrapper Dimensions => this.GetField<TextFieldWrapper>("Dimensions");

		[IndexField("dimensions")]
 		public string DimensionsValue => this.Dimensions.Value;

		/// <summary><para>Field: Extension</para><para>Data type: text</para></summary>
		[IndexField("extension")]
		public virtual ITextFieldWrapper Extension => this.GetField<TextFieldWrapper>("Extension");

		[IndexField("extension")]
 		public string ExtensionValue => this.Extension.Value;

		/// <summary><para>Field: FilePath</para><para>Data type: text</para></summary>
		[IndexField("file_path")]
		public virtual ITextFieldWrapper FilePath => this.GetField<TextFieldWrapper>("File Path");

		[IndexField("file_path")]
 		public string FilePathValue => this.FilePath.Value;

		/// <summary><para>Field: Format</para><para>Data type: text</para></summary>
		[IndexField("format")]
		public virtual ITextFieldWrapper Format => this.GetField<TextFieldWrapper>("Format");

		[IndexField("format")]
 		public string FormatValue => this.Format.Value;

		/// <summary><para>Field: Height</para><para>Data type: text</para></summary>
		[IndexField("height")]
		public virtual ITextFieldWrapper Height => this.GetField<TextFieldWrapper>("Height");

		[IndexField("height")]
 		public string HeightValue => this.Height.Value;

		/// <summary><para>Field: ImageDescription</para><para>Data type: text</para></summary>
		[IndexField("imagedescription")]
		public virtual ITextFieldWrapper ImageDescription => this.GetField<TextFieldWrapper>("ImageDescription");

		[IndexField("imagedescription")]
 		public string ImageDescriptionValue => this.ImageDescription.Value;

		/// <summary><para>Field: Keywords</para><para>Data type: memo</para></summary>
		public virtual ITextFieldWrapper Keywords => this.GetField<TextFieldWrapper>("Keywords");

 		public string KeywordsValue => this.Keywords.Value;

		/// <summary><para>Field: Latitude</para><para>Data type: Number</para></summary>
		[IndexField("latitude")]
		public virtual INumberFieldWrapper Latitude => this.GetField<NumberFieldWrapper>("Latitude");

		[IndexField("latitude")]
 		public float LatitudeValue => this.Latitude.Value;

		/// <summary><para>Field: LocationDescription</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("locationdescription")]
		public virtual ITextFieldWrapper LocationDescription => this.GetField<TextFieldWrapper>("LocationDescription");

		[IndexField("locationdescription")]
 		public string LocationDescriptionValue => this.LocationDescription.Value;

		/// <summary><para>Field: Longitude</para><para>Data type: Number</para></summary>
		[IndexField("longitude")]
		public virtual INumberFieldWrapper Longitude => this.GetField<NumberFieldWrapper>("Longitude");

		[IndexField("longitude")]
 		public float LongitudeValue => this.Longitude.Value;

		/// <summary><para>Field: Make</para><para>Data type: text</para></summary>
		[IndexField("make")]
		public virtual ITextFieldWrapper Make => this.GetField<TextFieldWrapper>("Make");

		[IndexField("make")]
 		public string MakeValue => this.Make.Value;

		/// <summary><para>Field: MimeType</para><para>Data type: text</para></summary>
		[IndexField("mime_type")]
		public virtual ITextFieldWrapper MimeType => this.GetField<TextFieldWrapper>("Mime Type");

		[IndexField("mime_type")]
 		public string MimeTypeValue => this.MimeType.Value;

		/// <summary><para>Field: Model</para><para>Data type: text</para></summary>
		[IndexField("model")]
		public virtual ITextFieldWrapper Model => this.GetField<TextFieldWrapper>("Model");

		[IndexField("model")]
 		public string ModelValue => this.Model.Value;

		/// <summary><para>Field: Size</para><para>Data type: text</para></summary>
		[IndexField("size")]
		public virtual ITextFieldWrapper Size => this.GetField<TextFieldWrapper>("Size");

		[IndexField("size")]
 		public string SizeValue => this.Size.Value;

		/// <summary><para>Field: Software</para><para>Data type: text</para></summary>
		[IndexField("software")]
		public virtual ITextFieldWrapper Software => this.GetField<TextFieldWrapper>("Software");

		[IndexField("software")]
 		public string SoftwareValue => this.Software.Value;

		/// <summary><para>Field: Title</para><para>Data type: text</para></summary>
		[IndexField("title")]
		public virtual ITextFieldWrapper Title => this.GetField<TextFieldWrapper>("Title");

		[IndexField("title")]
 		public string TitleValue => this.Title.Value;

		/// <summary><para>Field: Width</para><para>Data type: text</para></summary>
		[IndexField("width")]
		public virtual ITextFieldWrapper Width => this.GetField<TextFieldWrapper>("Width");

		[IndexField("width")]
 		public string WidthValue => this.Width.Value;

		/// <summary><para>Field: ZipCode</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("zipcode")]
		public virtual ITextFieldWrapper ZipCode => this.GetField<TextFieldWrapper>("ZipCode");

		[IndexField("zipcode")]
 		public string ZipCodeValue => this.ZipCode.Value;
	}
}
#endregion
#region Movie (ScSystem)
namespace LM.Model.Templates.ScSystem
{
	/// <summary><para>Template: Movie</para><para>ID: {E76ADBDF-87D1-4FCB-BA71-274F7DBF5670}</para><para>/sitecore/templates/System/Media/Unversioned/Movie</para></summary>
	[TemplateMapping("{E76ADBDF-87D1-4FCB-BA71-274F7DBF5670}", "InterfaceMap")]
	public partial interface IMovie :
		ICustomItemWrapper,
		LM.Model.Templates.ScSystem.IFile
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{E76ADBDF-87D1-4FCB-BA71-274F7DBF5670}", typeof(Guid))]
	[TemplateMapping("{E76ADBDF-87D1-4FCB-BA71-274F7DBF5670}")]
	public partial class Movie : CustomItemWrapper, IMovie
	{
		public Movie(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public Movie(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: Blob</para><para>Data type: attachment</para></summary>
		public virtual ITextFieldWrapper Blob => this.GetField<TextFieldWrapper>("Blob");

 		public string BlobValue => this.Blob.Value;

		/// <summary><para>Field: CountryCode</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("countrycode")]
		public virtual ITextFieldWrapper CountryCode => this.GetField<TextFieldWrapper>("CountryCode");

		[IndexField("countrycode")]
 		public string CountryCodeValue => this.CountryCode.Value;

		/// <summary><para>Field: Description</para><para>Data type: text</para></summary>
		[IndexField("description")]
		public virtual ITextFieldWrapper Description => this.GetField<TextFieldWrapper>("Description");

		[IndexField("description")]
 		public string DescriptionValue => this.Description.Value;

		/// <summary><para>Field: Extension</para><para>Data type: text</para></summary>
		[IndexField("extension")]
		public virtual ITextFieldWrapper Extension => this.GetField<TextFieldWrapper>("Extension");

		[IndexField("extension")]
 		public string ExtensionValue => this.Extension.Value;

		/// <summary><para>Field: FilePath</para><para>Data type: text</para></summary>
		[IndexField("file_path")]
		public virtual ITextFieldWrapper FilePath => this.GetField<TextFieldWrapper>("File Path");

		[IndexField("file_path")]
 		public string FilePathValue => this.FilePath.Value;

		/// <summary><para>Field: Format</para><para>Data type: text</para></summary>
		[IndexField("format")]
		public virtual ITextFieldWrapper Format => this.GetField<TextFieldWrapper>("Format");

		[IndexField("format")]
 		public string FormatValue => this.Format.Value;

		/// <summary><para>Field: Keywords</para><para>Data type: memo</para></summary>
		public virtual ITextFieldWrapper Keywords => this.GetField<TextFieldWrapper>("Keywords");

 		public string KeywordsValue => this.Keywords.Value;

		/// <summary><para>Field: Latitude</para><para>Data type: Number</para></summary>
		[IndexField("latitude")]
		public virtual INumberFieldWrapper Latitude => this.GetField<NumberFieldWrapper>("Latitude");

		[IndexField("latitude")]
 		public float LatitudeValue => this.Latitude.Value;

		/// <summary><para>Field: LocationDescription</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("locationdescription")]
		public virtual ITextFieldWrapper LocationDescription => this.GetField<TextFieldWrapper>("LocationDescription");

		[IndexField("locationdescription")]
 		public string LocationDescriptionValue => this.LocationDescription.Value;

		/// <summary><para>Field: Longitude</para><para>Data type: Number</para></summary>
		[IndexField("longitude")]
		public virtual INumberFieldWrapper Longitude => this.GetField<NumberFieldWrapper>("Longitude");

		[IndexField("longitude")]
 		public float LongitudeValue => this.Longitude.Value;

		/// <summary><para>Field: MimeType</para><para>Data type: text</para></summary>
		[IndexField("mime_type")]
		public virtual ITextFieldWrapper MimeType => this.GetField<TextFieldWrapper>("Mime Type");

		[IndexField("mime_type")]
 		public string MimeTypeValue => this.MimeType.Value;

		/// <summary><para>Field: Size</para><para>Data type: text</para></summary>
		[IndexField("size")]
		public virtual ITextFieldWrapper Size => this.GetField<TextFieldWrapper>("Size");

		[IndexField("size")]
 		public string SizeValue => this.Size.Value;

		/// <summary><para>Field: Title</para><para>Data type: text</para></summary>
		[IndexField("title")]
		public virtual ITextFieldWrapper Title => this.GetField<TextFieldWrapper>("Title");

		[IndexField("title")]
 		public string TitleValue => this.Title.Value;

		/// <summary><para>Field: ZipCode</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("zipcode")]
		public virtual ITextFieldWrapper ZipCode => this.GetField<TextFieldWrapper>("ZipCode");

		[IndexField("zipcode")]
 		public string ZipCodeValue => this.ZipCode.Value;
	}
}
#endregion
#region Mp3 (ScSystem)
namespace LM.Model.Templates.ScSystem
{
	/// <summary><para>Template: Mp3</para><para>ID: {B60424A5-CE06-4C2E-9F49-A6D732F55D4B}</para><para>/sitecore/templates/System/Media/Unversioned/Mp3</para></summary>
	[TemplateMapping("{B60424A5-CE06-4C2E-9F49-A6D732F55D4B}", "InterfaceMap")]
	public partial interface IMp3 :
		ICustomItemWrapper,
		LM.Model.Templates.ScSystem.IAudio,
		LM.Model.Templates.ScSystem.IFile
	{

    	/// <summary><para>Template: Mp3</para><para>Field: Album</para><para>Data type: text</para></summary>
		[IndexField("album")]
		ITextFieldWrapper Album { get; }

    	/// <summary><para>Template: Mp3</para><para>Field: Album</para><para>Data type: text</para></summary>
		[IndexField("album")]
		string AlbumValue { get; }

    	/// <summary><para>Template: Mp3</para><para>Field: Artist</para><para>Data type: text</para></summary>
		[IndexField("artist")]
		ITextFieldWrapper Artist { get; }

    	/// <summary><para>Template: Mp3</para><para>Field: Artist</para><para>Data type: text</para></summary>
		[IndexField("artist")]
		string ArtistValue { get; }

    	/// <summary><para>Template: Mp3</para><para>Field: Comment</para><para>Data type: memo</para></summary>
		ITextFieldWrapper Comment { get; }

    	/// <summary><para>Template: Mp3</para><para>Field: Comment</para><para>Data type: memo</para></summary>
		string CommentValue { get; }

    	/// <summary><para>Template: Mp3</para><para>Field: Song Title</para><para>Data type: text</para></summary>
		[IndexField("song_title")]
		ITextFieldWrapper SongTitle { get; }

    	/// <summary><para>Template: Mp3</para><para>Field: Song Title</para><para>Data type: text</para></summary>
		[IndexField("song_title")]
		string SongTitleValue { get; }

    	/// <summary><para>Template: Mp3</para><para>Field: Track Number</para><para>Data type: text</para></summary>
		[IndexField("track_number")]
		ITextFieldWrapper TrackNumber { get; }

    	/// <summary><para>Template: Mp3</para><para>Field: Track Number</para><para>Data type: text</para></summary>
		[IndexField("track_number")]
		string TrackNumberValue { get; }

    	/// <summary><para>Template: Mp3</para><para>Field: Year</para><para>Data type: text</para></summary>
		[IndexField("year")]
		ITextFieldWrapper Year { get; }

    	/// <summary><para>Template: Mp3</para><para>Field: Year</para><para>Data type: text</para></summary>
		[IndexField("year")]
		string YearValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{B60424A5-CE06-4C2E-9F49-A6D732F55D4B}", typeof(Guid))]
	[TemplateMapping("{B60424A5-CE06-4C2E-9F49-A6D732F55D4B}")]
	public partial class Mp3 : CustomItemWrapper, IMp3
	{
		public Mp3(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public Mp3(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: Album</para><para>Data type: text</para></summary>
		[IndexField("album")]
		public virtual ITextFieldWrapper Album => this.GetField<TextFieldWrapper>("Album");

		[IndexField("album")]
 		public string AlbumValue => this.Album.Value;

		/// <summary><para>Field: Artist</para><para>Data type: text</para></summary>
		[IndexField("artist")]
		public virtual ITextFieldWrapper Artist => this.GetField<TextFieldWrapper>("Artist");

		[IndexField("artist")]
 		public string ArtistValue => this.Artist.Value;

		/// <summary><para>Field: Blob</para><para>Data type: attachment</para></summary>
		public virtual ITextFieldWrapper Blob => this.GetField<TextFieldWrapper>("Blob");

 		public string BlobValue => this.Blob.Value;

		/// <summary><para>Field: Comment</para><para>Data type: memo</para></summary>
		public virtual ITextFieldWrapper Comment => this.GetField<TextFieldWrapper>("Comment");

 		public string CommentValue => this.Comment.Value;

		/// <summary><para>Field: CountryCode</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("countrycode")]
		public virtual ITextFieldWrapper CountryCode => this.GetField<TextFieldWrapper>("CountryCode");

		[IndexField("countrycode")]
 		public string CountryCodeValue => this.CountryCode.Value;

		/// <summary><para>Field: Description</para><para>Data type: text</para></summary>
		[IndexField("description")]
		public virtual ITextFieldWrapper Description => this.GetField<TextFieldWrapper>("Description");

		[IndexField("description")]
 		public string DescriptionValue => this.Description.Value;

		/// <summary><para>Field: Extension</para><para>Data type: text</para></summary>
		[IndexField("extension")]
		public virtual ITextFieldWrapper Extension => this.GetField<TextFieldWrapper>("Extension");

		[IndexField("extension")]
 		public string ExtensionValue => this.Extension.Value;

		/// <summary><para>Field: FilePath</para><para>Data type: text</para></summary>
		[IndexField("file_path")]
		public virtual ITextFieldWrapper FilePath => this.GetField<TextFieldWrapper>("File Path");

		[IndexField("file_path")]
 		public string FilePathValue => this.FilePath.Value;

		/// <summary><para>Field: Format</para><para>Data type: text</para></summary>
		[IndexField("format")]
		public virtual ITextFieldWrapper Format => this.GetField<TextFieldWrapper>("Format");

		[IndexField("format")]
 		public string FormatValue => this.Format.Value;

		/// <summary><para>Field: Keywords</para><para>Data type: memo</para></summary>
		public virtual ITextFieldWrapper Keywords => this.GetField<TextFieldWrapper>("Keywords");

 		public string KeywordsValue => this.Keywords.Value;

		/// <summary><para>Field: Latitude</para><para>Data type: Number</para></summary>
		[IndexField("latitude")]
		public virtual INumberFieldWrapper Latitude => this.GetField<NumberFieldWrapper>("Latitude");

		[IndexField("latitude")]
 		public float LatitudeValue => this.Latitude.Value;

		/// <summary><para>Field: LocationDescription</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("locationdescription")]
		public virtual ITextFieldWrapper LocationDescription => this.GetField<TextFieldWrapper>("LocationDescription");

		[IndexField("locationdescription")]
 		public string LocationDescriptionValue => this.LocationDescription.Value;

		/// <summary><para>Field: Longitude</para><para>Data type: Number</para></summary>
		[IndexField("longitude")]
		public virtual INumberFieldWrapper Longitude => this.GetField<NumberFieldWrapper>("Longitude");

		[IndexField("longitude")]
 		public float LongitudeValue => this.Longitude.Value;

		/// <summary><para>Field: MimeType</para><para>Data type: text</para></summary>
		[IndexField("mime_type")]
		public virtual ITextFieldWrapper MimeType => this.GetField<TextFieldWrapper>("Mime Type");

		[IndexField("mime_type")]
 		public string MimeTypeValue => this.MimeType.Value;

		/// <summary><para>Field: Size</para><para>Data type: text</para></summary>
		[IndexField("size")]
		public virtual ITextFieldWrapper Size => this.GetField<TextFieldWrapper>("Size");

		[IndexField("size")]
 		public string SizeValue => this.Size.Value;

		/// <summary><para>Field: SongTitle</para><para>Data type: text</para></summary>
		[IndexField("song_title")]
		public virtual ITextFieldWrapper SongTitle => this.GetField<TextFieldWrapper>("Song Title");

		[IndexField("song_title")]
 		public string SongTitleValue => this.SongTitle.Value;

		/// <summary><para>Field: Title</para><para>Data type: text</para></summary>
		[IndexField("title")]
		public virtual ITextFieldWrapper Title => this.GetField<TextFieldWrapper>("Title");

		[IndexField("title")]
 		public string TitleValue => this.Title.Value;

		/// <summary><para>Field: TrackNumber</para><para>Data type: text</para></summary>
		[IndexField("track_number")]
		public virtual ITextFieldWrapper TrackNumber => this.GetField<TextFieldWrapper>("Track Number");

		[IndexField("track_number")]
 		public string TrackNumberValue => this.TrackNumber.Value;

		/// <summary><para>Field: Year</para><para>Data type: text</para></summary>
		[IndexField("year")]
		public virtual ITextFieldWrapper Year => this.GetField<TextFieldWrapper>("Year");

		[IndexField("year")]
 		public string YearValue => this.Year.Value;

		/// <summary><para>Field: ZipCode</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("zipcode")]
		public virtual ITextFieldWrapper ZipCode => this.GetField<TextFieldWrapper>("ZipCode");

		[IndexField("zipcode")]
 		public string ZipCodeValue => this.ZipCode.Value;
	}
}
#endregion
#region Pdf (ScSystem)
namespace LM.Model.Templates.ScSystem
{
	/// <summary><para>Template: Pdf</para><para>ID: {0603F166-35B8-469F-8123-E8D87BEDC171}</para><para>/sitecore/templates/System/Media/Unversioned/Pdf</para></summary>
	[TemplateMapping("{0603F166-35B8-469F-8123-E8D87BEDC171}", "InterfaceMap")]
	public partial interface IPdf :
		ICustomItemWrapper,
		LM.Model.Templates.ScSystem.IDocument,
		LM.Model.Templates.ScSystem.IFile
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{0603F166-35B8-469F-8123-E8D87BEDC171}", typeof(Guid))]
	[TemplateMapping("{0603F166-35B8-469F-8123-E8D87BEDC171}")]
	public partial class Pdf : CustomItemWrapper, IPdf
	{
		public Pdf(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public Pdf(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: Blob</para><para>Data type: attachment</para></summary>
		public virtual ITextFieldWrapper Blob => this.GetField<TextFieldWrapper>("Blob");

 		public string BlobValue => this.Blob.Value;

		/// <summary><para>Field: CountryCode</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("countrycode")]
		public virtual ITextFieldWrapper CountryCode => this.GetField<TextFieldWrapper>("CountryCode");

		[IndexField("countrycode")]
 		public string CountryCodeValue => this.CountryCode.Value;

		/// <summary><para>Field: Description</para><para>Data type: text</para></summary>
		[IndexField("description")]
		public virtual ITextFieldWrapper Description => this.GetField<TextFieldWrapper>("Description");

		[IndexField("description")]
 		public string DescriptionValue => this.Description.Value;

		/// <summary><para>Field: Extension</para><para>Data type: text</para></summary>
		[IndexField("extension")]
		public virtual ITextFieldWrapper Extension => this.GetField<TextFieldWrapper>("Extension");

		[IndexField("extension")]
 		public string ExtensionValue => this.Extension.Value;

		/// <summary><para>Field: FilePath</para><para>Data type: text</para></summary>
		[IndexField("file_path")]
		public virtual ITextFieldWrapper FilePath => this.GetField<TextFieldWrapper>("File Path");

		[IndexField("file_path")]
 		public string FilePathValue => this.FilePath.Value;

		/// <summary><para>Field: Format</para><para>Data type: text</para></summary>
		[IndexField("format")]
		public virtual ITextFieldWrapper Format => this.GetField<TextFieldWrapper>("Format");

		[IndexField("format")]
 		public string FormatValue => this.Format.Value;

		/// <summary><para>Field: Keywords</para><para>Data type: memo</para></summary>
		public virtual ITextFieldWrapper Keywords => this.GetField<TextFieldWrapper>("Keywords");

 		public string KeywordsValue => this.Keywords.Value;

		/// <summary><para>Field: Latitude</para><para>Data type: Number</para></summary>
		[IndexField("latitude")]
		public virtual INumberFieldWrapper Latitude => this.GetField<NumberFieldWrapper>("Latitude");

		[IndexField("latitude")]
 		public float LatitudeValue => this.Latitude.Value;

		/// <summary><para>Field: LocationDescription</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("locationdescription")]
		public virtual ITextFieldWrapper LocationDescription => this.GetField<TextFieldWrapper>("LocationDescription");

		[IndexField("locationdescription")]
 		public string LocationDescriptionValue => this.LocationDescription.Value;

		/// <summary><para>Field: Longitude</para><para>Data type: Number</para></summary>
		[IndexField("longitude")]
		public virtual INumberFieldWrapper Longitude => this.GetField<NumberFieldWrapper>("Longitude");

		[IndexField("longitude")]
 		public float LongitudeValue => this.Longitude.Value;

		/// <summary><para>Field: MimeType</para><para>Data type: text</para></summary>
		[IndexField("mime_type")]
		public virtual ITextFieldWrapper MimeType => this.GetField<TextFieldWrapper>("Mime Type");

		[IndexField("mime_type")]
 		public string MimeTypeValue => this.MimeType.Value;

		/// <summary><para>Field: Size</para><para>Data type: text</para></summary>
		[IndexField("size")]
		public virtual ITextFieldWrapper Size => this.GetField<TextFieldWrapper>("Size");

		[IndexField("size")]
 		public string SizeValue => this.Size.Value;

		/// <summary><para>Field: Title</para><para>Data type: text</para></summary>
		[IndexField("title")]
		public virtual ITextFieldWrapper Title => this.GetField<TextFieldWrapper>("Title");

		[IndexField("title")]
 		public string TitleValue => this.Title.Value;

		/// <summary><para>Field: ZipCode</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("zipcode")]
		public virtual ITextFieldWrapper ZipCode => this.GetField<TextFieldWrapper>("ZipCode");

		[IndexField("zipcode")]
 		public string ZipCodeValue => this.ZipCode.Value;
	}
}
#endregion
#region Zip (ScSystem)
namespace LM.Model.Templates.ScSystem
{
	/// <summary><para>Template: Zip</para><para>ID: {4F4A3A3B-239F-4988-98E1-DA3779749CBC}</para><para>/sitecore/templates/System/Media/Unversioned/Zip</para></summary>
	[TemplateMapping("{4F4A3A3B-239F-4988-98E1-DA3779749CBC}", "InterfaceMap")]
	public partial interface IZip :
		ICustomItemWrapper,
		LM.Model.Templates.ScSystem.IFile
	{

    	/// <summary><para>Template: Zip</para><para>Field: File Count</para><para>Data type: text</para></summary>
		[IndexField("file_count")]
		ITextFieldWrapper FileCount { get; }

    	/// <summary><para>Template: Zip</para><para>Field: File Count</para><para>Data type: text</para></summary>
		[IndexField("file_count")]
		string FileCountValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{4F4A3A3B-239F-4988-98E1-DA3779749CBC}", typeof(Guid))]
	[TemplateMapping("{4F4A3A3B-239F-4988-98E1-DA3779749CBC}")]
	public partial class Zip : CustomItemWrapper, IZip
	{
		public Zip(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public Zip(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: Blob</para><para>Data type: attachment</para></summary>
		public virtual ITextFieldWrapper Blob => this.GetField<TextFieldWrapper>("Blob");

 		public string BlobValue => this.Blob.Value;

		/// <summary><para>Field: CountryCode</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("countrycode")]
		public virtual ITextFieldWrapper CountryCode => this.GetField<TextFieldWrapper>("CountryCode");

		[IndexField("countrycode")]
 		public string CountryCodeValue => this.CountryCode.Value;

		/// <summary><para>Field: Description</para><para>Data type: text</para></summary>
		[IndexField("description")]
		public virtual ITextFieldWrapper Description => this.GetField<TextFieldWrapper>("Description");

		[IndexField("description")]
 		public string DescriptionValue => this.Description.Value;

		/// <summary><para>Field: Extension</para><para>Data type: text</para></summary>
		[IndexField("extension")]
		public virtual ITextFieldWrapper Extension => this.GetField<TextFieldWrapper>("Extension");

		[IndexField("extension")]
 		public string ExtensionValue => this.Extension.Value;

		/// <summary><para>Field: FileCount</para><para>Data type: text</para></summary>
		[IndexField("file_count")]
		public virtual ITextFieldWrapper FileCount => this.GetField<TextFieldWrapper>("File Count");

		[IndexField("file_count")]
 		public string FileCountValue => this.FileCount.Value;

		/// <summary><para>Field: FilePath</para><para>Data type: text</para></summary>
		[IndexField("file_path")]
		public virtual ITextFieldWrapper FilePath => this.GetField<TextFieldWrapper>("File Path");

		[IndexField("file_path")]
 		public string FilePathValue => this.FilePath.Value;

		/// <summary><para>Field: Format</para><para>Data type: text</para></summary>
		[IndexField("format")]
		public virtual ITextFieldWrapper Format => this.GetField<TextFieldWrapper>("Format");

		[IndexField("format")]
 		public string FormatValue => this.Format.Value;

		/// <summary><para>Field: Keywords</para><para>Data type: memo</para></summary>
		public virtual ITextFieldWrapper Keywords => this.GetField<TextFieldWrapper>("Keywords");

 		public string KeywordsValue => this.Keywords.Value;

		/// <summary><para>Field: Latitude</para><para>Data type: Number</para></summary>
		[IndexField("latitude")]
		public virtual INumberFieldWrapper Latitude => this.GetField<NumberFieldWrapper>("Latitude");

		[IndexField("latitude")]
 		public float LatitudeValue => this.Latitude.Value;

		/// <summary><para>Field: LocationDescription</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("locationdescription")]
		public virtual ITextFieldWrapper LocationDescription => this.GetField<TextFieldWrapper>("LocationDescription");

		[IndexField("locationdescription")]
 		public string LocationDescriptionValue => this.LocationDescription.Value;

		/// <summary><para>Field: Longitude</para><para>Data type: Number</para></summary>
		[IndexField("longitude")]
		public virtual INumberFieldWrapper Longitude => this.GetField<NumberFieldWrapper>("Longitude");

		[IndexField("longitude")]
 		public float LongitudeValue => this.Longitude.Value;

		/// <summary><para>Field: MimeType</para><para>Data type: text</para></summary>
		[IndexField("mime_type")]
		public virtual ITextFieldWrapper MimeType => this.GetField<TextFieldWrapper>("Mime Type");

		[IndexField("mime_type")]
 		public string MimeTypeValue => this.MimeType.Value;

		/// <summary><para>Field: Size</para><para>Data type: text</para></summary>
		[IndexField("size")]
		public virtual ITextFieldWrapper Size => this.GetField<TextFieldWrapper>("Size");

		[IndexField("size")]
 		public string SizeValue => this.Size.Value;

		/// <summary><para>Field: Title</para><para>Data type: text</para></summary>
		[IndexField("title")]
		public virtual ITextFieldWrapper Title => this.GetField<TextFieldWrapper>("Title");

		[IndexField("title")]
 		public string TitleValue => this.Title.Value;

		/// <summary><para>Field: ZipCode</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("zipcode")]
		public virtual ITextFieldWrapper ZipCode => this.GetField<TextFieldWrapper>("ZipCode");

		[IndexField("zipcode")]
 		public string ZipCodeValue => this.ZipCode.Value;
	}
}
#endregion
#region AccountSettings (Ignite)
namespace LM.Model.Templates.Ignite
{
	/// <summary><para>Template: AccountSettings</para><para>ID: {B508C806-C0A9-4D19-8F68-DB04D66FF2D3}</para><para>/sitecore/templates/MediaFramework/Common/AccountSettings</para></summary>
	[TemplateMapping("{B508C806-C0A9-4D19-8F68-DB04D66FF2D3}", "InterfaceMap")]
	public partial interface IAccountSettings :
		ICustomItemWrapper
	{

    	/// <summary><para>Template: AccountSettings</para><para>Field: PlaybackEventsRules</para><para>Data type: Rules</para></summary>
		ITextFieldWrapper PlaybackEventsRules { get; }

    	/// <summary><para>Template: AccountSettings</para><para>Field: PlaybackEventsRules</para><para>Data type: Rules</para></summary>
		string PlaybackEventsRulesValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{B508C806-C0A9-4D19-8F68-DB04D66FF2D3}", typeof(Guid))]
	[TemplateMapping("{B508C806-C0A9-4D19-8F68-DB04D66FF2D3}")]
	public partial class AccountSettings : CustomItemWrapper, IAccountSettings
	{
		public AccountSettings(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public AccountSettings(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: PlaybackEventsRules</para><para>Data type: Rules</para></summary>
		public virtual ITextFieldWrapper PlaybackEventsRules => this.GetField<TextFieldWrapper>("PlaybackEventsRules");

 		public string PlaybackEventsRulesValue => this.PlaybackEventsRules.Value;
	}
}
#endregion
#region MediaElement (Ignite)
namespace LM.Model.Templates.Ignite
{
	/// <summary><para>Template: MediaElement</para><para>ID: {7C758A18-26A4-48F0-A2AA-068246A27322}</para><para>/sitecore/templates/MediaFramework/Common/MediaElement</para></summary>
	[TemplateMapping("{7C758A18-26A4-48F0-A2AA-068246A27322}", "InterfaceMap")]
	public partial interface IMediaElement :
		ICustomItemWrapper
	{

    	/// <summary><para>Template: MediaElement</para><para>Field: Events</para><para>Data type: Multilist</para></summary>
		[IndexField("events")]
		IListFieldWrapper Events { get; }

    	/// <summary><para>Template: MediaElement</para><para>Field: Events</para><para>Data type: Multilist</para></summary>
		[IndexField("events")]
		IEnumerable<Guid> EventsValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{7C758A18-26A4-48F0-A2AA-068246A27322}", typeof(Guid))]
	[TemplateMapping("{7C758A18-26A4-48F0-A2AA-068246A27322}")]
	public partial class MediaElement : CustomItemWrapper, IMediaElement
	{
		public MediaElement(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public MediaElement(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: Events</para><para>Data type: Multilist</para></summary>
		[IndexField("events")]
		public virtual IListFieldWrapper Events => this.GetField<ListFieldWrapper>("Events");

		[IndexField("events")]
 		public IEnumerable<Guid> EventsValue => this.Events.Value;
	}
}
#endregion
#region PlaybackEvent (Ignite)
namespace LM.Model.Templates.Ignite
{
	/// <summary><para>Template: PlaybackEvent</para><para>ID: {3A2C7FC4-BCD6-4B8B-BED7-A45E023B31DB}</para><para>/sitecore/templates/MediaFramework/Common/PlaybackEvent</para></summary>
	[TemplateMapping("{3A2C7FC4-BCD6-4B8B-BED7-A45E023B31DB}", "InterfaceMap")]
	public partial interface IPlaybackEvent :
		ICustomItemWrapper
	{

    	/// <summary><para>Template: PlaybackEvent</para><para>Field: PageEvent</para><para>Data type: Droplist</para></summary>
		ITextFieldWrapper PageEvent { get; }

    	/// <summary><para>Template: PlaybackEvent</para><para>Field: PageEvent</para><para>Data type: Droplist</para></summary>
		string PageEventValue { get; }

    	/// <summary><para>Template: PlaybackEvent</para><para>Field: Parameter</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("parameter")]
		ITextFieldWrapper Parameter { get; }

    	/// <summary><para>Template: PlaybackEvent</para><para>Field: Parameter</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("parameter")]
		string ParameterValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{3A2C7FC4-BCD6-4B8B-BED7-A45E023B31DB}", typeof(Guid))]
	[TemplateMapping("{3A2C7FC4-BCD6-4B8B-BED7-A45E023B31DB}")]
	public partial class PlaybackEvent : CustomItemWrapper, IPlaybackEvent
	{
		public PlaybackEvent(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public PlaybackEvent(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: PageEvent</para><para>Data type: Droplist</para></summary>
		public virtual ITextFieldWrapper PageEvent => this.GetField<TextFieldWrapper>("PageEvent");

 		public string PageEventValue => this.PageEvent.Value;

		/// <summary><para>Field: Parameter</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("parameter")]
		public virtual ITextFieldWrapper Parameter => this.GetField<TextFieldWrapper>("Parameter");

		[IndexField("parameter")]
 		public string ParameterValue => this.Parameter.Value;
	}
}
#endregion
#region OoyalaAccount (Ignite)
namespace LM.Model.Templates.Ignite
{
	/// <summary><para>Template: OoyalaAccount</para><para>ID: {94A5527D-1B95-44C7-8DF3-D61F41379B17}</para><para>/sitecore/templates/MediaFramework/Ooyala/OoyalaAccount</para></summary>
	[TemplateMapping("{94A5527D-1B95-44C7-8DF3-D61F41379B17}", "InterfaceMap")]
	public partial interface IOoyalaAccount :
		ICustomItemWrapper
	{

    	/// <summary><para>Template: OoyalaAccount</para><para>Field: APIKey</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("apikey")]
		ITextFieldWrapper APIKey { get; }

    	/// <summary><para>Template: OoyalaAccount</para><para>Field: APIKey</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("apikey")]
		string APIKeyValue { get; }

    	/// <summary><para>Template: OoyalaAccount</para><para>Field: APISecret</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("apisecret")]
		ITextFieldWrapper APISecret { get; }

    	/// <summary><para>Template: OoyalaAccount</para><para>Field: APISecret</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("apisecret")]
		string APISecretValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{94A5527D-1B95-44C7-8DF3-D61F41379B17}", typeof(Guid))]
	[TemplateMapping("{94A5527D-1B95-44C7-8DF3-D61F41379B17}")]
	public partial class OoyalaAccount : CustomItemWrapper, IOoyalaAccount
	{
		public OoyalaAccount(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public OoyalaAccount(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: APIKey</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("apikey")]
		public virtual ITextFieldWrapper APIKey => this.GetField<TextFieldWrapper>("APIKey");

		[IndexField("apikey")]
 		public string APIKeyValue => this.APIKey.Value;

		/// <summary><para>Field: APISecret</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("apisecret")]
		public virtual ITextFieldWrapper APISecret => this.GetField<TextFieldWrapper>("APISecret");

		[IndexField("apisecret")]
 		public string APISecretValue => this.APISecret.Value;
	}
}
#endregion
#region OoyalaAccountSettings (Ignite)
namespace LM.Model.Templates.Ignite
{
	/// <summary><para>Template: OoyalaAccountSettings</para><para>ID: {FE1BA702-B3F4-4436-B9CF-4446642F5856}</para><para>/sitecore/templates/MediaFramework/Ooyala/OoyalaAccountSettings</para></summary>
	[TemplateMapping("{FE1BA702-B3F4-4436-B9CF-4446642F5856}", "InterfaceMap")]
	public partial interface IOoyalaAccountSettings :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IAccountSettings
	{
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{FE1BA702-B3F4-4436-B9CF-4446642F5856}", typeof(Guid))]
	[TemplateMapping("{FE1BA702-B3F4-4436-B9CF-4446642F5856}")]
	public partial class OoyalaAccountSettings : CustomItemWrapper, IOoyalaAccountSettings
	{
		public OoyalaAccountSettings(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public OoyalaAccountSettings(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: PlaybackEventsRules</para><para>Data type: Rules</para></summary>
		public virtual ITextFieldWrapper PlaybackEventsRules => this.GetField<TextFieldWrapper>("PlaybackEventsRules");

 		public string PlaybackEventsRulesValue => this.PlaybackEventsRules.Value;
	}
}
#endregion
#region OoyalaChannel (Ignite)
namespace LM.Model.Templates.Ignite
{
	/// <summary><para>Template: OoyalaChannel</para><para>ID: {49731DEB-A021-448F-ABC2-B9238D5A7E05}</para><para>/sitecore/templates/MediaFramework/Ooyala/OoyalaChannel</para></summary>
	[TemplateMapping("{49731DEB-A021-448F-ABC2-B9238D5A7E05}", "InterfaceMap")]
	public partial interface IOoyalaChannel :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IMediaElement,
		LM.Model.Templates.Ignite.IOoyalaMediaElement
	{

    	/// <summary><para>Template: OoyalaChannel</para><para>Field: VideoList</para><para>Data type: Multilist</para></summary>
		[IndexField("videolist")]
		IListFieldWrapper VideoList { get; }

    	/// <summary><para>Template: OoyalaChannel</para><para>Field: VideoList</para><para>Data type: Multilist</para></summary>
		[IndexField("videolist")]
		IEnumerable<Guid> VideoListValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{49731DEB-A021-448F-ABC2-B9238D5A7E05}", typeof(Guid))]
	[TemplateMapping("{49731DEB-A021-448F-ABC2-B9238D5A7E05}")]
	public partial class OoyalaChannel : CustomItemWrapper, IOoyalaChannel
	{
		public OoyalaChannel(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public OoyalaChannel(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: AssetType</para><para>Data type: ReadOnlyText</para></summary>
		public virtual ITextFieldWrapper AssetType => this.GetField<TextFieldWrapper>("AssetType");

 		public string AssetTypeValue => this.AssetType.Value;

		/// <summary><para>Field: CreatedAt</para><para>Data type: ReadOnlyText</para></summary>
		public virtual ITextFieldWrapper CreatedAt => this.GetField<TextFieldWrapper>("CreatedAt");

 		public string CreatedAtValue => this.CreatedAt.Value;

		/// <summary><para>Field: CustomMetadata</para><para>Data type: Name Value List</para></summary>
		public virtual ITextFieldWrapper CustomMetadata => this.GetField<TextFieldWrapper>("CustomMetadata");

 		public string CustomMetadataValue => this.CustomMetadata.Value;

		/// <summary><para>Field: Description</para><para>Data type: Rich Text</para></summary>
		[IndexField("description")]
		public virtual IRichTextFieldWrapper Description => this.GetField<RichTextFieldWrapper>("Description");

		[IndexField("description")]
 		public string DescriptionValue => this.Description.Value;

		/// <summary><para>Field: Duration</para><para>Data type: ReadOnlyText</para></summary>
		public virtual ITextFieldWrapper Duration => this.GetField<TextFieldWrapper>("Duration");

 		public string DurationValue => this.Duration.Value;

		/// <summary><para>Field: EmbedCode</para><para>Data type: ReadOnlyText</para></summary>
		public virtual ITextFieldWrapper EmbedCode => this.GetField<TextFieldWrapper>("EmbedCode");

 		public string EmbedCodeValue => this.EmbedCode.Value;

		/// <summary><para>Field: Events</para><para>Data type: Multilist</para></summary>
		[IndexField("events")]
		public virtual IListFieldWrapper Events => this.GetField<ListFieldWrapper>("Events");

		[IndexField("events")]
 		public IEnumerable<Guid> EventsValue => this.Events.Value;

		/// <summary><para>Field: IsLiveStream</para><para>Data type: Checkbox</para></summary>
		[IndexField("islivestream")]
		public virtual IBooleanFieldWrapper IsLiveStream => this.GetField<BooleanFieldWrapper>("isLiveStream");

		[IndexField("islivestream")]
 		public bool IsLiveStreamValue => this.IsLiveStream.Value;

		/// <summary><para>Field: LabelsList</para><para>Data type: Multilist</para></summary>
		[IndexField("labelslist")]
		public virtual IListFieldWrapper LabelsList => this.GetField<ListFieldWrapper>("LabelsList");

		[IndexField("labelslist")]
 		public IEnumerable<Guid> LabelsListValue => this.LabelsList.Value;

		/// <summary><para>Field: Name</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("name")]
		public virtual ITextFieldWrapper Name => this.GetField<TextFieldWrapper>("Name");

		[IndexField("name")]
 		public string NameValue => this.Name.Value;

		/// <summary><para>Field: Player</para><para>Data type: Droplink</para></summary>
		[IndexField("player")]
		public virtual ILinkFieldWrapper Player => this.GetField<LinkFieldWrapper>("Player");

		[IndexField("player")]
 		public Guid PlayerValue => this.Player.Value;

		/// <summary><para>Field: PreviewImageUrl</para><para>Data type: ImagePreview</para></summary>
		public virtual ITextFieldWrapper PreviewImageUrl => this.GetField<TextFieldWrapper>("PreviewImageUrl");

 		public string PreviewImageUrlValue => this.PreviewImageUrl.Value;

		/// <summary><para>Field: Status</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("status")]
		public virtual ITextFieldWrapper Status => this.GetField<TextFieldWrapper>("Status");

		[IndexField("status")]
 		public string StatusValue => this.Status.Value;

		/// <summary><para>Field: UpdatedAt</para><para>Data type: ReadOnlyText</para></summary>
		public virtual ITextFieldWrapper UpdatedAt => this.GetField<TextFieldWrapper>("UpdatedAt");

 		public string UpdatedAtValue => this.UpdatedAt.Value;

		/// <summary><para>Field: VideoList</para><para>Data type: Multilist</para></summary>
		[IndexField("videolist")]
		public virtual IListFieldWrapper VideoList => this.GetField<ListFieldWrapper>("VideoList");

		[IndexField("videolist")]
 		public IEnumerable<Guid> VideoListValue => this.VideoList.Value;
	}
}
#endregion
#region OoyalaLabel (Ignite)
namespace LM.Model.Templates.Ignite
{
	/// <summary><para>Template: OoyalaLabel</para><para>ID: {060621C8-6668-40D0-A578-53432121FEEF}</para><para>/sitecore/templates/MediaFramework/Ooyala/OoyalaLabel</para></summary>
	[TemplateMapping("{060621C8-6668-40D0-A578-53432121FEEF}", "InterfaceMap")]
	public partial interface IOoyalaLabel :
		ICustomItemWrapper
	{

    	/// <summary><para>Template: OoyalaLabel</para><para>Field: FullName</para><para>Data type: ReadOnlyText</para></summary>
		ITextFieldWrapper FullName { get; }

    	/// <summary><para>Template: OoyalaLabel</para><para>Field: FullName</para><para>Data type: ReadOnlyText</para></summary>
		string FullNameValue { get; }

    	/// <summary><para>Template: OoyalaLabel</para><para>Field: ID</para><para>Data type: ReadOnlyText</para></summary>
		ITextFieldWrapper ID { get; }

    	/// <summary><para>Template: OoyalaLabel</para><para>Field: ID</para><para>Data type: ReadOnlyText</para></summary>
		string IDValue { get; }

    	/// <summary><para>Template: OoyalaLabel</para><para>Field: Name</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("name")]
		ITextFieldWrapper Name { get; }

    	/// <summary><para>Template: OoyalaLabel</para><para>Field: Name</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("name")]
		string NameValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{060621C8-6668-40D0-A578-53432121FEEF}", typeof(Guid))]
	[TemplateMapping("{060621C8-6668-40D0-A578-53432121FEEF}")]
	public partial class OoyalaLabel : CustomItemWrapper, IOoyalaLabel
	{
		public OoyalaLabel(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public OoyalaLabel(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: FullName</para><para>Data type: ReadOnlyText</para></summary>
		public virtual ITextFieldWrapper FullName => this.GetField<TextFieldWrapper>("FullName");

 		public string FullNameValue => this.FullName.Value;

		/// <summary><para>Field: ID</para><para>Data type: ReadOnlyText</para></summary>
		public virtual ITextFieldWrapper ID => this.GetField<TextFieldWrapper>("ID");

 		public string IDValue => this.ID.Value;

		/// <summary><para>Field: Name</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("name")]
		public virtual ITextFieldWrapper Name => this.GetField<TextFieldWrapper>("Name");

		[IndexField("name")]
 		public string NameValue => this.Name.Value;
	}
}
#endregion
#region OoyalaMediaElement (Ignite)
namespace LM.Model.Templates.Ignite
{
	/// <summary><para>Template: OoyalaMediaElement</para><para>ID: {2F28989C-5028-472C-89AF-73E4E8BF1A93}</para><para>/sitecore/templates/MediaFramework/Ooyala/OoyalaMediaElement</para></summary>
	[TemplateMapping("{2F28989C-5028-472C-89AF-73E4E8BF1A93}", "InterfaceMap")]
	public partial interface IOoyalaMediaElement :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IMediaElement
	{

    	/// <summary><para>Template: OoyalaMediaElement</para><para>Field: AssetType</para><para>Data type: ReadOnlyText</para></summary>
		ITextFieldWrapper AssetType { get; }

    	/// <summary><para>Template: OoyalaMediaElement</para><para>Field: AssetType</para><para>Data type: ReadOnlyText</para></summary>
		string AssetTypeValue { get; }

    	/// <summary><para>Template: OoyalaMediaElement</para><para>Field: CreatedAt</para><para>Data type: ReadOnlyText</para></summary>
		ITextFieldWrapper CreatedAt { get; }

    	/// <summary><para>Template: OoyalaMediaElement</para><para>Field: CreatedAt</para><para>Data type: ReadOnlyText</para></summary>
		string CreatedAtValue { get; }

    	/// <summary><para>Template: OoyalaMediaElement</para><para>Field: CustomMetadata</para><para>Data type: Name Value List</para></summary>
		ITextFieldWrapper CustomMetadata { get; }

    	/// <summary><para>Template: OoyalaMediaElement</para><para>Field: CustomMetadata</para><para>Data type: Name Value List</para></summary>
		string CustomMetadataValue { get; }

    	/// <summary><para>Template: OoyalaMediaElement</para><para>Field: Description</para><para>Data type: Rich Text</para></summary>
		[IndexField("description")]
		IRichTextFieldWrapper Description { get; }

    	/// <summary><para>Template: OoyalaMediaElement</para><para>Field: Description</para><para>Data type: Rich Text</para></summary>
		[IndexField("description")]
		string DescriptionValue { get; }

    	/// <summary><para>Template: OoyalaMediaElement</para><para>Field: Duration</para><para>Data type: ReadOnlyText</para></summary>
		ITextFieldWrapper Duration { get; }

    	/// <summary><para>Template: OoyalaMediaElement</para><para>Field: Duration</para><para>Data type: ReadOnlyText</para></summary>
		string DurationValue { get; }

    	/// <summary><para>Template: OoyalaMediaElement</para><para>Field: EmbedCode</para><para>Data type: ReadOnlyText</para></summary>
		ITextFieldWrapper EmbedCode { get; }

    	/// <summary><para>Template: OoyalaMediaElement</para><para>Field: EmbedCode</para><para>Data type: ReadOnlyText</para></summary>
		string EmbedCodeValue { get; }

    	/// <summary><para>Template: OoyalaMediaElement</para><para>Field: isLiveStream</para><para>Data type: Checkbox</para></summary>
		[IndexField("islivestream")]
		IBooleanFieldWrapper IsLiveStream { get; }

    	/// <summary><para>Template: OoyalaMediaElement</para><para>Field: isLiveStream</para><para>Data type: Checkbox</para></summary>
		[IndexField("islivestream")]
		bool IsLiveStreamValue { get; }

    	/// <summary><para>Template: OoyalaMediaElement</para><para>Field: LabelsList</para><para>Data type: Multilist</para></summary>
		[IndexField("labelslist")]
		IListFieldWrapper LabelsList { get; }

    	/// <summary><para>Template: OoyalaMediaElement</para><para>Field: LabelsList</para><para>Data type: Multilist</para></summary>
		[IndexField("labelslist")]
		IEnumerable<Guid> LabelsListValue { get; }

    	/// <summary><para>Template: OoyalaMediaElement</para><para>Field: Name</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("name")]
		ITextFieldWrapper Name { get; }

    	/// <summary><para>Template: OoyalaMediaElement</para><para>Field: Name</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("name")]
		string NameValue { get; }

    	/// <summary><para>Template: OoyalaMediaElement</para><para>Field: Player</para><para>Data type: Droplink</para></summary>
		[IndexField("player")]
		ILinkFieldWrapper Player { get; }

    	/// <summary><para>Template: OoyalaMediaElement</para><para>Field: Player</para><para>Data type: Droplink</para></summary>
		[IndexField("player")]
		Guid PlayerValue { get; }

    	/// <summary><para>Template: OoyalaMediaElement</para><para>Field: PreviewImageUrl</para><para>Data type: ImagePreview</para></summary>
		ITextFieldWrapper PreviewImageUrl { get; }

    	/// <summary><para>Template: OoyalaMediaElement</para><para>Field: PreviewImageUrl</para><para>Data type: ImagePreview</para></summary>
		string PreviewImageUrlValue { get; }

    	/// <summary><para>Template: OoyalaMediaElement</para><para>Field: Status</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("status")]
		ITextFieldWrapper Status { get; }

    	/// <summary><para>Template: OoyalaMediaElement</para><para>Field: Status</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("status")]
		string StatusValue { get; }

    	/// <summary><para>Template: OoyalaMediaElement</para><para>Field: UpdatedAt</para><para>Data type: ReadOnlyText</para></summary>
		ITextFieldWrapper UpdatedAt { get; }

    	/// <summary><para>Template: OoyalaMediaElement</para><para>Field: UpdatedAt</para><para>Data type: ReadOnlyText</para></summary>
		string UpdatedAtValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{2F28989C-5028-472C-89AF-73E4E8BF1A93}", typeof(Guid))]
	[TemplateMapping("{2F28989C-5028-472C-89AF-73E4E8BF1A93}")]
	public partial class OoyalaMediaElement : CustomItemWrapper, IOoyalaMediaElement
	{
		public OoyalaMediaElement(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public OoyalaMediaElement(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: AssetType</para><para>Data type: ReadOnlyText</para></summary>
		public virtual ITextFieldWrapper AssetType => this.GetField<TextFieldWrapper>("AssetType");

 		public string AssetTypeValue => this.AssetType.Value;

		/// <summary><para>Field: CreatedAt</para><para>Data type: ReadOnlyText</para></summary>
		public virtual ITextFieldWrapper CreatedAt => this.GetField<TextFieldWrapper>("CreatedAt");

 		public string CreatedAtValue => this.CreatedAt.Value;

		/// <summary><para>Field: CustomMetadata</para><para>Data type: Name Value List</para></summary>
		public virtual ITextFieldWrapper CustomMetadata => this.GetField<TextFieldWrapper>("CustomMetadata");

 		public string CustomMetadataValue => this.CustomMetadata.Value;

		/// <summary><para>Field: Description</para><para>Data type: Rich Text</para></summary>
		[IndexField("description")]
		public virtual IRichTextFieldWrapper Description => this.GetField<RichTextFieldWrapper>("Description");

		[IndexField("description")]
 		public string DescriptionValue => this.Description.Value;

		/// <summary><para>Field: Duration</para><para>Data type: ReadOnlyText</para></summary>
		public virtual ITextFieldWrapper Duration => this.GetField<TextFieldWrapper>("Duration");

 		public string DurationValue => this.Duration.Value;

		/// <summary><para>Field: EmbedCode</para><para>Data type: ReadOnlyText</para></summary>
		public virtual ITextFieldWrapper EmbedCode => this.GetField<TextFieldWrapper>("EmbedCode");

 		public string EmbedCodeValue => this.EmbedCode.Value;

		/// <summary><para>Field: Events</para><para>Data type: Multilist</para></summary>
		[IndexField("events")]
		public virtual IListFieldWrapper Events => this.GetField<ListFieldWrapper>("Events");

		[IndexField("events")]
 		public IEnumerable<Guid> EventsValue => this.Events.Value;

		/// <summary><para>Field: IsLiveStream</para><para>Data type: Checkbox</para></summary>
		[IndexField("islivestream")]
		public virtual IBooleanFieldWrapper IsLiveStream => this.GetField<BooleanFieldWrapper>("isLiveStream");

		[IndexField("islivestream")]
 		public bool IsLiveStreamValue => this.IsLiveStream.Value;

		/// <summary><para>Field: LabelsList</para><para>Data type: Multilist</para></summary>
		[IndexField("labelslist")]
		public virtual IListFieldWrapper LabelsList => this.GetField<ListFieldWrapper>("LabelsList");

		[IndexField("labelslist")]
 		public IEnumerable<Guid> LabelsListValue => this.LabelsList.Value;

		/// <summary><para>Field: Name</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("name")]
		public virtual ITextFieldWrapper Name => this.GetField<TextFieldWrapper>("Name");

		[IndexField("name")]
 		public string NameValue => this.Name.Value;

		/// <summary><para>Field: Player</para><para>Data type: Droplink</para></summary>
		[IndexField("player")]
		public virtual ILinkFieldWrapper Player => this.GetField<LinkFieldWrapper>("Player");

		[IndexField("player")]
 		public Guid PlayerValue => this.Player.Value;

		/// <summary><para>Field: PreviewImageUrl</para><para>Data type: ImagePreview</para></summary>
		public virtual ITextFieldWrapper PreviewImageUrl => this.GetField<TextFieldWrapper>("PreviewImageUrl");

 		public string PreviewImageUrlValue => this.PreviewImageUrl.Value;

		/// <summary><para>Field: Status</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("status")]
		public virtual ITextFieldWrapper Status => this.GetField<TextFieldWrapper>("Status");

		[IndexField("status")]
 		public string StatusValue => this.Status.Value;

		/// <summary><para>Field: UpdatedAt</para><para>Data type: ReadOnlyText</para></summary>
		public virtual ITextFieldWrapper UpdatedAt => this.GetField<TextFieldWrapper>("UpdatedAt");

 		public string UpdatedAtValue => this.UpdatedAt.Value;
	}
}
#endregion
#region OoyalaVideo (Ignite)
namespace LM.Model.Templates.Ignite
{
	/// <summary><para>Template: OoyalaVideo</para><para>ID: {C3B8C43D-AD6B-49E2-9C6E-2FB4B53A966A}</para><para>/sitecore/templates/MediaFramework/Ooyala/OoyalaVideo</para></summary>
	[TemplateMapping("{C3B8C43D-AD6B-49E2-9C6E-2FB4B53A966A}", "InterfaceMap")]
	public partial interface IOoyalaVideo :
		ICustomItemWrapper,
		LM.Model.Templates.Ignite.IMediaElement,
		LM.Model.Templates.Ignite.IOoyalaMediaElement
	{

    	/// <summary><para>Template: OoyalaVideo</para><para>Field: OriginalFileName</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("originalfilename")]
		ITextFieldWrapper OriginalFileName { get; }

    	/// <summary><para>Template: OoyalaVideo</para><para>Field: OriginalFileName</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("originalfilename")]
		string OriginalFileNameValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{C3B8C43D-AD6B-49E2-9C6E-2FB4B53A966A}", typeof(Guid))]
	[TemplateMapping("{C3B8C43D-AD6B-49E2-9C6E-2FB4B53A966A}")]
	public partial class OoyalaVideo : CustomItemWrapper, IOoyalaVideo
	{
		public OoyalaVideo(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public OoyalaVideo(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: AssetType</para><para>Data type: ReadOnlyText</para></summary>
		public virtual ITextFieldWrapper AssetType => this.GetField<TextFieldWrapper>("AssetType");

 		public string AssetTypeValue => this.AssetType.Value;

		/// <summary><para>Field: CreatedAt</para><para>Data type: ReadOnlyText</para></summary>
		public virtual ITextFieldWrapper CreatedAt => this.GetField<TextFieldWrapper>("CreatedAt");

 		public string CreatedAtValue => this.CreatedAt.Value;

		/// <summary><para>Field: CustomMetadata</para><para>Data type: Name Value List</para></summary>
		public virtual ITextFieldWrapper CustomMetadata => this.GetField<TextFieldWrapper>("CustomMetadata");

 		public string CustomMetadataValue => this.CustomMetadata.Value;

		/// <summary><para>Field: Description</para><para>Data type: Rich Text</para></summary>
		[IndexField("description")]
		public virtual IRichTextFieldWrapper Description => this.GetField<RichTextFieldWrapper>("Description");

		[IndexField("description")]
 		public string DescriptionValue => this.Description.Value;

		/// <summary><para>Field: Duration</para><para>Data type: ReadOnlyText</para></summary>
		public virtual ITextFieldWrapper Duration => this.GetField<TextFieldWrapper>("Duration");

 		public string DurationValue => this.Duration.Value;

		/// <summary><para>Field: EmbedCode</para><para>Data type: ReadOnlyText</para></summary>
		public virtual ITextFieldWrapper EmbedCode => this.GetField<TextFieldWrapper>("EmbedCode");

 		public string EmbedCodeValue => this.EmbedCode.Value;

		/// <summary><para>Field: Events</para><para>Data type: Multilist</para></summary>
		[IndexField("events")]
		public virtual IListFieldWrapper Events => this.GetField<ListFieldWrapper>("Events");

		[IndexField("events")]
 		public IEnumerable<Guid> EventsValue => this.Events.Value;

		/// <summary><para>Field: IsLiveStream</para><para>Data type: Checkbox</para></summary>
		[IndexField("islivestream")]
		public virtual IBooleanFieldWrapper IsLiveStream => this.GetField<BooleanFieldWrapper>("isLiveStream");

		[IndexField("islivestream")]
 		public bool IsLiveStreamValue => this.IsLiveStream.Value;

		/// <summary><para>Field: LabelsList</para><para>Data type: Multilist</para></summary>
		[IndexField("labelslist")]
		public virtual IListFieldWrapper LabelsList => this.GetField<ListFieldWrapper>("LabelsList");

		[IndexField("labelslist")]
 		public IEnumerable<Guid> LabelsListValue => this.LabelsList.Value;

		/// <summary><para>Field: Name</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("name")]
		public virtual ITextFieldWrapper Name => this.GetField<TextFieldWrapper>("Name");

		[IndexField("name")]
 		public string NameValue => this.Name.Value;

		/// <summary><para>Field: OriginalFileName</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("originalfilename")]
		public virtual ITextFieldWrapper OriginalFileName => this.GetField<TextFieldWrapper>("OriginalFileName");

		[IndexField("originalfilename")]
 		public string OriginalFileNameValue => this.OriginalFileName.Value;

		/// <summary><para>Field: Player</para><para>Data type: Droplink</para></summary>
		[IndexField("player")]
		public virtual ILinkFieldWrapper Player => this.GetField<LinkFieldWrapper>("Player");

		[IndexField("player")]
 		public Guid PlayerValue => this.Player.Value;

		/// <summary><para>Field: PreviewImageUrl</para><para>Data type: ImagePreview</para></summary>
		public virtual ITextFieldWrapper PreviewImageUrl => this.GetField<TextFieldWrapper>("PreviewImageUrl");

 		public string PreviewImageUrlValue => this.PreviewImageUrl.Value;

		/// <summary><para>Field: Status</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("status")]
		public virtual ITextFieldWrapper Status => this.GetField<TextFieldWrapper>("Status");

		[IndexField("status")]
 		public string StatusValue => this.Status.Value;

		/// <summary><para>Field: UpdatedAt</para><para>Data type: ReadOnlyText</para></summary>
		public virtual ITextFieldWrapper UpdatedAt => this.GetField<TextFieldWrapper>("UpdatedAt");

 		public string UpdatedAtValue => this.UpdatedAt.Value;
	}
}
#endregion
#region OoyalaVideoPlayer (Ignite)
namespace LM.Model.Templates.Ignite
{
	/// <summary><para>Template: OoyalaVideoPlayer</para><para>ID: {FA102033-8863-43C1-9B86-96A0E345B6CA}</para><para>/sitecore/templates/MediaFramework/Ooyala/OoyalaVideoPlayer</para></summary>
	[TemplateMapping("{FA102033-8863-43C1-9B86-96A0E345B6CA}", "InterfaceMap")]
	public partial interface IOoyalaVideoPlayer :
		ICustomItemWrapper
	{

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: AccentColor</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("accentcolor")]
		ITextFieldWrapper AccentColor { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: AccentColor</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("accentcolor")]
		string AccentColorValue { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: Alpha</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("alpha")]
		ITextFieldWrapper Alpha { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: Alpha</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("alpha")]
		string AlphaValue { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: AlwaysShow</para><para>Data type: Checkbox</para></summary>
		[IndexField("alwaysshow")]
		IBooleanFieldWrapper AlwaysShow { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: AlwaysShow</para><para>Data type: Checkbox</para></summary>
		[IndexField("alwaysshow")]
		bool AlwaysShowValue { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: BufferOnPause</para><para>Data type: Checkbox</para></summary>
		[IndexField("bufferonpause")]
		IBooleanFieldWrapper BufferOnPause { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: BufferOnPause</para><para>Data type: Checkbox</para></summary>
		[IndexField("bufferonpause")]
		bool BufferOnPauseValue { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: ClickUrl</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("clickurl")]
		ITextFieldWrapper ClickUrl { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: ClickUrl</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("clickurl")]
		string ClickUrlValue { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: DefaultLanguage</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("defaultlanguage")]
		ITextFieldWrapper DefaultLanguage { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: DefaultLanguage</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("defaultlanguage")]
		string DefaultLanguageValue { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: DiggSharing</para><para>Data type: Checkbox</para></summary>
		[IndexField("diggsharing")]
		IBooleanFieldWrapper DiggSharing { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: DiggSharing</para><para>Data type: Checkbox</para></summary>
		[IndexField("diggsharing")]
		bool DiggSharingValue { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: EmailSharing</para><para>Data type: Checkbox</para></summary>
		[IndexField("emailsharing")]
		IBooleanFieldWrapper EmailSharing { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: EmailSharing</para><para>Data type: Checkbox</para></summary>
		[IndexField("emailsharing")]
		bool EmailSharingValue { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: EnableErrorScreen</para><para>Data type: Checkbox</para></summary>
		[IndexField("enableerrorscreen")]
		IBooleanFieldWrapper EnableErrorScreen { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: EnableErrorScreen</para><para>Data type: Checkbox</para></summary>
		[IndexField("enableerrorscreen")]
		bool EnableErrorScreenValue { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: FacebookSharing</para><para>Data type: Checkbox</para></summary>
		[IndexField("facebooksharing")]
		IBooleanFieldWrapper FacebookSharing { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: FacebookSharing</para><para>Data type: Checkbox</para></summary>
		[IndexField("facebooksharing")]
		bool FacebookSharingValue { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: ID</para><para>Data type: ReadOnlyText</para></summary>
		ITextFieldWrapper ID { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: ID</para><para>Data type: ReadOnlyText</para></summary>
		string IDValue { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: isDefault</para><para>Data type: ReadOnlyCheckBox</para></summary>
		ITextFieldWrapper IsDefault { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: isDefault</para><para>Data type: ReadOnlyCheckBox</para></summary>
		string IsDefaultValue { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: Name</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("name")]
		ITextFieldWrapper Name { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: Name</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("name")]
		string NameValue { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: Parameters</para><para>Data type: Name Value List</para></summary>
		ITextFieldWrapper Parameters { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: Parameters</para><para>Data type: Name Value List</para></summary>
		string ParametersValue { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: ProviderHomepageUrl</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("providerhomepageurl")]
		ITextFieldWrapper ProviderHomepageUrl { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: ProviderHomepageUrl</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("providerhomepageurl")]
		string ProviderHomepageUrlValue { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: ScrubberImageUrl</para><para>Data type: ImagePreview</para></summary>
		ITextFieldWrapper ScrubberImageUrl { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: ScrubberImageUrl</para><para>Data type: ImagePreview</para></summary>
		string ScrubberImageUrlValue { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: ShowAdCountdown</para><para>Data type: Checkbox</para></summary>
		[IndexField("showadcountdown")]
		IBooleanFieldWrapper ShowAdCountdown { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: ShowAdCountdown</para><para>Data type: Checkbox</para></summary>
		[IndexField("showadcountdown")]
		bool ShowAdCountdownValue { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: ShowBitrateButton</para><para>Data type: Checkbox</para></summary>
		[IndexField("showbitratebutton")]
		IBooleanFieldWrapper ShowBitrateButton { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: ShowBitrateButton</para><para>Data type: Checkbox</para></summary>
		[IndexField("showbitratebutton")]
		bool ShowBitrateButtonValue { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: ShowChannelButton</para><para>Data type: Checkbox</para></summary>
		[IndexField("showchannelbutton")]
		IBooleanFieldWrapper ShowChannelButton { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: ShowChannelButton</para><para>Data type: Checkbox</para></summary>
		[IndexField("showchannelbutton")]
		bool ShowChannelButtonValue { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: ShowEmbedButton</para><para>Data type: Checkbox</para></summary>
		[IndexField("showembedbutton")]
		IBooleanFieldWrapper ShowEmbedButton { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: ShowEmbedButton</para><para>Data type: Checkbox</para></summary>
		[IndexField("showembedbutton")]
		bool ShowEmbedButtonValue { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: ShowEndScreenReplayButton</para><para>Data type: Checkbox</para></summary>
		[IndexField("showendscreenreplaybutton")]
		IBooleanFieldWrapper ShowEndScreenReplayButton { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: ShowEndScreenReplayButton</para><para>Data type: Checkbox</para></summary>
		[IndexField("showendscreenreplaybutton")]
		bool ShowEndScreenReplayButtonValue { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: ShowInfoButton</para><para>Data type: Checkbox</para></summary>
		[IndexField("showinfobutton")]
		IBooleanFieldWrapper ShowInfoButton { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: ShowInfoButton</para><para>Data type: Checkbox</para></summary>
		[IndexField("showinfobutton")]
		bool ShowInfoButtonValue { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: ShowInfoScreenDescription</para><para>Data type: Checkbox</para></summary>
		[IndexField("showinfoscreendescription")]
		IBooleanFieldWrapper ShowInfoScreenDescription { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: ShowInfoScreenDescription</para><para>Data type: Checkbox</para></summary>
		[IndexField("showinfoscreendescription")]
		bool ShowInfoScreenDescriptionValue { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: ShowInfoScreenHomepageLink</para><para>Data type: Checkbox</para></summary>
		[IndexField("showinfoscreenhomepagelink")]
		IBooleanFieldWrapper ShowInfoScreenHomepageLink { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: ShowInfoScreenHomepageLink</para><para>Data type: Checkbox</para></summary>
		[IndexField("showinfoscreenhomepagelink")]
		bool ShowInfoScreenHomepageLinkValue { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: ShowInfoScreenTitle</para><para>Data type: Checkbox</para></summary>
		[IndexField("showinfoscreentitle")]
		IBooleanFieldWrapper ShowInfoScreenTitle { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: ShowInfoScreenTitle</para><para>Data type: Checkbox</para></summary>
		[IndexField("showinfoscreentitle")]
		bool ShowInfoScreenTitleValue { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: ShowShareButton</para><para>Data type: Checkbox</para></summary>
		[IndexField("showsharebutton")]
		IBooleanFieldWrapper ShowShareButton { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: ShowShareButton</para><para>Data type: Checkbox</para></summary>
		[IndexField("showsharebutton")]
		bool ShowShareButtonValue { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: ShowVolumeButton</para><para>Data type: Checkbox</para></summary>
		[IndexField("showvolumebutton")]
		IBooleanFieldWrapper ShowVolumeButton { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: ShowVolumeButton</para><para>Data type: Checkbox</para></summary>
		[IndexField("showvolumebutton")]
		bool ShowVolumeButtonValue { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: TwitterSharing</para><para>Data type: Checkbox</para></summary>
		[IndexField("twittersharing")]
		IBooleanFieldWrapper TwitterSharing { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: TwitterSharing</para><para>Data type: Checkbox</para></summary>
		[IndexField("twittersharing")]
		bool TwitterSharingValue { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: UrlSharing</para><para>Data type: Checkbox</para></summary>
		[IndexField("urlsharing")]
		IBooleanFieldWrapper UrlSharing { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: UrlSharing</para><para>Data type: Checkbox</para></summary>
		[IndexField("urlsharing")]
		bool UrlSharingValue { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: WatermarkImageUrl</para><para>Data type: ImagePreview</para></summary>
		ITextFieldWrapper WatermarkImageUrl { get; }

    	/// <summary><para>Template: OoyalaVideoPlayer</para><para>Field: WatermarkImageUrl</para><para>Data type: ImagePreview</para></summary>
		string WatermarkImageUrlValue { get; }
	}
	
	[PredefinedQuery("TemplateId", ComparisonType.Equal, "{FA102033-8863-43C1-9B86-96A0E345B6CA}", typeof(Guid))]
	[TemplateMapping("{FA102033-8863-43C1-9B86-96A0E345B6CA}")]
	public partial class OoyalaVideoPlayer : CustomItemWrapper, IOoyalaVideoPlayer
	{
		public OoyalaVideoPlayer(Item item, ISpawnProvider spawnProvider)
			: base(item, spawnProvider) { }

		public OoyalaVideoPlayer(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider)
			: base(id, lazyFields, spawnProvider) { }

		/// <summary><para>Field: AccentColor</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("accentcolor")]
		public virtual ITextFieldWrapper AccentColor => this.GetField<TextFieldWrapper>("AccentColor");

		[IndexField("accentcolor")]
 		public string AccentColorValue => this.AccentColor.Value;

		/// <summary><para>Field: Alpha</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("alpha")]
		public virtual ITextFieldWrapper Alpha => this.GetField<TextFieldWrapper>("Alpha");

		[IndexField("alpha")]
 		public string AlphaValue => this.Alpha.Value;

		/// <summary><para>Field: AlwaysShow</para><para>Data type: Checkbox</para></summary>
		[IndexField("alwaysshow")]
		public virtual IBooleanFieldWrapper AlwaysShow => this.GetField<BooleanFieldWrapper>("AlwaysShow");

		[IndexField("alwaysshow")]
 		public bool AlwaysShowValue => this.AlwaysShow.Value;

		/// <summary><para>Field: BufferOnPause</para><para>Data type: Checkbox</para></summary>
		[IndexField("bufferonpause")]
		public virtual IBooleanFieldWrapper BufferOnPause => this.GetField<BooleanFieldWrapper>("BufferOnPause");

		[IndexField("bufferonpause")]
 		public bool BufferOnPauseValue => this.BufferOnPause.Value;

		/// <summary><para>Field: ClickUrl</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("clickurl")]
		public virtual ITextFieldWrapper ClickUrl => this.GetField<TextFieldWrapper>("ClickUrl");

		[IndexField("clickurl")]
 		public string ClickUrlValue => this.ClickUrl.Value;

		/// <summary><para>Field: DefaultLanguage</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("defaultlanguage")]
		public virtual ITextFieldWrapper DefaultLanguage => this.GetField<TextFieldWrapper>("DefaultLanguage");

		[IndexField("defaultlanguage")]
 		public string DefaultLanguageValue => this.DefaultLanguage.Value;

		/// <summary><para>Field: DiggSharing</para><para>Data type: Checkbox</para></summary>
		[IndexField("diggsharing")]
		public virtual IBooleanFieldWrapper DiggSharing => this.GetField<BooleanFieldWrapper>("DiggSharing");

		[IndexField("diggsharing")]
 		public bool DiggSharingValue => this.DiggSharing.Value;

		/// <summary><para>Field: EmailSharing</para><para>Data type: Checkbox</para></summary>
		[IndexField("emailsharing")]
		public virtual IBooleanFieldWrapper EmailSharing => this.GetField<BooleanFieldWrapper>("EmailSharing");

		[IndexField("emailsharing")]
 		public bool EmailSharingValue => this.EmailSharing.Value;

		/// <summary><para>Field: EnableErrorScreen</para><para>Data type: Checkbox</para></summary>
		[IndexField("enableerrorscreen")]
		public virtual IBooleanFieldWrapper EnableErrorScreen => this.GetField<BooleanFieldWrapper>("EnableErrorScreen");

		[IndexField("enableerrorscreen")]
 		public bool EnableErrorScreenValue => this.EnableErrorScreen.Value;

		/// <summary><para>Field: FacebookSharing</para><para>Data type: Checkbox</para></summary>
		[IndexField("facebooksharing")]
		public virtual IBooleanFieldWrapper FacebookSharing => this.GetField<BooleanFieldWrapper>("FacebookSharing");

		[IndexField("facebooksharing")]
 		public bool FacebookSharingValue => this.FacebookSharing.Value;

		/// <summary><para>Field: ID</para><para>Data type: ReadOnlyText</para></summary>
		public virtual ITextFieldWrapper ID => this.GetField<TextFieldWrapper>("ID");

 		public string IDValue => this.ID.Value;

		/// <summary><para>Field: IsDefault</para><para>Data type: ReadOnlyCheckBox</para></summary>
		public virtual ITextFieldWrapper IsDefault => this.GetField<TextFieldWrapper>("isDefault");

 		public string IsDefaultValue => this.IsDefault.Value;

		/// <summary><para>Field: Name</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("name")]
		public virtual ITextFieldWrapper Name => this.GetField<TextFieldWrapper>("Name");

		[IndexField("name")]
 		public string NameValue => this.Name.Value;

		/// <summary><para>Field: Parameters</para><para>Data type: Name Value List</para></summary>
		public virtual ITextFieldWrapper Parameters => this.GetField<TextFieldWrapper>("Parameters");

 		public string ParametersValue => this.Parameters.Value;

		/// <summary><para>Field: ProviderHomepageUrl</para><para>Data type: Single-Line Text</para></summary>
		[IndexField("providerhomepageurl")]
		public virtual ITextFieldWrapper ProviderHomepageUrl => this.GetField<TextFieldWrapper>("ProviderHomepageUrl");

		[IndexField("providerhomepageurl")]
 		public string ProviderHomepageUrlValue => this.ProviderHomepageUrl.Value;

		/// <summary><para>Field: ScrubberImageUrl</para><para>Data type: ImagePreview</para></summary>
		public virtual ITextFieldWrapper ScrubberImageUrl => this.GetField<TextFieldWrapper>("ScrubberImageUrl");

 		public string ScrubberImageUrlValue => this.ScrubberImageUrl.Value;

		/// <summary><para>Field: ShowAdCountdown</para><para>Data type: Checkbox</para></summary>
		[IndexField("showadcountdown")]
		public virtual IBooleanFieldWrapper ShowAdCountdown => this.GetField<BooleanFieldWrapper>("ShowAdCountdown");

		[IndexField("showadcountdown")]
 		public bool ShowAdCountdownValue => this.ShowAdCountdown.Value;

		/// <summary><para>Field: ShowBitrateButton</para><para>Data type: Checkbox</para></summary>
		[IndexField("showbitratebutton")]
		public virtual IBooleanFieldWrapper ShowBitrateButton => this.GetField<BooleanFieldWrapper>("ShowBitrateButton");

		[IndexField("showbitratebutton")]
 		public bool ShowBitrateButtonValue => this.ShowBitrateButton.Value;

		/// <summary><para>Field: ShowChannelButton</para><para>Data type: Checkbox</para></summary>
		[IndexField("showchannelbutton")]
		public virtual IBooleanFieldWrapper ShowChannelButton => this.GetField<BooleanFieldWrapper>("ShowChannelButton");

		[IndexField("showchannelbutton")]
 		public bool ShowChannelButtonValue => this.ShowChannelButton.Value;

		/// <summary><para>Field: ShowEmbedButton</para><para>Data type: Checkbox</para></summary>
		[IndexField("showembedbutton")]
		public virtual IBooleanFieldWrapper ShowEmbedButton => this.GetField<BooleanFieldWrapper>("ShowEmbedButton");

		[IndexField("showembedbutton")]
 		public bool ShowEmbedButtonValue => this.ShowEmbedButton.Value;

		/// <summary><para>Field: ShowEndScreenReplayButton</para><para>Data type: Checkbox</para></summary>
		[IndexField("showendscreenreplaybutton")]
		public virtual IBooleanFieldWrapper ShowEndScreenReplayButton => this.GetField<BooleanFieldWrapper>("ShowEndScreenReplayButton");

		[IndexField("showendscreenreplaybutton")]
 		public bool ShowEndScreenReplayButtonValue => this.ShowEndScreenReplayButton.Value;

		/// <summary><para>Field: ShowInfoButton</para><para>Data type: Checkbox</para></summary>
		[IndexField("showinfobutton")]
		public virtual IBooleanFieldWrapper ShowInfoButton => this.GetField<BooleanFieldWrapper>("ShowInfoButton");

		[IndexField("showinfobutton")]
 		public bool ShowInfoButtonValue => this.ShowInfoButton.Value;

		/// <summary><para>Field: ShowInfoScreenDescription</para><para>Data type: Checkbox</para></summary>
		[IndexField("showinfoscreendescription")]
		public virtual IBooleanFieldWrapper ShowInfoScreenDescription => this.GetField<BooleanFieldWrapper>("ShowInfoScreenDescription");

		[IndexField("showinfoscreendescription")]
 		public bool ShowInfoScreenDescriptionValue => this.ShowInfoScreenDescription.Value;

		/// <summary><para>Field: ShowInfoScreenHomepageLink</para><para>Data type: Checkbox</para></summary>
		[IndexField("showinfoscreenhomepagelink")]
		public virtual IBooleanFieldWrapper ShowInfoScreenHomepageLink => this.GetField<BooleanFieldWrapper>("ShowInfoScreenHomepageLink");

		[IndexField("showinfoscreenhomepagelink")]
 		public bool ShowInfoScreenHomepageLinkValue => this.ShowInfoScreenHomepageLink.Value;

		/// <summary><para>Field: ShowInfoScreenTitle</para><para>Data type: Checkbox</para></summary>
		[IndexField("showinfoscreentitle")]
		public virtual IBooleanFieldWrapper ShowInfoScreenTitle => this.GetField<BooleanFieldWrapper>("ShowInfoScreenTitle");

		[IndexField("showinfoscreentitle")]
 		public bool ShowInfoScreenTitleValue => this.ShowInfoScreenTitle.Value;

		/// <summary><para>Field: ShowShareButton</para><para>Data type: Checkbox</para></summary>
		[IndexField("showsharebutton")]
		public virtual IBooleanFieldWrapper ShowShareButton => this.GetField<BooleanFieldWrapper>("ShowShareButton");

		[IndexField("showsharebutton")]
 		public bool ShowShareButtonValue => this.ShowShareButton.Value;

		/// <summary><para>Field: ShowVolumeButton</para><para>Data type: Checkbox</para></summary>
		[IndexField("showvolumebutton")]
		public virtual IBooleanFieldWrapper ShowVolumeButton => this.GetField<BooleanFieldWrapper>("ShowVolumeButton");

		[IndexField("showvolumebutton")]
 		public bool ShowVolumeButtonValue => this.ShowVolumeButton.Value;

		/// <summary><para>Field: TwitterSharing</para><para>Data type: Checkbox</para></summary>
		[IndexField("twittersharing")]
		public virtual IBooleanFieldWrapper TwitterSharing => this.GetField<BooleanFieldWrapper>("TwitterSharing");

		[IndexField("twittersharing")]
 		public bool TwitterSharingValue => this.TwitterSharing.Value;

		/// <summary><para>Field: UrlSharing</para><para>Data type: Checkbox</para></summary>
		[IndexField("urlsharing")]
		public virtual IBooleanFieldWrapper UrlSharing => this.GetField<BooleanFieldWrapper>("UrlSharing");

		[IndexField("urlsharing")]
 		public bool UrlSharingValue => this.UrlSharing.Value;

		/// <summary><para>Field: WatermarkImageUrl</para><para>Data type: ImagePreview</para></summary>
		public virtual ITextFieldWrapper WatermarkImageUrl => this.GetField<TextFieldWrapper>("WatermarkImageUrl");

 		public string WatermarkImageUrlValue => this.WatermarkImageUrl.Value;
	}
}
#endregion


<<<<<<< HEAD
// Generated in 274ms
// Found 120 templates in 4 folders [C:\Projects\crtv-pokercentral.com\src\..\serialization\Build\master\sitecore\templates]
=======
// Generated in 247ms
// Found 122 templates in 4 folders [C:\Projects\crtv-pokercentral.com\src\..\serialization\Build\master\sitecore\templates]
>>>>>>> Added Player Hero and Player Slider code
